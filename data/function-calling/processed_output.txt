Given the following function: calculate_triangle_area with description: Calculate the area of a triangle given its base and height. and parameters: {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The base of the triangle.'}, 'height': {'type': 'integer', 'description': 'The height of the triangle.'}, 'unit': {'type': 'string', 'description': "The unit of measure (defaults to 'units' if not specified)"}}, 'required': ['base', 'height']}, if you are asked to Find the area of a triangle with a base of 10 units and height of 5 units., you will call...
A. similar_function(base=10, height=5, unit=units)
B. calculate_triangle_area(base=10, height=5, unit=units)
C. calculate_triangle_area(wrong_param=value)
D. calculate_triangle_area()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: math.factorial with description: Calculate the factorial of a given number. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'The number for which factorial needs to be calculated.'}}, 'required': ['number']}, if you are asked to Calculate the factorial of 5 using math functions., you will call...
A. math.factorial(number=5)
B. similar_function(number=5)
C. math.factorial(wrong_param=value)
D. math.factorial()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: math.hypot with description: Calculate the Euclidean norm, sqrt(sum(squares)), the length of the vector from the origin to point (x, y) which is the hypotenuse of the right triangle. and parameters: {'type': 'dict', 'properties': {'x': {'type': 'integer', 'description': 'The x-coordinate value.'}, 'y': {'type': 'integer', 'description': 'The y-coordinate value.'}, 'z': {'type': 'integer', 'description': 'Optional. The z-coordinate value. Default is 0.'}}, 'required': ['x', 'y']}, if you are asked to Calculate the hypotenuse of a right triangle given the lengths of the other two sides as 4 and 5., you will call...
A. math.hypot(x=4, y=5, z=)
B. similar_function(x=4, y=5, z=)
C. math.hypot(wrong_param=value)
D. math.hypot()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: algebra.quadratic_roots with description: Find the roots of a quadratic equation ax^2 + bx + c = 0. and parameters: {'type': 'dict', 'properties': {'a': {'type': 'integer', 'description': 'Coefficient of x^2.'}, 'b': {'type': 'integer', 'description': 'Coefficient of x.'}, 'c': {'type': 'integer', 'description': 'Constant term.'}}, 'required': ['a', 'b', 'c']}, if you are asked to Find the roots of a quadratic equation with coefficients a=1, b=-3, c=2., you will call...
A. algebra.quadratic_roots(a=1, b=-3, c=2)
B. similar_function(a=1, b=-3, c=2)
C. algebra.quadratic_roots(wrong_param=value)
D. algebra.quadratic_roots()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: solve_quadratic_equation with description: Function solves the quadratic equation and returns its roots. and parameters: {'type': 'dict', 'properties': {'a': {'type': 'integer', 'description': 'Coefficient of x squared'}, 'b': {'type': 'integer', 'description': 'Coefficient of x'}, 'c': {'type': 'integer', 'description': 'Constant term in the quadratic equation.'}}, 'required': ['a', 'b', 'c']}, if you are asked to Solve a quadratic equation where a=2, b=6, and c=5, you will call...
A. similar_function(a=2, b=6, c=5)
B. solve_quadratic_equation(wrong_param=value)
C. solve_quadratic_equation()
D. solve_quadratic_equation(a=2, b=6, c=5)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: solve_quadratic with description: Solve a quadratic equation given coefficients a, b, and c. If optional 'root_type' is 'real', the function will only return real roots. If not specified, function may return complex roots. and parameters: {'type': 'dict', 'properties': {'a': {'type': 'integer', 'description': 'The coefficient of the squared term in the quadratic equation.'}, 'b': {'type': 'integer', 'description': 'The coefficient of the linear term in the quadratic equation.'}, 'c': {'type': 'integer', 'description': 'The constant term in the quadratic equation.'}, 'root_type': {'type': 'string', 'description': "The type of roots to return: 'real' for real roots, 'all' for both real and complex roots. Default value is 'real'."}}, 'required': ['a', 'b', 'c']}, if you are asked to Find the roots of a quadratic equation given coefficients a = 3, b = -11, and c = -4., you will call...
A. similar_function(a=3, b=-11, c=-4, root_type=)
B. solve_quadratic(a=3, b=-11, c=-4, root_type=)
C. solve_quadratic(wrong_param=value)
D. solve_quadratic()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: solve_quadratic with description: Find the roots of a quadratic equation. Returns both roots. and parameters: {'type': 'dict', 'properties': {'a': {'type': 'integer', 'description': 'Coefficient of xÂ².'}, 'b': {'type': 'integer', 'description': 'Coefficient of x.'}, 'c': {'type': 'integer', 'description': 'Constant term.'}}, 'required': ['a', 'b', 'c']}, if you are asked to What are the roots of the quadratic equation where a=2, b=5 and c=3 ?, you will call...
A. similar_function(a=2, b=5, c=3)
B. solve_quadratic(wrong_param=value)
C. solve_quadratic(a=2, b=5, c=3)
D. solve_quadratic()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_circumference with description: Calculates the circumference of a circle with a given radius. and parameters: {'type': 'dict', 'properties': {'radius': {'type': 'integer', 'description': 'The radius of the circle in the unit given.'}, 'unit': {'type': 'string', 'description': "The unit of measurement for the radius. Default is 'cm'."}}, 'required': ['radius']}, if you are asked to What is the circumference of a circle with a radius of 4 inches?, you will call...
A. similar_function(radius=4, unit=inches)
B. calculate_circumference(wrong_param=value)
C. calculate_circumference(radius=4, unit=inches)
D. calculate_circumference()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: geometry.area_circle with description: Calculate the area of a circle given the radius. and parameters: {'type': 'dict', 'properties': {'radius': {'type': 'integer', 'description': 'The radius of the circle.'}, 'units': {'type': 'string', 'description': "The units in which the radius is measured (defaults to 'meters')."}}, 'required': ['radius']}, if you are asked to What's the area of a circle with a radius of 10?, you will call...
A. geometry.area_circle(radius=10, units=meters)
B. similar_function(radius=10, units=meters)
C. geometry.area_circle(wrong_param=value)
D. geometry.area_circle()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: geometry.calculate_area_circle with description: Calculate the area of a circle given its radius. and parameters: {'type': 'dict', 'properties': {'radius': {'type': 'integer', 'description': 'The radius of the circle.'}, 'unit': {'type': 'string', 'description': "The measurement unit of the radius (optional parameter, default is 'units')."}}, 'required': ['radius']}, if you are asked to Calculate the area of a circle with a radius of 5 units., you will call...
A. similar_function(radius=5, unit=units)
B. geometry.calculate_area_circle(radius=5, unit=units)
C. geometry.calculate_area_circle(wrong_param=value)
D. geometry.calculate_area_circle()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_area with description: Calculate the area of a right-angled triangle given the lengths of its base and height. and parameters: {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The length of the base of the right-angled triangle.'}, 'height': {'type': 'integer', 'description': 'The height of the right-angled triangle.'}, 'unit': {'type': 'string', 'description': "The unit of measure used. Defaults to 'cm'."}}, 'required': ['base', 'height']}, if you are asked to Calculate the area of a right-angled triangle given the lengths of its base and height as 6cm and 10cm., you will call...
A. similar_function(base=6, height=10, unit=cm)
B. calculate_area(wrong_param=value)
C. calculate_area()
D. calculate_area(base=6, height=10, unit=cm)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_triangle_area with description: Calculate the area of a triangle using its base and height. and parameters: {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The length of the base of the triangle.'}, 'height': {'type': 'integer', 'description': 'The height of the triangle from the base.'}}, 'required': ['base', 'height']}, if you are asked to What is the area of a triangle with base of 10 units and height of 5 units?, you will call...
A. calculate_triangle_area(base=10, height=5)
B. similar_function(base=10, height=5)
C. calculate_triangle_area(wrong_param=value)
D. calculate_triangle_area()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: geometry.circumference with description: Calculate the circumference of a circle given the radius. and parameters: {'type': 'dict', 'properties': {'radius': {'type': 'integer', 'description': 'The radius of the circle.'}, 'units': {'type': 'string', 'description': "Units for the output circumference measurement. Default is 'cm'."}}, 'required': ['radius']}, if you are asked to Calculate the circumference of a circle with radius 3, you will call...
A. similar_function(radius=3, units=cm)
B. geometry.circumference(wrong_param=value)
C. geometry.circumference()
D. geometry.circumference(radius=3, units=cm)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_area_under_curve with description: Calculate the area under a mathematical function within a given interval. and parameters: {'type': 'dict', 'properties': {'function': {'type': 'string', 'description': 'The mathematical function as a string.'}, 'interval': {'type': 'array', 'items': {'type': 'float'}, 'description': 'An array that defines the interval to calculate the area under the curve from the start to the end point.'}, 'method': {'type': 'string', 'description': "The numerical method to approximate the area under the curve. The default value is 'trapezoidal'."}}, 'required': ['function', 'interval']}, if you are asked to Calculate the area under the curve y=x^2 from x=1 to x=3., you will call...
A. similar_function(function=x**2, interval=[1.0, 3.0], method=)
B. calculate_area_under_curve(wrong_param=value)
C. calculate_area_under_curve()
D. calculate_area_under_curve(function=x**2, interval=[1.0, 3.0], method=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_derivative with description: Calculate the derivative of a polynomial function. and parameters: {'type': 'dict', 'properties': {'function': {'type': 'string', 'description': 'The polynomial function.'}, 'x_value': {'type': 'float', 'description': 'The x-value at which the derivative is calculated. Optional, default to 0.00.'}}, 'required': ['function']}, if you are asked to Calculate the derivative of the function 3x^2 + 2x - 1., you will call...
A. calculate_derivative(function=3x**2 + 2x - 1, x_value=)
B. similar_function(function=3x**2 + 2x - 1, x_value=)
C. calculate_derivative(wrong_param=value)
D. calculate_derivative()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: integrate with description: Calculate the area under a curve for a specified function between two x values. and parameters: {'type': 'dict', 'properties': {'function': {'type': 'string', 'description': "The function to integrate, represented as a string. For example, 'x^3'"}, 'start_x': {'type': 'integer', 'description': 'The starting x-value to integrate over.'}, 'end_x': {'type': 'integer', 'description': 'The ending x-value to integrate over.'}, 'method': {'type': 'string', 'description': "The method of numerical integration to use. Choices are 'trapezoid' or 'simpson'. Default is 'trapezoid'."}}, 'required': ['function', 'start_x', 'end_x']}, if you are asked to Calculate the area under the curve from x = -2 to x = 3 for the function y = x^3 using simpson method., you will call...
A. integrate(function=x**3, start_x=-2, end_x=3, method=simpson)
B. similar_function(function=x**3, start_x=-2, end_x=3, method=simpson)
C. integrate(wrong_param=value)
D. integrate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculus.derivative with description: Compute the derivative of a function at a specific value. and parameters: {'type': 'dict', 'properties': {'function': {'type': 'string', 'description': 'The function to calculate the derivative of.'}, 'value': {'type': 'integer', 'description': 'The value where the derivative needs to be calculated at.'}, 'function_variable': {'type': 'string', 'description': "The variable present in the function, for instance x or y, etc. Default is 'x'."}}, 'required': ['function', 'value']}, if you are asked to Calculate the derivative of the function 2x^2 at x = 1., you will call...
A. calculus.derivative(function=2x**2, value=1, function_variable=x)
B. similar_function(function=2x**2, value=1, function_variable=x)
C. calculus.derivative(wrong_param=value)
D. calculus.derivative()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_prime_factors with description: Function to retrieve prime factors of a number. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'Number for which prime factors need to be calculated'}, 'formatted': {'type': 'boolean', 'description': 'Return formatted string if true, array if false. Default is true.'}}, 'required': ['number', 'formatted']}, if you are asked to Find the prime factors of 450, you will call...
A. similar_function(number=450, formatted=True)
B. get_prime_factors(number=450, formatted=True)
C. get_prime_factors(wrong_param=value)
D. get_prime_factors()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: number_analysis.prime_factors with description: Compute the prime factors of a number. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'The number to be factored.'}}, 'required': ['number']}, if you are asked to Find the prime factors of the number 123456., you will call...
A. similar_function(number=123456)
B. number_analysis.prime_factors(wrong_param=value)
C. number_analysis.prime_factors()
D. number_analysis.prime_factors(number=123456)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: math.gcd with description: Compute the greatest common divisor of two numbers and parameters: {'type': 'dict', 'properties': {'num1': {'type': 'integer', 'description': 'The first number.'}, 'num2': {'type': 'integer', 'description': 'The second number.'}}, 'required': ['num1', 'num2']}, if you are asked to Calculate the greatest common divisor of two numbers: 40 and 50, you will call...
A. similar_function(num1=40, num2=50)
B. math.gcd(wrong_param=value)
C. math.gcd(num1=40, num2=50)
D. math.gcd()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: math.hcf with description: Calculate the highest common factor of two numbers. and parameters: {'type': 'dict', 'properties': {'number1': {'type': 'integer', 'description': 'First number.'}, 'number2': {'type': 'integer', 'description': 'Second number.'}}, 'required': ['number1', 'number2']}, if you are asked to Find the highest common factor of 36 and 24., you will call...
A. similar_function(number1=36, number2=24)
B. math.hcf(wrong_param=value)
C. math.hcf()
D. math.hcf(number1=36, number2=24)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: number_theory.gcd with description: Compute the greatest common divisor of two given integers. and parameters: {'type': 'dict', 'properties': {'number1': {'type': 'integer', 'description': 'The first integer.'}, 'number2': {'type': 'integer', 'description': 'The second integer.'}}, 'required': ['number1', 'number2']}, if you are asked to Find the Greatest Common Divisor (GCD) of two numbers, say 36 and 48., you will call...
A. similar_function(number1=36, number2=48)
B. number_theory.gcd(number1=36, number2=48)
C. number_theory.gcd(wrong_param=value)
D. number_theory.gcd()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: math.gcd with description: Calculate the greatest common divisor (gcd) of the two integers. and parameters: {'type': 'dict', 'properties': {'num1': {'type': 'integer', 'description': 'The first number.'}, 'num2': {'type': 'integer', 'description': 'The second number.'}}, 'required': ['num1', 'num2']}, if you are asked to Calculate the greatest common divisor of two given numbers, for example 12 and 15., you will call...
A. similar_function(num1=12, num2=15)
B. math.gcd(wrong_param=value)
C. math.gcd(num1=12, num2=15)
D. math.gcd()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: prime_factorize with description: Calculate the prime factorization of a given integer. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'The number for which to calculate the prime factorization.'}, 'return_type': {'type': 'string', 'description': "Determines the format of the returned prime factorization. Can be 'list' for a list of all prime factors or 'dictionary' for a count of each prime factor. Default is 'list'."}}, 'required': ['number']}, if you are asked to What is the prime factorization of the number 60? Return them in the form of dictionary, you will call...
A. prime_factorize(number=60, return_type=dictionary)
B. similar_function(number=60, return_type=dictionary)
C. prime_factorize(wrong_param=value)
D. prime_factorize()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: math.gcd with description: Calculate the greatest common divisor of two integers. and parameters: {'type': 'dict', 'properties': {'num1': {'type': 'integer', 'description': 'First number.'}, 'num2': {'type': 'integer', 'description': 'Second number.'}}, 'required': ['num1', 'num2']}, if you are asked to Find the greatest common divisor (GCD) of 12 and 18, you will call...
A. similar_function(num1=12, num2=18)
B. math.gcd(wrong_param=value)
C. math.gcd()
D. math.gcd(num1=12, num2=18)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_final_velocity with description: Calculate the final velocity of a free falling object given the height it's dropped from, the initial velocity and acceleration due to gravity. Ignore air resistance. and parameters: {'type': 'dict', 'properties': {'height': {'type': 'integer', 'description': 'The height the object is dropped from, in meters.'}, 'initial_velocity': {'type': 'integer', 'description': 'The initial velocity of the object in m/s. Default is zero.'}, 'gravity': {'type': 'float', 'description': "Acceleration due to gravity. Default value is 9.81 m/s^2, earth's gravity."}}, 'required': ['height']}, if you are asked to Calculate the final velocity of an object falling from a 150 meter building, assuming initial velocity is zero., you will call...
A. similar_function(height=150, initial_velocity=0, gravity=9.81)
B. calculate_final_velocity(wrong_param=value)
C. calculate_final_velocity(height=150, initial_velocity=0, gravity=9.81)
D. calculate_final_velocity()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_velocity with description: Calculate the velocity for a certain distance travelled within a specific duration. and parameters: {'type': 'dict', 'properties': {'distance': {'type': 'integer', 'description': 'The distance travelled by the object, typically in kilometers.'}, 'duration': {'type': 'integer', 'description': 'The duration of the journey, typically in hours.'}, 'unit': {'type': 'string', 'description': 'Optional parameter. The unit to return the velocity in. If not provided, the default is km/h.'}}, 'required': ['distance', 'duration']}, if you are asked to Calculate the velocity of a car that travels a distance of 50 kilometers for a duration of 2 hours?, you will call...
A. similar_function(distance=50, duration=2, unit=)
B. calculate_velocity(wrong_param=value)
C. calculate_velocity(distance=50, duration=2, unit=)
D. calculate_velocity()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: final_velocity with description: Calculate the final velocity of an object given its initial velocity, acceleration, and time. and parameters: {'type': 'dict', 'properties': {'initial_velocity': {'type': 'integer', 'description': 'The initial velocity of the object in meters/second.'}, 'acceleration': {'type': 'integer', 'description': 'The acceleration of the object in meters/second^2.'}, 'time': {'type': 'integer', 'description': 'The time over which the acceleration is applied in seconds.'}}, 'required': ['initial_velocity', 'acceleration', 'time']}, if you are asked to Calculate the final velocity of a vehicle after accelerating at 2 meters/second^2 for a duration of 5 seconds, starting from a speed of 10 meters/second., you will call...
A. final_velocity(initial_velocity=10, acceleration=2, time=5)
B. similar_function(initial_velocity=10, acceleration=2, time=5)
C. final_velocity(wrong_param=value)
D. final_velocity()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_displacement with description: Calculates the displacement of an object in motion given initial velocity, time, and acceleration. and parameters: {'type': 'dict', 'properties': {'initial_velocity': {'type': 'integer', 'description': 'The initial velocity of the object in m/s.'}, 'time': {'type': 'integer', 'description': 'The time in seconds that the object has been in motion.'}, 'acceleration': {'type': 'float', 'description': 'The acceleration of the object in m/s^2.', 'default': 0}}, 'required': ['initial_velocity', 'time']}, if you are asked to Calculate the displacement of a car given the initial velocity of 10 and acceleeration of 9.8 within 5 seconds., you will call...
A. similar_function(initial_velocity=10, time=5, acceleration=9.8)
B. calculate_displacement(wrong_param=value)
C. calculate_displacement(initial_velocity=10, time=5, acceleration=9.8)
D. calculate_displacement()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_final_speed with description: Calculate the final speed of an object in free fall after a certain time, neglecting air resistance. The acceleration due to gravity is considered as -9.81 m/s^2 and parameters: {'type': 'dict', 'properties': {'initial_speed': {'type': 'integer', 'description': 'The initial speed of the object in m/s. Default is 0 for an object at rest.'}, 'time': {'type': 'integer', 'description': 'The time in seconds for which the object is in free fall.'}, 'gravity': {'type': 'float', 'description': 'The acceleration due to gravity. Default is -9.81 m/s^2.'}}, 'required': ['time']}, if you are asked to What is the final speed of an object dropped from rest after falling for 5 seconds if we neglect air resistance?, you will call...
A. similar_function(initial_speed=0, time=5, gravity=-9.81)
B. calculate_final_speed(wrong_param=value)
C. calculate_final_speed(initial_speed=0, time=5, gravity=-9.81)
D. calculate_final_speed()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: kinematics.final_velocity_from_distance with description: Calculate the final velocity of an object given the acceleration and distance travelled, assuming initial velocity is 0. and parameters: {'type': 'dict', 'properties': {'acceleration': {'type': 'integer', 'description': 'Acceleration of the object, m/s^2.'}, 'distance': {'type': 'integer', 'description': 'Distance traveled by the object, m.'}, 'initial_velocity': {'type': 'float', 'description': 'Initial velocity of the object. Default is 0, m/s'}}, 'required': ['acceleration', 'distance']}, if you are asked to What is the final velocity of a vehicle that started from rest and accelerated at 4 m/s^2 for a distance of 300 meters?, you will call...
A. kinematics.final_velocity_from_distance(acceleration=4, distance=300, initial_velocity=)
B. similar_function(acceleration=4, distance=300, initial_velocity=)
C. kinematics.final_velocity_from_distance(wrong_param=value)
D. kinematics.final_velocity_from_distance()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_final_velocity with description: Calculate the final velocity of an object under constant acceleration, knowing its initial velocity, acceleration, and time of acceleration. and parameters: {'type': 'dict', 'properties': {'initial_velocity': {'type': 'integer', 'description': 'The initial velocity of the object.'}, 'acceleration': {'type': 'float', 'description': 'The acceleration of the object.'}, 'time': {'type': 'integer', 'description': 'The time of acceleration.'}}, 'required': ['initial_velocity', 'acceleration', 'time']}, if you are asked to Calculate the final velocity of an object, knowing that it started from rest, accelerated at a rate of 9.8 m/s^2 for a duration of 5 seconds., you will call...
A. similar_function(initial_velocity=0, acceleration=9.8, time=5)
B. calculate_final_velocity(initial_velocity=0, acceleration=9.8, time=5)
C. calculate_final_velocity(wrong_param=value)
D. calculate_final_velocity()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_final_speed with description: Calculate the final speed of an object dropped from a certain height without air resistance. and parameters: {'type': 'dict', 'properties': {'initial_velocity': {'type': 'integer', 'description': 'The initial velocity of the object.'}, 'height': {'type': 'integer', 'description': 'The height from which the object is dropped.'}, 'gravity': {'type': 'float', 'description': 'The gravitational acceleration. Default is 9.8 m/s^2.'}}, 'required': ['initial_velocity', 'height']}, if you are asked to Calculate the final speed of an object dropped from 100 m without air resistance., you will call...
A. similar_function(initial_velocity=0, height=100, gravity=9.8)
B. calculate_final_speed(wrong_param=value)
C. calculate_final_speed()
D. calculate_final_speed(initial_velocity=0, height=100, gravity=9.8)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_directions with description: Retrieve directions from one location to another. and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'The starting point of the journey.'}, 'end_location': {'type': 'string', 'description': 'The destination point of the journey.'}, 'route_type': {'type': 'string', 'description': "Type of route to use (e.g., 'fastest', 'scenic'). Default is 'fastest'.", 'enum': ['fastest', 'scenic']}}, 'required': ['start_location', 'end_location']}, if you are asked to Get directions from Sydney to Melbourne using the fastest route., you will call...
A. similar_function(start_location=Sydney, end_location=Melbourne, route_type=fastest)
B. get_directions(start_location=Sydney, end_location=Melbourne, route_type=fastest)
C. get_directions(wrong_param=value)
D. get_directions()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: travel_itinerary_generator with description: Generate a travel itinerary based on specific destination, duration and daily budget, with preferred exploration type. and parameters: {'type': 'dict', 'properties': {'destination': {'type': 'string', 'description': 'Destination city of the trip.'}, 'days': {'type': 'integer', 'description': 'Number of days for the trip.'}, 'daily_budget': {'type': 'integer', 'description': 'The maximum daily budget for the trip.'}, 'exploration_type': {'type': 'string', 'enum': ['nature', 'urban', 'history', 'culture'], 'description': 'The preferred exploration type.', 'default': 'urban'}}, 'required': ['destination', 'days', 'daily_budget']}, if you are asked to Create an itinerary for a 7 days trip to Tokyo with daily budgets not exceeding $100 and prefer exploring nature., you will call...
A. similar_function(destination=Tokyo, days=7, daily_budget=100, exploration_type=nature)
B. travel_itinerary_generator(wrong_param=value)
C. travel_itinerary_generator(destination=Tokyo, days=7, daily_budget=100, exploration_type=nature)
D. travel_itinerary_generator()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: vegan_restaurant.find_nearby with description: Locate nearby vegan restaurants based on specific criteria like operating hours. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. New York, NY, you should format it as City, State.'}, 'operating_hours': {'type': 'integer', 'description': 'Preferred latest closing time of the restaurant. E.g. if 11 is given, then restaurants that close at or after 11 PM will be considered. This is in 24 hour format. Default is 24.'}}, 'required': ['location']}, if you are asked to Find an all vegan restaurant in New York that opens until at least 11 PM., you will call...
A. similar_function(location=New York, NY, operating_hours=23)
B. vegan_restaurant.find_nearby(wrong_param=value)
C. vegan_restaurant.find_nearby()
D. vegan_restaurant.find_nearby(location=New York, NY, operating_hours=23)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_shortest_driving_distance with description: Calculate the shortest driving distance between two locations. and parameters: {'type': 'dict', 'properties': {'origin': {'type': 'string', 'description': 'Starting point of the journey. You should format it as city name like Boston.'}, 'destination': {'type': 'string', 'description': 'End point of the journey. You should format it as city name like Boston.'}, 'unit': {'type': 'string', 'description': "Preferred unit of distance (optional, default is 'km')."}}, 'required': ['origin', 'destination']}, if you are asked to Find the shortest driving distance between New York City and Washington D.C., you will call...
A. get_shortest_driving_distance(origin=New York City, destination=Washington D.C., unit=km)
B. similar_function(origin=New York City, destination=Washington D.C., unit=km)
C. get_shortest_driving_distance(wrong_param=value)
D. get_shortest_driving_distance()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: route.estimate_time with description: Estimate the travel time for a specific route with optional stops. and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'The starting point for the journey. It should be format as city name such as Boston.'}, 'end_location': {'type': 'string', 'description': 'The destination for the journey. It should be format as city name such as Boston.'}, 'stops': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Additional cities or points of interest to stop at during the journey. Default is an empty list.'}}, 'required': ['start_location', 'end_location']}, if you are asked to Find the estimated travel time by car from San Francisco to Los Angeles with stops at Santa Barbara and Monterey., you will call...
A. similar_function(start_location=San Francisco, end_location=Los Angeles, stops=['Santa Barbara', 'Monterey'])
B. route.estimate_time(start_location=San Francisco, end_location=Los Angeles, stops=['Santa Barbara', 'Monterey'])
C. route.estimate_time(wrong_param=value)
D. route.estimate_time()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_electrostatic_potential with description: Calculate the electrostatic potential between two charged bodies using the principle of Coulomb's Law. and parameters: {'type': 'dict', 'properties': {'charge1': {'type': 'float', 'description': 'The quantity of charge on the first body.'}, 'charge2': {'type': 'float', 'description': 'The quantity of charge on the second body.'}, 'distance': {'type': 'float', 'description': 'The distance between the two bodies.'}, 'constant': {'type': 'float', 'description': 'The value of the electrostatic constant. Default is 8.99e9.'}}, 'required': ['charge1', 'charge2', 'distance']}, if you are asked to What is the electrostatic potential between two charged bodies of 1e-9 and 2e-9 of distance 0.05?, you will call...
A. similar_function(charge1=1e-09, charge2=2e-09, distance=0.05, constant=)
B. calculate_electrostatic_potential(wrong_param=value)
C. calculate_electrostatic_potential()
D. calculate_electrostatic_potential(charge1=1e-09, charge2=2e-09, distance=0.05, constant=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_electric_field with description: Calculate the electric field produced by a charge at a certain distance. and parameters: {'type': 'dict', 'properties': {'charge': {'type': 'integer', 'description': 'Charge in coulombs producing the electric field.'}, 'distance': {'type': 'integer', 'description': 'Distance from the charge in meters where the field is being measured.'}, 'permitivity': {'type': 'float', 'description': 'Permitivity of the space where field is being calculated, default is 8.854e-12.'}}, 'required': ['charge', 'distance']}, if you are asked to Calculate the electric field at a point 3 meters away from a charge of 2 coulombs., you will call...
A. similar_function(charge=2, distance=3, permitivity=)
B. calculate_electric_field(charge=2, distance=3, permitivity=)
C. calculate_electric_field(wrong_param=value)
D. calculate_electric_field()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_magnetic_field with description: Calculate the magnetic field produced at the center of a circular loop carrying current. and parameters: {'type': 'dict', 'properties': {'current': {'type': 'integer', 'description': 'The current through the circular loop in Amperes.'}, 'radius': {'type': 'integer', 'description': 'The radius of the circular loop in meters.'}, 'permeability': {'type': 'float', 'description': 'The magnetic permeability. Default is 12.57e10 (Vacuum Permeability).'}}, 'required': ['current', 'radius']}, if you are asked to Calculate the magnetic field produced at the center of a circular loop carrying current of 5 Ampere with a radius of 4 meters, you will call...
A. similar_function(current=5, radius=4, permeability=)
B. calculate_magnetic_field(wrong_param=value)
C. calculate_magnetic_field()
D. calculate_magnetic_field(current=5, radius=4, permeability=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: electromagnetic_force with description: Calculate the electromagnetic force between two charges placed at a certain distance. and parameters: {'type': 'dict', 'properties': {'charge1': {'type': 'integer', 'description': 'The magnitude of the first charge in coulombs.'}, 'charge2': {'type': 'integer', 'description': 'The magnitude of the second charge in coulombs.'}, 'distance': {'type': 'integer', 'description': 'The distance between the two charges in meters.'}, 'medium_permittivity': {'type': 'float', 'description': 'The relative permittivity of the medium in which the charges are present. Default is 8.854e-12 (Vacuum Permittivity).'}}, 'required': ['charge1', 'charge2', 'distance']}, if you are asked to Calculate the electromagnetic force between two charges of 5C and 7C placed 3 meters apart., you will call...
A. electromagnetic_force(charge1=5, charge2=7, distance=3, medium_permittivity=)
B. similar_function(charge1=5, charge2=7, distance=3, medium_permittivity=)
C. electromagnetic_force(wrong_param=value)
D. electromagnetic_force()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_resonant_frequency with description: Calculate the resonant frequency of an LC (inductor-capacitor) circuit. and parameters: {'type': 'dict', 'properties': {'inductance': {'type': 'float', 'description': 'The inductance (L) in henries (H).'}, 'capacitance': {'type': 'float', 'description': 'The capacitance (C) in farads (F).'}, 'round_off': {'type': 'integer', 'description': 'Rounding off the result to a certain decimal places, default is 2.'}}, 'required': ['inductance', 'capacitance']}, if you are asked to Calculate the resonant frequency of an LC circuit given capacitance of 100ÂµF and inductance of 50mH., you will call...
A. calculate_resonant_frequency(inductance=0.05, capacitance=0.0001, round_off=)
B. similar_function(inductance=0.05, capacitance=0.0001, round_off=)
C. calculate_resonant_frequency(wrong_param=value)
D. calculate_resonant_frequency()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_magnetic_field_strength with description: Calculate the magnetic field strength at a point a certain distance away from a long wire carrying a current. and parameters: {'type': 'dict', 'properties': {'current': {'type': 'integer', 'description': 'The current flowing through the wire in Amperes.'}, 'distance': {'type': 'integer', 'description': 'The perpendicular distance from the wire to the point where the magnetic field is being calculated.'}, 'permeability': {'type': 'float', 'description': 'The permeability of the medium. Default is 12.57e-7 (Vacuum Permeability).'}}, 'required': ['current', 'distance']}, if you are asked to Calculate the magnetic field strength 10 meters away from a long wire carrying a current of 20 Amperes., you will call...
A. similar_function(current=20, distance=10, permeability=)
B. calculate_magnetic_field_strength(wrong_param=value)
C. calculate_magnetic_field_strength()
D. calculate_magnetic_field_strength(current=20, distance=10, permeability=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_electric_field_strength with description: Calculate the electric field strength at a certain distance from a point charge. and parameters: {'type': 'dict', 'properties': {'charge': {'type': 'float', 'description': 'The charge in Coulombs.'}, 'distance': {'type': 'integer', 'description': 'The distance from the charge in meters.'}, 'medium': {'type': 'string', 'description': "The medium in which the charge and the point of calculation is located. Default is 'vacuum'."}}, 'required': ['charge', 'distance']}, if you are asked to Calculate the electric field strength 4 meters away from a charge of 0.01 Coulombs., you will call...
A. calculate_electric_field_strength(charge=0.01, distance=4, medium=)
B. similar_function(charge=0.01, distance=4, medium=)
C. calculate_electric_field_strength(wrong_param=value)
D. calculate_electric_field_strength()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: thermo.calculate_energy with description: Calculate the energy required or released during a phase change using mass, the phase transition temperature and the specific latent heat. and parameters: {'type': 'dict', 'properties': {'mass': {'type': 'integer', 'description': 'Mass of the substance in grams.'}, 'phase_transition': {'type': 'string', 'description': "Phase transition. Can be 'melting', 'freezing', 'vaporization', 'condensation'."}, 'substance': {'type': 'string', 'description': "The substance which is undergoing phase change, default is 'water'"}}, 'required': ['mass', 'phase_transition']}, if you are asked to Calculate the energy (in Joules) absorbed or released during the phase change of 100g of water from liquid to steam at its boiling point., you will call...
A. similar_function(mass=100, phase_transition=vaporization, substance=water)
B. thermo.calculate_energy(wrong_param=value)
C. thermo.calculate_energy()
D. thermo.calculate_energy(mass=100, phase_transition=vaporization, substance=water)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_final_temperature with description: Calculates the final equilibrium temperature after mixing two bodies with different masses and temperatures and parameters: {'type': 'dict', 'properties': {'mass1': {'type': 'integer', 'description': 'The mass of the first body (kg).'}, 'temperature1': {'type': 'integer', 'description': 'The initial temperature of the first body (Celsius).'}, 'mass2': {'type': 'integer', 'description': 'The mass of the second body (kg).'}, 'temperature2': {'type': 'integer', 'description': 'The initial temperature of the second body (Celsius).'}, 'specific_heat_capacity': {'type': 'float', 'description': 'The specific heat capacity of the bodies in kJ/kg/K. If not provided, will default to that of water at room temperature, which is 4.2 kJ/kg/K.'}}, 'required': ['mass1', 'temperature1', 'mass2', 'temperature2']}, if you are asked to Calculate the final temperature when 20 kg of water at 30 degree Celsius is mixed with 15 kg of water at 60 degree Celsius., you will call...
A. similar_function(mass1=20, temperature1=30, mass2=15, temperature2=60, specific_heat_capacity=)
B. calculate_final_temperature(wrong_param=value)
C. calculate_final_temperature()
D. calculate_final_temperature(mass1=20, temperature1=30, mass2=15, temperature2=60, specific_heat_capacity=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_boiling_melting_points with description: Retrieve the boiling point and melting point of a substance based on its name and the sea level. and parameters: {'type': 'dict', 'properties': {'substance': {'type': 'string', 'description': 'The name of the substance.'}, 'sea_level': {'type': 'integer', 'description': 'The sea level in meters.'}}, 'required': ['substance', 'sea_level']}, if you are asked to Find the boiling point and melting point of water under the sea level of 5000m., you will call...
A. similar_function(substance=water, sea_level=5000)
B. get_boiling_melting_points(wrong_param=value)
C. get_boiling_melting_points()
D. get_boiling_melting_points(substance=water, sea_level=5000)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_density with description: Calculate the density of a substance based on its mass and volume. and parameters: {'type': 'dict', 'properties': {'mass': {'type': 'integer', 'description': 'The mass of the substance in kilograms.'}, 'volume': {'type': 'integer', 'description': 'The volume of the substance in cubic meters.'}, 'unit': {'type': 'string', 'description': 'The unit of density. Default is kg/mÂ³'}}, 'required': ['mass', 'volume']}, if you are asked to What is the density of a substance with a mass of 45 kg and a volume of 15 mÂ³?, you will call...
A. similar_function(mass=45, volume=15, unit=)
B. calculate_density(mass=45, volume=15, unit=)
C. calculate_density(wrong_param=value)
D. calculate_density()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calc_absolute_pressure with description: Calculates the absolute pressure from gauge and atmospheric pressures. and parameters: {'type': 'dict', 'properties': {'atm_pressure': {'type': 'integer', 'description': 'The atmospheric pressure in atmospheres (atm). Default is 1 atm if not provided.'}, 'gauge_pressure': {'type': 'integer', 'description': 'The gauge pressure in atmospheres (atm). Must be provided.'}}, 'required': ['gauge_pressure']}, if you are asked to Calculate the absolute pressure in pascals given atmospheric pressure of 1 atm and a gauge pressure of 2 atm., you will call...
A. similar_function(atm_pressure=1, gauge_pressure=2)
B. calc_absolute_pressure(wrong_param=value)
C. calc_absolute_pressure(atm_pressure=1, gauge_pressure=2)
D. calc_absolute_pressure()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: entropy_change.calculate with description: Calculate the change in entropy for a mass of a specific substance under set initial and final conditions. and parameters: {'type': 'dict', 'properties': {'substance': {'type': 'string', 'description': 'The substance for which the change in entropy is calculated.'}, 'mass': {'type': 'integer', 'description': 'The mass of the substance in kg.'}, 'initial_temperature': {'type': 'integer', 'description': 'The initial temperature of the substance in degree Celsius.'}, 'final_temperature': {'type': 'integer', 'description': 'The final temperature of the substance in degree Celsius.'}, 'pressure': {'type': 'integer', 'default': 1, 'description': 'The pressure the substance is under in atmospheres.'}}, 'required': ['substance', 'mass', 'initial_temperature', 'final_temperature']}, if you are asked to What is the change in entropy in Joules per Kelvin of a 1kg ice block at 0Â°C if it is heated to 100Â°C under 1 atmosphere of pressure?, you will call...
A. entropy_change.calculate(substance=ice, mass=1, initial_temperature=0, final_temperature=100, pressure=)
B. similar_function(substance=ice, mass=1, initial_temperature=0, final_temperature=100, pressure=)
C. entropy_change.calculate(wrong_param=value)
D. entropy_change.calculate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_entropy_change with description: Calculate the entropy change for an isothermal and reversible process. and parameters: {'type': 'dict', 'properties': {'initial_temp': {'type': 'integer', 'description': 'The initial temperature in Kelvin.'}, 'final_temp': {'type': 'integer', 'description': 'The final temperature in Kelvin.'}, 'heat_capacity': {'type': 'integer', 'description': 'The heat capacity in J/K.'}, 'isothermal': {'type': 'boolean', 'description': 'Whether the process is isothermal. Default is True.'}}, 'required': ['initial_temp', 'final_temp', 'heat_capacity']}, if you are asked to Calculate the entropy change for a certain process given an initial temperature of 300K, a final temperature of 400K, and a heat capacity of 5J/K., you will call...
A. similar_function(initial_temp=300, final_temp=400, heat_capacity=5, isothermal=)
B. calculate_entropy_change(wrong_param=value)
C. calculate_entropy_change()
D. calculate_entropy_change(initial_temp=300, final_temp=400, heat_capacity=5, isothermal=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calc_heat_capacity with description: Calculate the heat capacity at constant pressure of air using its temperature and volume. and parameters: {'type': 'dict', 'properties': {'temp': {'type': 'integer', 'description': 'The temperature of the gas in Kelvin.'}, 'volume': {'type': 'integer', 'description': 'The volume of the gas in m^3.'}, 'gas': {'type': 'string', 'description': "Type of gas, with 'air' as default."}}, 'required': ['temp', 'volume']}, if you are asked to Calculate the heat capacity at constant pressure for air, given its temperature is 298K and volume is 10 m^3., you will call...
A. similar_function(temp=298, volume=10, gas=air)
B. calc_heat_capacity(wrong_param=value)
C. calc_heat_capacity(temp=298, volume=10, gas=air)
D. calc_heat_capacity()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: fetch_DNA_sequence with description: Retrieve the sequence of a DNA molecule with the given id from a public database. and parameters: {'type': 'dict', 'properties': {'DNA_id': {'type': 'string', 'description': 'Unique ID of the DNA molecule in the database.'}, 'format': {'type': 'string', 'description': "Optional parameter to get sequence in specific format (default to 'fasta')."}, 'upstream': {'type': 'integer', 'description': 'Optional parameter to include certain number of base pairs upstream the DNA sequence (default to 0).'}}, 'required': ['DNA_id']}, if you are asked to Retrieve the sequence of DNA molecule with id `DNA123`., you will call...
A. similar_function(DNA_id=DNA123, format=, upstream=)
B. fetch_DNA_sequence(wrong_param=value)
C. fetch_DNA_sequence(DNA_id=DNA123, format=, upstream=)
D. fetch_DNA_sequence()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_protein_sequence with description: Retrieve the protein sequence encoded by a human gene. and parameters: {'type': 'dict', 'properties': {'gene': {'type': 'string', 'description': 'The human gene of interest.'}, 'species': {'type': 'string', 'description': 'The species for which the gene is to be analyzed.', 'default': 'Homo sapiens'}}, 'required': ['gene']}, if you are asked to Identify the protein sequence of a given human gene 'BRCA1'., you will call...
A. similar_function(gene=BRCA1, species=Homo sapiens)
B. get_protein_sequence(wrong_param=value)
C. get_protein_sequence(gene=BRCA1, species=Homo sapiens)
D. get_protein_sequence()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: biology.get_cell_info with description: Retrieve information about the structure and functioning of a specified type of cell and parameters: {'type': 'dict', 'properties': {'cell_type': {'type': 'string', 'description': 'Type of cell you want information about'}, 'detailed': {'type': 'boolean', 'description': 'Indicate if you want a detailed description of the cell', 'default': 'false'}}, 'required': ['cell_type']}, if you are asked to Find me detailed information about the structure of human cell, you will call...
A. similar_function(cell_type=human, detailed=True)
B. biology.get_cell_info(cell_type=human, detailed=True)
C. biology.get_cell_info(wrong_param=value)
D. biology.get_cell_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: cellbio.get_proteins with description: Get the list of proteins in a specific cell compartment. and parameters: {'type': 'dict', 'properties': {'cell_compartment': {'type': 'string', 'description': 'The specific cell compartment.'}, 'include_description': {'type': 'boolean', 'description': 'Set true if you want a brief description of each protein.', 'default': 'false'}}, 'required': ['cell_compartment']}, if you are asked to What are the names of proteins found in the plasma membrane?, you will call...
A. cellbio.get_proteins(cell_compartment=plasma membrane, include_description=)
B. similar_function(cell_compartment=plasma membrane, include_description=)
C. cellbio.get_proteins(wrong_param=value)
D. cellbio.get_proteins()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_cell_density with description: Calculate the cell density of a biological sample based on its optical density and the experiment dilution. and parameters: {'type': 'dict', 'properties': {'optical_density': {'type': 'float', 'description': 'The optical density of the sample, usually obtained from a spectrophotometer reading.'}, 'dilution': {'type': 'integer', 'description': 'The dilution factor applied during the experiment.'}, 'calibration_factor': {'type': 'float', 'description': 'The calibration factor to adjust the density, default value is 1e9 assuming cell density is in CFU/mL.'}}, 'required': ['optical_density', 'dilution']}, if you are asked to Calculate the cell density in a sample with an optical density of 0.6, where the experiment dilution is 5 times., you will call...
A. similar_function(optical_density=0.6, dilution=5, calibration_factor=1000000000.0)
B. calculate_cell_density(optical_density=0.6, dilution=5, calibration_factor=1000000000.0)
C. calculate_cell_density(wrong_param=value)
D. calculate_cell_density()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: cell_biology.function_lookup with description: Look up the function of a given molecule in a specified organelle. and parameters: {'type': 'dict', 'properties': {'molecule': {'type': 'string', 'description': 'The molecule of interest.'}, 'organelle': {'type': 'string', 'description': 'The organelle of interest.'}, 'specific_function': {'type': 'boolean', 'description': 'If set to true, a specific function of the molecule within the organelle will be provided, if such information exists.'}}, 'required': ['molecule', 'organelle', 'specific_function']}, if you are asked to What is the function of ATP synthase in mitochondria?, you will call...
A. similar_function(molecule=ATP synthase, organelle=mitochondria, specific_function=True)
B. cell_biology.function_lookup(wrong_param=value)
C. cell_biology.function_lookup(molecule=ATP synthase, organelle=mitochondria, specific_function=True)
D. cell_biology.function_lookup()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_molecular_weight with description: Calculate the molecular weight of a compound given the compound formula. and parameters: {'type': 'dict', 'properties': {'compound': {'type': 'string', 'description': 'The molecular formula of the compound.'}, 'to_unit': {'type': 'string', 'description': 'The unit in which to return the result.'}}, 'required': ['compound', 'to_unit']}, if you are asked to Calculate the molecular weight of Glucose (C6H12O6) in grams/mole., you will call...
A. similar_function(compound=C6H12O6, to_unit=grams/mole)
B. calculate_molecular_weight(wrong_param=value)
C. calculate_molecular_weight()
D. calculate_molecular_weight(compound=C6H12O6, to_unit=grams/mole)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: mutation_type.find with description: Finds the type of a genetic mutation based on its SNP (Single Nucleotide Polymorphism) ID. and parameters: {'type': 'dict', 'properties': {'snp_id': {'type': 'string', 'description': 'The ID of the Single Nucleotide Polymorphism (SNP) mutation.'}, 'species': {'type': 'string', 'description': "Species in which the SNP occurs, default is 'Homo sapiens' (Humans)."}}, 'required': ['snp_id']}, if you are asked to Find the type of gene mutation based on SNP (Single Nucleotide Polymorphism) ID rs6034464., you will call...
A. mutation_type.find(snp_id=rs6034464, species=Homo sapiens)
B. similar_function(snp_id=rs6034464, species=Homo sapiens)
C. mutation_type.find(wrong_param=value)
D. mutation_type.find()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: diabetes_prediction with description: Predict the likelihood of diabetes type 2 based on a person's weight and height. and parameters: {'type': 'dict', 'properties': {'weight': {'type': 'integer', 'description': 'Weight of the person in lbs.'}, 'height': {'type': 'integer', 'description': 'Height of the person in inches.'}, 'activity_level': {'type': 'string', 'enum': ['sedentary', 'lightly active', 'moderately active', 'very active', 'extra active'], 'description': 'Physical activity level of the person.'}}, 'required': ['weight', 'height', 'activity_level']}, if you are asked to Predict whether a person with weight 150lbs and height 5ft 10in who is lightly active will get type 2 diabetes., you will call...
A. similar_function(weight=150, height=70, activity_level=lightly active)
B. diabetes_prediction(wrong_param=value)
C. diabetes_prediction(weight=150, height=70, activity_level=lightly active)
D. diabetes_prediction()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: analyze_dna_sequence with description: Analyzes the DNA sequence based on a reference sequence and return any potential mutations. and parameters: {'type': 'dict', 'properties': {'sequence': {'type': 'string', 'description': 'The DNA sequence to be analyzed.'}, 'reference_sequence': {'type': 'string', 'description': 'The reference DNA sequence.'}, 'mutation_type': {'type': 'string', 'enum': ['insertion', 'deletion', 'substitution'], 'description': "Type of the mutation to be looked for in the sequence. Default to 'substitution'."}}, 'required': ['sequence', 'reference_sequence']}, if you are asked to Analyze the DNA sequence 'AGTCGATCGAACGTACGTACG' for any potential substitution mutations based on a reference sequence 'AGTCCATCGAACGTACGTACG'., you will call...
A. analyze_dna_sequence(sequence=AGTCGATCGAACGTACGTACG, reference_sequence=AGTCCATCGAACGTACGTACG, mutation_type=substitution)
B. similar_function(sequence=AGTCGATCGAACGTACGTACG, reference_sequence=AGTCCATCGAACGTACGTACG, mutation_type=substitution)
C. analyze_dna_sequence(wrong_param=value)
D. analyze_dna_sequence()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: genetics.calculate_similarity with description: Calculates the genetic similarity between two species based on their DNA sequences. and parameters: {'type': 'dict', 'properties': {'species1': {'type': 'string', 'description': 'The first species to compare.'}, 'species2': {'type': 'string', 'description': 'The second species to compare.'}, 'format': {'type': 'string', 'description': 'The format of the result (percentage or fraction). Default is percentage.'}}, 'required': ['species1', 'species2']}, if you are asked to Find out how genetically similar a human and a chimp are in percentage., you will call...
A. similar_function(species1=Human, species2=Chimp, format=percentage)
B. genetics.calculate_similarity(wrong_param=value)
C. genetics.calculate_similarity()
D. genetics.calculate_similarity(species1=Human, species2=Chimp, format=percentage)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_genotype_frequency with description: Calculate the frequency of homozygous dominant genotype based on the allele frequency using Hardy Weinberg Principle. and parameters: {'type': 'dict', 'properties': {'allele_frequency': {'type': 'float', 'description': 'The frequency of the dominant allele in the population.'}, 'genotype': {'type': 'string', 'description': 'The genotype which frequency is needed.', 'enum': ['AA', 'Aa', 'aa']}}, 'required': ['allele_frequency', 'genotype']}, if you are asked to What is the genotype frequency of AA genotype in a population, given that allele frequency of A is 0.3?, you will call...
A. similar_function(allele_frequency=0.3, genotype=AA)
B. calculate_genotype_frequency(allele_frequency=0.3, genotype=AA)
C. calculate_genotype_frequency(wrong_param=value)
D. calculate_genotype_frequency()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_density with description: Calculate the population density of a specific country in a specific year. and parameters: {'type': 'dict', 'properties': {'country': {'type': 'string', 'description': 'The country for which the density needs to be calculated.'}, 'year': {'type': 'string', 'description': 'The year in which the density is to be calculated.'}, 'population': {'type': 'integer', 'description': 'The population of the country.'}, 'land_area': {'type': 'integer', 'description': 'The land area of the country in square kilometers.'}}, 'required': ['country', 'year', 'population', 'land_area']}, if you are asked to Calculate the Population Density for Brazil in 2022 if the population is 213 million and the land area is 8.5 million square kilometers., you will call...
A. calculate_density(country=Brazil, year=2022, population=213000000, land_area=8500000)
B. similar_function(country=Brazil, year=2022, population=213000000, land_area=8500000)
C. calculate_density(wrong_param=value)
D. calculate_density()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: ecology_data.precipitation_stats with description: Retrieve precipitation data for a specified location and time period. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': "The name of the location, e.g., 'Amazon rainforest'."}, 'time_frame': {'type': 'string', 'enum': ['six_months', 'year', 'five_years'], 'description': 'The time period for which data is required.'}}, 'required': ['location', 'time_frame']}, if you are asked to Get me data on average precipitation in the Amazon rainforest for the last six months., you will call...
A. similar_function(location=Amazon rainforest, time_frame=six_months)
B. ecology_data.precipitation_stats(location=Amazon rainforest, time_frame=six_months)
C. ecology_data.precipitation_stats(wrong_param=value)
D. ecology_data.precipitation_stats()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: identify_bird with description: Identify a bird species based on certain characteristics. and parameters: {'type': 'dict', 'properties': {'color': {'type': 'string', 'description': 'Color of the bird.'}, 'habitat': {'type': 'string', 'description': 'Habitat of the bird.'}, 'size': {'type': 'string', 'enum': ['small', 'medium', 'large'], 'description': "Size of the bird. Default is 'small'"}}, 'required': ['color', 'habitat']}, if you are asked to Identify a small green bird in forest., you will call...
A. similar_function(color=green, habitat=forest, size=small)
B. identify_bird(wrong_param=value)
C. identify_bird(color=green, habitat=forest, size=small)
D. identify_bird()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: forest_growth_forecast with description: Predicts the forest growth over the next N years based on current trends. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The location where you want to predict forest growth.'}, 'years': {'type': 'integer', 'description': 'The number of years for the forecast.'}, 'include_human_impact': {'type': 'boolean', 'description': 'Whether or not to include the impact of human activities in the forecast. If not provided, defaults to false.'}}, 'required': ['location', 'years']}, if you are asked to Predict the growth of forest in Yellowstone National Park for the next 5 years including human impact., you will call...
A. similar_function(location=Yellowstone National Park, years=5, include_human_impact=True)
B. forest_growth_forecast(wrong_param=value)
C. forest_growth_forecast()
D. forest_growth_forecast(location=Yellowstone National Park, years=5, include_human_impact=True)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: ecology.get_turtle_population with description: Get the population and species of turtles in a specific location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The name of the location.'}, 'year': {'type': 'integer', 'description': 'The year of the data requested. Default is 2001.'}, 'species': {'type': 'boolean', 'description': 'Whether to include species information. Default is false.'}}, 'required': ['location']}, if you are asked to Find out the population and species of turtles in Mississippi river in 2020., you will call...
A. similar_function(location=Mississippi river, year=2020, species=True)
B. ecology.get_turtle_population(wrong_param=value)
C. ecology.get_turtle_population(location=Mississippi river, year=2020, species=True)
D. ecology.get_turtle_population()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_vehicle_emission with description: Calculate the annual carbon emissions produced by a specific type of vehicle based on mileage. and parameters: {'type': 'dict', 'properties': {'vehicle_type': {'type': 'string', 'description': "The type of vehicle. 'gas' refers to a gasoline vehicle, 'diesel' refers to a diesel vehicle, and 'EV' refers to an electric vehicle."}, 'miles_driven': {'type': 'integer', 'description': 'The number of miles driven per year.'}, 'emission_factor': {'type': 'float', 'description': 'Optional emission factor to calculate emissions, in g/mile. Default factor is 355.48.'}}, 'required': ['vehicle_type', 'miles_driven']}, if you are asked to What is the carbon footprint of a gas-powered vehicle driving 1500 miles in a year?, you will call...
A. similar_function(vehicle_type=gas, miles_driven=1500, emission_factor=)
B. calculate_vehicle_emission(wrong_param=value)
C. calculate_vehicle_emission(vehicle_type=gas, miles_driven=1500, emission_factor=)
D. calculate_vehicle_emission()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: generate_DNA_sequence with description: Generate a random DNA sequence with a specific length and nucleotide preference. and parameters: {'type': 'dict', 'properties': {'length': {'type': 'integer', 'description': 'The length of the DNA sequence to be generated.'}, 'preferences': {'type': 'array', 'items': {'type': 'string', 'enum': ['A', 'T', 'C', 'G']}, 'description': 'Preferred nucleotides to include more frequently in the DNA sequence.'}}, 'required': ['length', 'preferences']}, if you are asked to Generate a DNA sequence with 100 bases including more G (Guanine) and C (Cytosine)., you will call...
A. similar_function(length=100, preferences=['G', 'C'])
B. generate_DNA_sequence(length=100, preferences=['G', 'C'])
C. generate_DNA_sequence(wrong_param=value)
D. generate_DNA_sequence()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_fitness with description: Calculate the expected evolutionary fitness of a creature based on the individual values and contributions of its traits. and parameters: {'type': 'dict', 'properties': {'trait_values': {'type': 'array', 'items': {'type': 'float'}, 'description': 'List of trait values, which are decimal numbers between 0 and 1, where 1 represents the trait maximally contributing to fitness.'}, 'trait_contributions': {'type': 'array', 'items': {'type': 'float'}, 'description': 'List of the percentage contributions of each trait to the overall fitness, which must sum to 1.'}}, 'required': ['trait_values', 'trait_contributions']}, if you are asked to Calculate the expected evolutionary fitness of a creature, with trait A contributing to 40% of the fitness and trait B contributing 60%, if trait A has a value of 0.8 and trait B a value of 0.7., you will call...
A. similar_function(trait_values=[0.8, 0.7], trait_contributions=[0.4, 0.6])
B. calculate_fitness(trait_values=[0.8, 0.7], trait_contributions=[0.4, 0.6])
C. calculate_fitness(wrong_param=value)
D. calculate_fitness()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: population_projections with description: Calculates the projected population growth based on the current growth rate. and parameters: {'type': 'dict', 'properties': {'country': {'type': 'string', 'description': 'The country for which to calculate the population projection.'}, 'years': {'type': 'integer', 'description': 'Number of years for the projection.'}, 'growth_rate': {'type': 'float', 'description': 'Optional parameter to specify the growth rate, in percentage. Default is 1.2.'}}, 'required': ['country', 'years']}, if you are asked to What's the projected population growth in United States in the next 20 years?, you will call...
A. population_projections(country=United States, years=20, growth_rate=)
B. similar_function(country=United States, years=20, growth_rate=)
C. population_projections(wrong_param=value)
D. population_projections()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_bacteria_evolution_rate with description: Calculate the evolution rate of bacteria given the starting number, duplication frequency and total duration. and parameters: {'type': 'dict', 'properties': {'start_population': {'type': 'integer', 'description': 'The starting population of bacteria.'}, 'duplication_frequency': {'type': 'integer', 'description': 'The frequency of bacteria duplication per hour.'}, 'duration': {'type': 'integer', 'description': 'Total duration in hours.'}, 'generation_time': {'type': 'integer', 'description': 'The average generation time of the bacteria in minutes. Default is 20 minutes'}}, 'required': ['start_population', 'duplication_frequency', 'duration']}, if you are asked to Calculate the evolution rate of a bacteria population, start with 5000 bacteria, each bacteria duplicates every hour for 6 hours., you will call...
A. similar_function(start_population=5000, duplication_frequency=1, duration=6, generation_time=20)
B. calculate_bacteria_evolution_rate(wrong_param=value)
C. calculate_bacteria_evolution_rate(start_population=5000, duplication_frequency=1, duration=6, generation_time=20)
D. calculate_bacteria_evolution_rate()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: elephant_population_estimate with description: Estimate future population of elephants given current population and growth rate. and parameters: {'type': 'dict', 'properties': {'current_population': {'type': 'integer', 'description': 'The current number of elephants.'}, 'growth_rate': {'type': 'float', 'description': 'The annual population growth rate of elephants.'}, 'years': {'type': 'integer', 'description': 'The number of years to project the population.'}}, 'required': ['current_population', 'growth_rate', 'years']}, if you are asked to Estimate the population size of elephants of 35000 in the next 5 years given the current growth rate of 0.015., you will call...
A. similar_function(current_population=35000, growth_rate=0.015, years=5)
B. elephant_population_estimate(wrong_param=value)
C. elephant_population_estimate(current_population=35000, growth_rate=0.015, years=5)
D. elephant_population_estimate()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: prediction.evolution with description: Predict the evolutionary rate for a specific species for a given timeframe. and parameters: {'type': 'dict', 'properties': {'species': {'type': 'string', 'description': 'The species that the evolution rate will be predicted for.'}, 'years': {'type': 'integer', 'description': 'Number of years for the prediction.'}, 'model': {'type': 'string', 'description': "The model used to make the prediction, options: 'Darwin', 'Lamarck', default is 'Darwin'."}}, 'required': ['species', 'years']}, if you are asked to Get me the predictions of the evolutionary rate for Homo Sapiens for next 50 years using Darwin model, you will call...
A. similar_function(species=Homo Sapiens, years=50, model=Darwin)
B. prediction.evolution(wrong_param=value)
C. prediction.evolution(species=Homo Sapiens, years=50, model=Darwin)
D. prediction.evolution()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: restaurant.find_nearby with description: Locate nearby restaurants based on specific dietary preferences. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. Los Angeles, CA'}, 'dietary_preference': {'type': 'array', 'items': {'type': 'string', 'enum': ['Vegan', 'Vegetarian', 'Gluten-free', 'Dairy-free', 'Nut-free']}, 'description': 'Dietary preference. Default is empty list.'}}, 'required': ['location']}, if you are asked to Find a nearby restaurant that serves vegan food in Los Angeles., you will call...
A. similar_function(location=Los Angeles, CA, dietary_preference=['Vegan'])
B. restaurant.find_nearby(wrong_param=value)
C. restaurant.find_nearby()
D. restaurant.find_nearby(location=Los Angeles, CA, dietary_preference=['Vegan'])

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: average_temperature with description: Retrieves the average temperature for a specific location over the defined timeframe. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city to get the average temperature for. It should format as city name such as Boston.'}, 'days': {'type': 'integer', 'description': 'The number of days to get the average temperature for.'}, 'temp_unit': {'type': 'string', 'description': "The temperature unit ('Celsius' or 'Fahrenheit'). Default is 'Fahrenheit'."}}, 'required': ['location', 'days']}, if you are asked to Get the average temperature in Austin for the next 3 days in Celsius., you will call...
A. similar_function(location=Austin, days=3, temp_unit=Celsius)
B. average_temperature(wrong_param=value)
C. average_temperature(location=Austin, days=3, temp_unit=Celsius)
D. average_temperature()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: create_histogram with description: Create a histogram based on provided data. and parameters: {'type': 'dict', 'properties': {'data': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'The data for which histogram needs to be plotted.'}, 'bins': {'type': 'integer', 'description': 'The number of equal-width bins in the range. Default is 10.'}}, 'required': ['data', 'bins']}, if you are asked to Create a histogram for student scores with the following data: 85, 90, 88, 92, 86, 89, 91 and set bin range to 5., you will call...
A. similar_function(data=[85, 90, 88, 92, 86, 89, 91], bins=5)
B. create_histogram(wrong_param=value)
C. create_histogram(data=[85, 90, 88, 92, 86, 89, 91], bins=5)
D. create_histogram()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: find_restaurants with description: Locate nearby restaurants based on location and food preferences. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The specific location or area. The location should be in the format of District, City.'}, 'food_type': {'type': 'string', 'description': 'The type of food preferred.'}, 'number': {'type': 'integer', 'description': 'Number of results to return.'}, 'dietary_requirements': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Special dietary requirements, e.g. vegan, gluten-free. Default is empty list.'}}, 'required': ['location', 'food_type', 'number']}, if you are asked to I want to find 5 restaurants nearby my location, Manhattan, offering Thai food and a vegan menu., you will call...
A. similar_function(location=Manhattan, New York City, food_type=Thai, number=5, dietary_requirements=['vegan'])
B. find_restaurants(wrong_param=value)
C. find_restaurants(location=Manhattan, New York City, food_type=Thai, number=5, dietary_requirements=['vegan'])
D. find_restaurants()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: map_routing.fastest_route with description: Finds the fastest route from one location to another, with an option to avoid toll roads. and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'The starting location for the journey.'}, 'end_location': {'type': 'string', 'description': 'The destination for the journey.'}, 'avoid_tolls': {'type': 'boolean', 'description': 'Option to avoid toll roads during the journey. Default is false.'}}, 'required': ['start_location', 'end_location']}, if you are asked to Find the fastest route from San Francisco to Los Angeles with toll roads avoided., you will call...
A. similar_function(start_location=San Francisco, end_location=Los Angeles, avoid_tolls=True)
B. map_routing.fastest_route(wrong_param=value)
C. map_routing.fastest_route(start_location=San Francisco, end_location=Los Angeles, avoid_tolls=True)
D. map_routing.fastest_route()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_average with description: Calculates the average of a list of numbers. and parameters: {'type': 'dict', 'properties': {'numbers': {'type': 'array', 'items': {'type': 'float'}, 'description': 'The list of numbers to calculate the average of.'}}, 'required': ['numbers']}, if you are asked to Calculate the average of list of integers [12, 15, 18, 20, 21, 26, 30]., you will call...
A. calculate_average(numbers=[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0])
B. similar_function(numbers=[12.0, 15.0, 18.0, 20.0, 21.0, 26.0, 30.0])
C. calculate_average(wrong_param=value)
D. calculate_average()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_distance with description: Calculate the distance between two GPS coordinates. and parameters: {'type': 'dict', 'properties': {'coord1': {'type': 'tuple', 'description': 'The first coordinate as (latitude, longitude).', 'items': {'type': 'float'}}, 'coord2': {'type': 'tuple', 'description': 'The second coordinate as (latitude, longitude).', 'items': {'type': 'float'}}, 'unit': {'type': 'string', 'description': "The unit of distance. Options: 'miles', 'kilometers'."}}, 'required': ['coord1', 'coord2', 'unit']}, if you are asked to Calculate the distance between two GPS coordinates (33.4484 N, 112.0740 W) and (34.0522 N, 118.2437 W) in miles., you will call...
A. similar_function(coord1=[33.4484, -112.074], coord2=[34.0522, -118.2437], unit=miles)
B. calculate_distance(wrong_param=value)
C. calculate_distance()
D. calculate_distance(coord1=[33.4484, -112.074], coord2=[34.0522, -118.2437], unit=miles)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_bmi with description: Calculate the Body Mass Index (BMI) of a person. and parameters: {'type': 'dict', 'properties': {'weight': {'type': 'integer', 'description': 'Weight of the person in kilograms.'}, 'height': {'type': 'integer', 'description': 'Height of the person in centimeters.'}, 'unit': {'type': 'string', 'description': "Optional parameter to choose between 'imperial' and 'metric' systems. Default is 'metric'."}}, 'required': ['weight', 'height']}, if you are asked to Calculate the Body Mass Index (BMI) of a person with a weight of 85 kilograms and height of 180 cm., you will call...
A. similar_function(weight=85, height=180, unit=metric)
B. calculate_bmi(weight=85, height=180, unit=metric)
C. calculate_bmi(wrong_param=value)
D. calculate_bmi()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: geo_distance.calculate with description: Calculate the geographic distance between two given locations. and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'The starting location for the distance calculation. Specify the location in the format of City, State.'}, 'end_location': {'type': 'string', 'description': 'The destination location for the distance calculation. Specify the location in the format of City, State.'}, 'units': {'type': 'string', 'description': "Optional. The desired units for the resulting distance ('miles' or 'kilometers'). Defaults to 'miles'."}}, 'required': ['start_location', 'end_location']}, if you are asked to What's the approximate distance between Boston, MA, and Washington, D.C. in mile?, you will call...
A. similar_function(start_location=Boston, MA, end_location=Washington, D.C., units=miles)
B. geo_distance.calculate(start_location=Boston, MA, end_location=Washington, D.C., units=miles)
C. geo_distance.calculate(wrong_param=value)
D. geo_distance.calculate()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: city_distance.find_shortest with description: Calculates the shortest distance between two cities via available public transportation. and parameters: {'type': 'dict', 'properties': {'start_city': {'type': 'string', 'description': 'The city you are starting from. The parameter is in the format of city name.'}, 'end_city': {'type': 'string', 'description': 'The city you are heading to.The parameter is in the format of city name.'}, 'transportation': {'type': 'string', 'description': "Preferred mode of public transportation. Default is 'bus'."}, 'allow_transfer': {'type': 'boolean', 'description': 'Allows transfer between different transportation if true. Default is false.'}}, 'required': ['start_city', 'end_city']}, if you are asked to Find the shortest distance between two cities, New York and Los Angeles, through the train and you can transfer., you will call...
A. city_distance.find_shortest(start_city=New York, end_city=Los Angeles, transportation=train, allow_transfer=True)
B. similar_function(start_city=New York, end_city=Los Angeles, transportation=train, allow_transfer=True)
C. city_distance.find_shortest(wrong_param=value)
D. city_distance.find_shortest()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: array_sort with description: Sorts a given list in ascending or descending order. and parameters: {'type': 'dict', 'properties': {'list': {'type': 'array', 'items': {'type': 'float'}, 'description': 'The list of numbers to be sorted.'}, 'order': {'type': 'string', 'enum': ['ascending', 'descending'], 'description': 'Order of sorting.'}}, 'required': ['list', 'order']}, if you are asked to Sort the list [5, 3, 4, 1, 2] in ascending order., you will call...
A. array_sort(list=[5.0, 3.0, 4.0, 1.0, 2.0], order=ascending)
B. similar_function(list=[5.0, 3.0, 4.0, 1.0, 2.0], order=ascending)
C. array_sort(wrong_param=value)
D. array_sort()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_BMI with description: Calculate the Body Mass Index (BMI) given a person's weight and height. and parameters: {'type': 'dict', 'properties': {'weight_kg': {'type': 'integer', 'description': 'The weight of the person in kilograms.'}, 'height_m': {'type': 'float', 'description': 'The height of the person in meters.'}}, 'required': ['weight_kg', 'height_m']}, if you are asked to Calculate the BMI (Body Mass Index) of a person who weighs 70kg and is 1.75m tall., you will call...
A. similar_function(weight_kg=70, height_m=1.75)
B. calculate_BMI(wrong_param=value)
C. calculate_BMI()
D. calculate_BMI(weight_kg=70, height_m=1.75)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: db_fetch_records with description: Fetch records from a specified database table based on certain conditions. and parameters: {'type': 'dict', 'properties': {'database_name': {'type': 'string', 'description': 'The name of the database.'}, 'table_name': {'type': 'string', 'description': 'The name of the table from which records need to be fetched.'}, 'conditions': {'type': 'dict', 'properties': {'department': {'type': 'string', 'description': 'The name of the department of students.'}, 'school': {'type': 'string', 'description': 'The name of the school students are enrolled in.'}}, 'description': 'The conditions based on which records are to be fetched.'}, 'fetch_limit': {'type': 'integer', 'description': 'Limits the number of records to be fetched. Default is 0, which means no limit.'}}, 'required': ['database_name', 'table_name', 'conditions']}, if you are asked to Fetch all records for students studying Science in 'Bluebird High School' from the StudentDB., you will call...
A. db_fetch_records(database_name=StudentDB, table_name=students, conditions={'department': ['Science'], 'school': ['Bluebird High School', 'Bluebird HS']}, fetch_limit=)
B. similar_function(database_name=StudentDB, table_name=students, conditions={'department': ['Science'], 'school': ['Bluebird High School', 'Bluebird HS']}, fetch_limit=)
C. db_fetch_records(wrong_param=value)
D. db_fetch_records()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: employee.fetch_data with description: Fetches the detailed data for a specific employee in a given company. and parameters: {'type': 'dict', 'properties': {'company_name': {'type': 'string', 'description': 'The name of the company.'}, 'employee_id': {'type': 'integer', 'description': 'The unique ID of the employee.'}, 'data_field': {'type': 'array', 'items': {'type': 'string', 'enum': ['Personal Info', 'Job History', 'Payroll', 'Attendance']}, 'description': "Fields of data to be fetched for the employee (Optional). Default is ['Personal Info']"}}, 'required': ['company_name', 'employee_id']}, if you are asked to Retrieve Personal Info and Job History data of a specific employee whose ID is 345 in company 'ABC Ltd.', you will call...
A. similar_function(company_name=ABC Ltd., employee_id=345, data_field=['Personal Info', 'Job History'])
B. employee.fetch_data(wrong_param=value)
C. employee.fetch_data()
D. employee.fetch_data(company_name=ABC Ltd., employee_id=345, data_field=['Personal Info', 'Job History'])

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_restaurant with description: Retrieve highest rated restaurant given cuisine, location, and a condition. and parameters: {'type': 'dict', 'properties': {'cuisine': {'type': 'string', 'description': 'Cuisine of the restaurant.'}, 'location': {'type': 'string', 'description': 'City where restaurant is located.'}, 'condition': {'type': 'string', 'description': 'Condition to be met by the restaurant (e.g., operating days, amenities, etc.)'}}, 'required': ['cuisine', 'location', 'condition']}, if you are asked to Get the highest rated sushi restaurant in Boston, that opens on Sundays., you will call...
A. similar_function(cuisine=sushi, location=Boston, condition=open on Sundays)
B. get_restaurant(wrong_param=value)
C. get_restaurant()
D. get_restaurant(cuisine=sushi, location=Boston, condition=open on Sundays)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: imdb.find_movies_by_actor with description: Searches the database to find all movies by a specific actor within a certain year. and parameters: {'type': 'dict', 'properties': {'actor_name': {'type': 'string', 'description': 'The name of the actor.'}, 'year': {'type': 'integer', 'description': 'The specific year to search in.'}, 'category': {'type': 'string', 'description': "The category of the film (e.g. Drama, Comedy, etc). Default is 'all'"}}, 'required': ['actor_name', 'year']}, if you are asked to Find all movies starring Leonardo DiCaprio in the year 2010 from IMDB database., you will call...
A. similar_function(actor_name=Leonardo DiCaprio, year=2010, category=)
B. imdb.find_movies_by_actor(wrong_param=value)
C. imdb.find_movies_by_actor()
D. imdb.find_movies_by_actor(actor_name=Leonardo DiCaprio, year=2010, category=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_theater_movie_releases with description: Retrieve the list of movie releases in specific theaters for a specified period. in the format of city shorten name like SF. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The location of the theaters.'}, 'timeframe': {'type': 'integer', 'description': 'The number of days for which releases are required from current date.'}, 'format': {'type': 'string', 'description': "Format of movies - could be 'IMAX', '2D', '3D', '4DX' etc. Default is 'all'"}}, 'required': ['location', 'timeframe']}, if you are asked to Fetch me the list of IMAX movie releases in theaters near LA for the next week., you will call...
A. similar_function(location=LA, timeframe=7, format=IMAX)
B. get_theater_movie_releases(location=LA, timeframe=7, format=IMAX)
C. get_theater_movie_releases(wrong_param=value)
D. get_theater_movie_releases()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: update_user_info with description: Update user information in the database. and parameters: {'type': 'dict', 'properties': {'user_id': {'type': 'integer', 'description': 'The user ID of the customer.'}, 'update_info': {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': "The customer's updated name."}, 'email': {'type': 'string', 'description': "The customer's updated email."}}, 'description': 'The new information to update.'}, 'database': {'type': 'string', 'description': "The database where the user's information is stored.", 'default': 'CustomerInfo'}}, 'required': ['user_id', 'update_info']}, if you are asked to Update my customer information with user id 43523 'name':'John Doe', 'email':'johndoe@email.com' in the database., you will call...
A. similar_function(user_id=43523, update_info={'name': ['John Doe'], 'email': ['johndoe@email.com']}, database=CustomerInfo)
B. update_user_info(wrong_param=value)
C. update_user_info(user_id=43523, update_info={'name': ['John Doe'], 'email': ['johndoe@email.com']}, database=CustomerInfo)
D. update_user_info()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calc_area_triangle with description: Calculate the area of a triangle with the formula area = 0.5 * base * height. and parameters: {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The length of the base of the triangle in meters.'}, 'height': {'type': 'integer', 'description': 'The perpendicular height of the triangle from the base to the opposite vertex in meters.'}}, 'required': ['base', 'height']}, if you are asked to Calculate the area of a triangle with base 5m and height 3m., you will call...
A. similar_function(base=5, height=3)
B. calc_area_triangle(wrong_param=value)
C. calc_area_triangle()
D. calc_area_triangle(base=5, height=3)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: database.query with description: Query the database based on certain conditions. and parameters: {'type': 'dict', 'properties': {'table': {'type': 'string', 'description': 'Name of the table to query.'}, 'conditions': {'type': 'array', 'items': {'type': 'dict', 'properties': {'field': {'type': 'string', 'description': 'The field to apply the condition.'}, 'operation': {'type': 'string', 'description': 'The operation to be performed.'}, 'value': {'type': 'string', 'description': 'The value to be compared.'}}, 'required': ['field', 'operation', 'value']}, 'description': 'Conditions for the query.'}}, 'required': ['table', 'conditions']}, if you are asked to Find records in database in user table where age is greater than 25 and job is 'engineer'., you will call...
A. similar_function(table=user, conditions=[{'field': ['age'], 'operation': ['>'], 'value': ['25']}, {'field': ['job'], 'operation': ['='], 'value': ['engineer']}])
B. database.query(wrong_param=value)
C. database.query(table=user, conditions=[{'field': ['age'], 'operation': ['>'], 'value': ['25']}, {'field': ['job'], 'operation': ['='], 'value': ['engineer']}])
D. database.query()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: math.factorial with description: Calculate the factorial of a given number. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'The number to compute factorial.'}}, 'required': ['number']}, if you are asked to Calculate the factorial of the number 5, you will call...
A. similar_function(number=5)
B. math.factorial(number=5)
C. math.factorial(wrong_param=value)
D. math.factorial()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_clock_angle with description: Calculate the angle between the hour and minute hands of a clock at a given time. and parameters: {'type': 'dict', 'properties': {'hours': {'type': 'integer', 'description': 'The hour on the clock face.'}, 'minutes': {'type': 'integer', 'description': 'The minutes on the clock face.'}, 'round_to': {'type': 'integer', 'description': 'The number of decimal places to round the result to, default is 2.'}}, 'required': ['hours', 'minutes']}, if you are asked to What will be the angle between the hour and minute hands of a clock at 6:30 PM?, you will call...
A. calculate_clock_angle(hours=6, minutes=30, round_to=)
B. similar_function(hours=6, minutes=30, round_to=)
C. calculate_clock_angle(wrong_param=value)
D. calculate_clock_angle()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: plot_sine_wave with description: Plot a sine wave for a given frequency in a given range. and parameters: {'type': 'dict', 'properties': {'start_range': {'type': 'float', 'description': 'Start of the range in radians. Four decimal places.'}, 'end_range': {'type': 'float', 'description': 'End of the range in radians. Four decimal places.'}, 'frequency': {'type': 'integer', 'description': 'Frequency of the sine wave in Hz.'}, 'amplitude': {'type': 'integer', 'description': 'Amplitude of the sine wave. Default is 1.'}, 'phase_shift': {'type': 'integer', 'description': 'Phase shift of the sine wave in radians. Default is 0.'}}, 'required': ['start_range', 'end_range', 'frequency']}, if you are asked to Plot a sine wave from 0 to 2 pi with a frequency of 5 Hz., you will call...
A. plot_sine_wave(start_range=0.0, end_range=6.2832, frequency=5, amplitude=1, phase_shift=0)
B. similar_function(start_range=0.0, end_range=6.2832, frequency=5, amplitude=1, phase_shift=0)
C. plot_sine_wave(wrong_param=value)
D. plot_sine_wave()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: light_travel_time with description: Calculate the time taken for light to travel from a celestial body to another. and parameters: {'type': 'dict', 'properties': {'distance_in_light_years': {'type': 'integer', 'description': 'The distance between the two celestial bodies in light years.'}, 'speed_of_light': {'type': 'integer', 'description': 'The speed of light in vacuum, in m/s. Default value is 299792458 m/s.'}}, 'required': ['distance_in_light_years']}, if you are asked to How much time will it take for the light to reach earth from a star 4 light years away?, you will call...
A. similar_function(distance_in_light_years=4, speed_of_light=299792458)
B. light_travel_time(wrong_param=value)
C. light_travel_time(distance_in_light_years=4, speed_of_light=299792458)
D. light_travel_time()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_speed with description: Calculate the speed of an object based on the distance travelled and the time taken. and parameters: {'type': 'dict', 'properties': {'distance': {'type': 'integer', 'description': 'The distance the object travelled in meters.'}, 'time': {'type': 'integer', 'description': 'The time it took for the object to travel in seconds.'}, 'to_unit': {'type': 'string', 'description': 'The unit in which the speed should be calculated, default is m/s.'}}, 'required': ['distance', 'time']}, if you are asked to Calculate the speed of an object in km/h if it traveled 450 meters in 20 seconds., you will call...
A. similar_function(distance=450, time=20, to_unit=km/h)
B. calculate_speed(wrong_param=value)
C. calculate_speed(distance=450, time=20, to_unit=km/h)
D. calculate_speed()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_distance with description: Calculate the distance between two celestial bodies. and parameters: {'type': 'dict', 'properties': {'body1': {'type': 'string', 'description': 'The first celestial body.'}, 'body2': {'type': 'string', 'description': 'The second celestial body.'}, 'unit': {'type': 'string', 'description': "The unit of measurement, default is 'km'."}}, 'required': ['body1', 'body2']}, if you are asked to What's the distance in milesfrom the Earth to the Moon?, you will call...
A. similar_function(body1=Earth, body2=Moon, unit=mi)
B. calculate_distance(wrong_param=value)
C. calculate_distance(body1=Earth, body2=Moon, unit=mi)
D. calculate_distance()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: mathematics.calculate_area_under_curve with description: Calculate the area under the curve for a given polynomial function within a specified interval. and parameters: {'type': 'dict', 'properties': {'polynomial': {'type': 'array', 'items': {'type': 'float'}, 'description': 'The coefficients of the polynomial, in decreasing order of exponent, where the first element is the coefficient for x^n, the second element is the coefficient for x^(n-1), and so on. The last element is the constant term.'}, 'limits': {'type': 'array', 'items': {'type': 'float'}, 'description': 'A list of two numbers specifying the lower and upper limit for the integration interval.'}}, 'required': ['polynomial', 'limits']}, if you are asked to Calculate the area under the curve y=3x^2 + 2x - 4, between x = -1 and x = 2., you will call...
A. mathematics.calculate_area_under_curve(polynomial=[3.0, 2.0, -4.0], limits=[-1.0, 2.0])
B. similar_function(polynomial=[3.0, 2.0, -4.0], limits=[-1.0, 2.0])
C. mathematics.calculate_area_under_curve(wrong_param=value)
D. mathematics.calculate_area_under_curve()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: geometry.area_triangle with description: Calculate the area of a triangle. and parameters: {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The length of the base of the triangle.'}, 'height': {'type': 'integer', 'description': 'The height of the triangle from the base.'}, 'unit': {'type': 'string', 'description': 'The measurement unit for the area. Defaults to square meters.'}}, 'required': ['base', 'height']}, if you are asked to Calculate the area of a triangle with base 6 and height 10., you will call...
A. geometry.area_triangle(base=6, height=10, unit=)
B. similar_function(base=6, height=10, unit=)
C. geometry.area_triangle(wrong_param=value)
D. geometry.area_triangle()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: math.power with description: Calculate the power of one number raised to another. and parameters: {'type': 'dict', 'properties': {'base': {'type': 'integer', 'description': 'The base number.'}, 'exponent': {'type': 'integer', 'description': 'The exponent.'}, 'mod': {'type': 'integer', 'description': 'The modulus. Default is 1. Calculates pow(base, exponent) % mod when provided.'}}, 'required': ['base', 'exponent']}, if you are asked to Calculate the power of 3 raised to the power 4., you will call...
A. similar_function(base=3, exponent=4, mod=)
B. math.power(wrong_param=value)
C. math.power()
D. math.power(base=3, exponent=4, mod=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: train_random_forest_classifier with description: Train a Random Forest classifier with the specified parameters. and parameters: {'type': 'dict', 'properties': {'dataset': {'type': 'string', 'description': 'The dataset to train the classifier on.'}, 'max_depth': {'type': 'integer', 'description': 'The maximum depth of the trees in the forest.'}, 'n_estimators': {'type': 'integer', 'description': 'The number of trees in the forest.'}}, 'required': ['dataset', 'max_depth', 'n_estimators']}, if you are asked to Train a random forest classifier on dataset your_dataset_name with maximum depth of trees as 5, and number of estimators as 100., you will call...
A. similar_function(dataset=your_dataset_name, max_depth=5, n_estimators=100)
B. train_random_forest_classifier(dataset=your_dataset_name, max_depth=5, n_estimators=100)
C. train_random_forest_classifier(wrong_param=value)
D. train_random_forest_classifier()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_bmi with description: Calculate the Body Mass Index (BMI) for a person based on their weight and height. and parameters: {'type': 'dict', 'properties': {'weight': {'type': 'integer', 'description': 'The weight of the person in kilograms.'}, 'height': {'type': 'integer', 'description': 'The height of the person in centimeters.'}, 'system': {'type': 'string', 'description': "The system of units to be used, 'metric' or 'imperial'. Default is 'metric'."}}, 'required': ['weight', 'height']}, if you are asked to Calculate the Body Mass Index for a person with a weight of 70 kg and a height of 175 cm., you will call...
A. similar_function(weight=70, height=175, system=metric)
B. calculate_bmi(wrong_param=value)
C. calculate_bmi()
D. calculate_bmi(weight=70, height=175, system=metric)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: run_linear_regression with description: Build a linear regression model using given predictor variables and a target variable. and parameters: {'type': 'dict', 'properties': {'predictors': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Array containing the names of predictor variables.'}, 'target': {'type': 'string', 'description': 'The name of target variable.'}, 'standardize': {'type': 'boolean', 'description': 'Option to apply standardization on the predictors. Defaults to False.'}}, 'required': ['predictors', 'target']}, if you are asked to Run a linear regression model with predictor variables 'Age', 'Income' and 'Education' and a target variable 'Purchase_Amount'. Also apply standardization., you will call...
A. run_linear_regression(predictors=['Age', 'Income', 'Education'], target=Purchase_Amount, standardize=True)
B. similar_function(predictors=['Age', 'Income', 'Education'], target=Purchase_Amount, standardize=True)
C. run_linear_regression(wrong_param=value)
D. run_linear_regression()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: random_forest.train with description: Train a Random Forest Model on given data and parameters: {'type': 'dict', 'properties': {'n_estimators': {'type': 'integer', 'description': 'The number of trees in the forest.'}, 'max_depth': {'type': 'integer', 'description': 'The maximum depth of the tree.'}, 'data': {'type': 'any', 'description': 'The training data for the model.'}}, 'required': ['n_estimators', 'max_depth', 'data']}, if you are asked to Generate a random forest model with 100 trees and a depth of 5 on the provided data my_data., you will call...
A. similar_function(n_estimators=100, max_depth=5, data=my_data)
B. random_forest.train(n_estimators=100, max_depth=5, data=my_data)
C. random_forest.train(wrong_param=value)
D. random_forest.train()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: predict_house_price with description: Predict the price of a house in a given area based on number of bedrooms, bathrooms and area. and parameters: {'type': 'dict', 'properties': {'bedrooms': {'type': 'integer', 'description': 'The number of bedrooms in the house.'}, 'bathrooms': {'type': 'integer', 'description': 'The number of bathrooms in the house.'}, 'area': {'type': 'integer', 'description': 'The area of the house in square feet.'}, 'location': {'type': 'string', 'description': 'The location of the house in the format of city name.'}}, 'required': ['bedrooms', 'bathrooms', 'area', 'location']}, if you are asked to Predict the price of the house in San Francisco with 3 bedrooms, 2 bathrooms and area of 1800 square feet., you will call...
A. predict_house_price(bedrooms=3, bathrooms=2, area=1800, location=San Francisco)
B. similar_function(bedrooms=3, bathrooms=2, area=1800, location=San Francisco)
C. predict_house_price(wrong_param=value)
D. predict_house_price()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: random.normalvariate with description: Generates a random number from a normal distribution given the mean and standard deviation. and parameters: {'type': 'dict', 'properties': {'mu': {'type': 'integer', 'description': 'Mean of the normal distribution.'}, 'sigma': {'type': 'integer', 'description': 'Standard deviation of the normal distribution.'}}, 'required': ['mu', 'sigma']}, if you are asked to Generate a random number from a normal distribution with mean 0 and standard deviation 1., you will call...
A. random.normalvariate(mu=0, sigma=1)
B. similar_function(mu=0, sigma=1)
C. random.normalvariate(wrong_param=value)
D. random.normalvariate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_probability with description: Calculate the probability of an event. and parameters: {'type': 'dict', 'properties': {'total_outcomes': {'type': 'integer', 'description': 'Total number of possible outcomes.'}, 'favorable_outcomes': {'type': 'integer', 'description': "Number of outcomes considered as 'successful'."}, 'round_to': {'type': 'integer', 'description': 'Number of decimal places to round the result to.', 'default': 2}}, 'required': ['total_outcomes', 'favorable_outcomes']}, if you are asked to Calculate the probability of drawing a king from a deck of cards., you will call...
A. similar_function(total_outcomes=52, favorable_outcomes=4, round_to=)
B. calculate_probability(total_outcomes=52, favorable_outcomes=4, round_to=)
C. calculate_probability(wrong_param=value)
D. calculate_probability()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: probability.dice_roll with description: Calculate the probability of rolling a certain number on a six-sided die a certain number of times in a row. and parameters: {'type': 'dict', 'properties': {'desired_number': {'type': 'integer', 'description': 'The number you want to roll.'}, 'number_of_rolls': {'type': 'integer', 'description': 'How many times you want to roll that number in a row.'}, 'die_sides': {'type': 'integer', 'description': 'The number of sides on the die (optional; default is 6).'}}, 'required': ['desired_number', 'number_of_rolls']}, if you are asked to What's the probability of rolling a six on a six-sided die twice in a row?, you will call...
A. similar_function(desired_number=6, number_of_rolls=2, die_sides=6)
B. probability.dice_roll(wrong_param=value)
C. probability.dice_roll(desired_number=6, number_of_rolls=2, die_sides=6)
D. probability.dice_roll()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: prob_dist.binomial with description: Compute the probability of having 'success' outcome from binomial distribution. and parameters: {'type': 'dict', 'properties': {'trials': {'type': 'integer', 'description': 'The number of independent experiments.'}, 'successes': {'type': 'integer', 'description': 'The number of success events.'}, 'p': {'type': 'float', 'description': 'The probability of success on any given trial, defaults to 0.5'}}, 'required': ['trials', 'successes']}, if you are asked to Find the probability of getting exactly 5 heads in 10 fair coin tosses., you will call...
A. similar_function(trials=10, successes=5, p=0.5)
B. prob_dist.binomial(wrong_param=value)
C. prob_dist.binomial(trials=10, successes=5, p=0.5)
D. prob_dist.binomial()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_binomial_probability with description: Calculates the binomial probability given the number of trials, successes and the probability of success on an individual trial. and parameters: {'type': 'dict', 'properties': {'number_of_trials': {'type': 'integer', 'description': 'The total number of trials.'}, 'number_of_successes': {'type': 'integer', 'description': 'The desired number of successful outcomes.'}, 'probability_of_success': {'type': 'float', 'description': 'The probability of a successful outcome on any given trial.', 'default': 0.5}}, 'required': ['number_of_trials', 'number_of_successes']}, if you are asked to Calculate the probability of getting exactly 5 heads in 8 tosses of a fair coin., you will call...
A. similar_function(number_of_trials=8, number_of_successes=5, probability_of_success=)
B. calculate_binomial_probability(number_of_trials=8, number_of_successes=5, probability_of_success=)
C. calculate_binomial_probability(wrong_param=value)
D. calculate_binomial_probability()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: probabilities.calculate_single with description: Calculate the probability of an event. and parameters: {'type': 'dict', 'properties': {'total_outcomes': {'type': 'integer', 'description': 'The total number of outcomes.'}, 'event_outcomes': {'type': 'integer', 'description': 'The number of outcomes where the event occurs.'}, 'round': {'type': 'integer', 'description': 'Round the answer to a specified number of decimal places. Defaults to 2.'}}, 'required': ['total_outcomes', 'event_outcomes']}, if you are asked to What's the probability of drawing a king from a well shuffled standard deck of 52 cards?, you will call...
A. similar_function(total_outcomes=52, event_outcomes=4, round=2)
B. probabilities.calculate_single(total_outcomes=52, event_outcomes=4, round=2)
C. probabilities.calculate_single(wrong_param=value)
D. probabilities.calculate_single()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: probability_of_event with description: Calculates the probability of an event. and parameters: {'type': 'dict', 'properties': {'success_outcomes': {'type': 'integer', 'description': 'The number of successful outcomes.'}, 'total_outcomes': {'type': 'integer', 'description': 'The total number of possible outcomes.'}, 'format_as_ratio': {'type': 'boolean', 'description': 'When true, formats the output as a ratio instead of a decimal. Default is false.'}}, 'required': ['success_outcomes', 'total_outcomes']}, if you are asked to What are the odds of pulling a heart suit from a well-shuffled standard deck of 52 cards? Format it as ratio., you will call...
A. similar_function(success_outcomes=13, total_outcomes=52, format_as_ratio=True)
B. probability_of_event(wrong_param=value)
C. probability_of_event()
D. probability_of_event(success_outcomes=13, total_outcomes=52, format_as_ratio=True)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: stats.t_test with description: Perform a two-sample t-test for two given arrays. and parameters: {'type': 'dict', 'properties': {'array_1': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'First array of data.'}, 'array_2': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Second array of data.'}, 'alpha': {'type': 'float', 'description': 'Significance level for hypothesis testing.'}}, 'required': ['array_1', 'array_2', 'alpha']}, if you are asked to Perform a two-sample t-test on my experiment data of Control [10, 15, 12, 14, 11] and Treated [18, 16, 17, 20, 22] group with alpha equals to 0.05, you will call...
A. similar_function(array_1=[10, 15, 12, 14, 11], array_2=[18, 16, 17, 20, 22], alpha=0.05)
B. stats.t_test(wrong_param=value)
C. stats.t_test()
D. stats.t_test(array_1=[10, 15, 12, 14, 11], array_2=[18, 16, 17, 20, 22], alpha=0.05)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: hypothesis_testing.ttest_ind with description: Conducts a hypothesis test for two independent samples. and parameters: {'type': 'dict', 'properties': {'sample1': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'First set of observations (array of numbers).'}, 'sample2': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Second set of observations (array of numbers).'}, 'significance_level': {'type': 'float', 'description': 'Significance level of the test (default: 0.05)'}}, 'required': ['sample1', 'sample2']}, if you are asked to Perform a hypothesis test for two independent samples with scores of Sample1: [22,33,42,12,34] and Sample2: [23,45,44,14,38] at a significance level of 0.05., you will call...
A. hypothesis_testing.ttest_ind(sample1=[22, 33, 42, 12, 34], sample2=[23, 45, 44, 14, 38], significance_level=0.05)
B. similar_function(sample1=[22, 33, 42, 12, 34], sample2=[23, 45, 44, 14, 38], significance_level=0.05)
C. hypothesis_testing.ttest_ind(wrong_param=value)
D. hypothesis_testing.ttest_ind()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: run_two_sample_ttest with description: Runs a two sample t-test for two given data groups. and parameters: {'type': 'dict', 'properties': {'group1': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'First group of data points.'}, 'group2': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Second group of data points.'}, 'equal_variance': {'type': 'boolean', 'description': 'Assumption about whether the two samples have equal variance.', 'default': True}}, 'required': ['group1', 'group2']}, if you are asked to Run a two sample T-test to compare the average of Group A [3, 4, 5, 6, 4] and Group B [7, 8, 9, 8, 7] assuming equal variance., you will call...
A. run_two_sample_ttest(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7], equal_variance=True)
B. similar_function(group1=[3, 4, 5, 6, 4], group2=[7, 8, 9, 8, 7], equal_variance=True)
C. run_two_sample_ttest(wrong_param=value)
D. run_two_sample_ttest()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calc_binomial_prob with description: Calculates the probability of an outcome based on the binomial distribution and parameters: {'type': 'dict', 'properties': {'num_trials': {'type': 'integer', 'description': 'Number of independent experiments.'}, 'num_success': {'type': 'integer', 'description': 'Number of times the event of interest has occurred.'}, 'prob_success': {'type': 'float', 'description': 'Probability of the event of interest on any single experiment.'}}, 'required': ['num_trials', 'num_success', 'prob_success']}, if you are asked to Calculate the probability of observing 60 heads if I flip a coin 100 times with probability of heads 0.5., you will call...
A. similar_function(num_trials=100, num_success=60, prob_success=0.5)
B. calc_binomial_prob(num_trials=100, num_success=60, prob_success=0.5)
C. calc_binomial_prob(wrong_param=value)
D. calc_binomial_prob()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: chi_squared_test with description: Performs a Chi-Squared test for independence on a 2x2 contingency table. and parameters: {'type': 'dict', 'properties': {'table': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'A 2x2 contingency table presented in array form.'}, 'alpha': {'type': 'float', 'description': 'Significance level for the Chi-Squared test. Default is 0.05.'}}, 'required': ['table']}, if you are asked to Perform a Chi-Squared test for independence on a 2x2 contingency table [ [10, 20], [30, 40] ], you will call...
A. similar_function(table=[[10, 20], [30, 40]], alpha=0.05)
B. chi_squared_test(table=[[10, 20], [30, 40]], alpha=0.05)
C. chi_squared_test(wrong_param=value)
D. chi_squared_test()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: hypothesis_testing.two_sample_t_test with description: Perform a two-sample t-test to determine if there is a significant difference between the means of two independent samples. and parameters: {'type': 'dict', 'properties': {'group1': {'type': 'array', 'items': {'type': 'float'}, 'description': 'Sample observations from group 1.'}, 'group2': {'type': 'array', 'items': {'type': 'float'}, 'description': 'Sample observations from group 2.'}, 'alpha': {'type': 'float', 'description': 'Significance level for the t-test. Default is 0.05.'}}, 'required': ['group1', 'group2']}, if you are asked to Perform a two-sample t-test to determine if there is a significant difference between the mean of group1 (e.g., 12.4, 15.6, 11.2, 18.9) and group2 (e.g., 10.5, 9.8, 15.2, 13.8) at the significance level 0.05., you will call...
A. similar_function(group1=[12.4, 15.6, 11.2, 18.9], group2=[10.5, 9.8, 15.2, 13.8], alpha=0.05)
B. hypothesis_testing.two_sample_t_test(wrong_param=value)
C. hypothesis_testing.two_sample_t_test()
D. hypothesis_testing.two_sample_t_test(group1=[12.4, 15.6, 11.2, 18.9], group2=[10.5, 9.8, 15.2, 13.8], alpha=0.05)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: t_test with description: Perform a statistical t-test to check if the means of two independent datasets are statistically different. and parameters: {'type': 'dict', 'properties': {'dataset_A': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Dataset A for comparison.'}, 'dataset_B': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Dataset B for comparison.'}, 'alpha': {'type': 'float', 'description': 'Significance level for the test. Default is 0.05.'}}, 'required': ['dataset_A', 'dataset_B']}, if you are asked to Find the statistical significance between two set of variables, dataset_A with the values 12, 24, 36 and dataset_B with the values 15, 30, 45., you will call...
A. t_test(dataset_A=[12, 24, 36], dataset_B=[15, 30, 45], alpha=0.05)
B. similar_function(dataset_A=[12, 24, 36], dataset_B=[15, 30, 45], alpha=0.05)
C. t_test(wrong_param=value)
D. t_test()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: predict_house_price with description: Predict house price based on area, number of rooms and year of construction. and parameters: {'type': 'dict', 'properties': {'area': {'type': 'integer', 'description': 'Area of the house in square feet.'}, 'rooms': {'type': 'integer', 'description': 'Number of rooms in the house.'}, 'year': {'type': 'integer', 'description': 'Year when the house was constructed.'}, 'location': {'type': 'string', 'description': 'The location or city of the house.'}}, 'required': ['area', 'rooms', 'year', 'location']}, if you are asked to Predict house price in San Francisco based on its area of 2500 square feet, number of rooms as 5 and year of construction is 1990., you will call...
A. predict_house_price(area=2500, rooms=5, year=1990, location=San Francisco)
B. similar_function(area=2500, rooms=5, year=1990, location=San Francisco)
C. predict_house_price(wrong_param=value)
D. predict_house_price()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: linear_regression.get_r_squared with description: Calculate the coefficient of determination of a regression model. and parameters: {'type': 'dict', 'properties': {'dataset_path': {'type': 'string', 'description': 'Path to the CSV dataset file.'}, 'independent_variables': {'type': 'array', 'items': {'type': 'string'}, 'description': 'The independent variables to use in the regression model.'}, 'dependent_variable': {'type': 'string', 'description': 'The dependent variable to predict in the regression model.'}}, 'required': ['dataset_path', 'independent_variables', 'dependent_variable']}, if you are asked to What is the coefficient of determination (R-squared) for a model using engine size and fuel economy variables to predict car_price with a dataset in path C:/data/cars.csv?, you will call...
A. similar_function(dataset_path=C:/data/cars.csv, independent_variables=['engine_size', 'fuel_economy'], dependent_variable=car_price)
B. linear_regression.get_r_squared(dataset_path=C:/data/cars.csv, independent_variables=['engine_size', 'fuel_economy'], dependent_variable=car_price)
C. linear_regression.get_r_squared(wrong_param=value)
D. linear_regression.get_r_squared()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_NPV with description: Calculate the NPV (Net Present Value) of an investment, considering a series of future cash flows, discount rate, and an initial investment. and parameters: {'type': 'dict', 'properties': {'cash_flows': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Series of future cash flows.'}, 'discount_rate': {'type': 'float', 'description': 'The discount rate to use.'}, 'initial_investment': {'type': 'integer', 'description': 'The initial investment. Default is 0 if not specified.'}}, 'required': ['cash_flows', 'discount_rate']}, if you are asked to Find the Net Present Value (NPV) of an investment, given cash_flows=[200,300,400,500], a discount rate of 10%, and an initial investment of $2000., you will call...
A. calculate_NPV(cash_flows=[200, 300, 400, 500], discount_rate=0.1, initial_investment=2000)
B. similar_function(cash_flows=[200, 300, 400, 500], discount_rate=0.1, initial_investment=2000)
C. calculate_NPV(wrong_param=value)
D. calculate_NPV()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: finance.calculate_quarterly_dividend_per_share with description: Calculate quarterly dividend per share for a company given total dividend payout and outstanding shares and parameters: {'type': 'dict', 'properties': {'total_payout': {'type': 'integer', 'description': 'The total amount of dividends paid out in USD'}, 'outstanding_shares': {'type': 'integer', 'description': 'Total number of outstanding shares'}}, 'required': ['total_payout', 'outstanding_shares'], 'optional': []}, if you are asked to What's the quarterly dividend per share of a company with 100 million outstanding shares and total dividend payout of 50 million USD?, you will call...
A. similar_function(total_payout=50000000, outstanding_shares=100000000)
B. finance.calculate_quarterly_dividend_per_share(total_payout=50000000, outstanding_shares=100000000)
C. finance.calculate_quarterly_dividend_per_share(wrong_param=value)
D. finance.calculate_quarterly_dividend_per_share()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_discounted_cash_flow with description: Calculate the discounted cash flow of a bond for a given annual coupon payment, time frame and discount rate. and parameters: {'type': 'dict', 'properties': {'coupon_payment': {'type': 'integer', 'description': 'The annual coupon payment.'}, 'period': {'type': 'integer', 'description': 'The time frame in years for which coupon payment is made.'}, 'discount_rate': {'type': 'float', 'description': 'The discount rate.'}, 'face_value': {'type': 'integer', 'description': 'The face value of the bond, default is 1000.'}}, 'required': ['coupon_payment', 'period', 'discount_rate']}, if you are asked to Calculate the discounted cash flow of a bond that is giving a coupon payment of $100 annually for next 5 years with discount rate 4%., you will call...
A. similar_function(coupon_payment=100, period=5, discount_rate=0.04, face_value=)
B. calculate_discounted_cash_flow(wrong_param=value)
C. calculate_discounted_cash_flow(coupon_payment=100, period=5, discount_rate=0.04, face_value=)
D. calculate_discounted_cash_flow()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: finance_calculator.npv with description: Calculate the Net Present Value (NPV) for a series of cash flows discounted at a certain interest rate. and parameters: {'type': 'dict', 'properties': {'cash_flows': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'A list of cash flows.'}, 'discount_rate': {'type': 'float', 'description': 'The annual interest rate used to discount the cash flows.'}, 'years': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'A list of years when the cash flow occurs. Default is empty array.'}}, 'required': ['cash_flows', 'discount_rate']}, if you are asked to What's the NPV (Net Present Value) of a series of cash flows: [-50000, 10000, 15000, 20000, 25000, 30000] discounted at 8% annually?, you will call...
A. similar_function(cash_flows=[-50000, 10000, 15000, 20000, 25000, 30000], discount_rate=0.08, years=)
B. finance_calculator.npv(wrong_param=value)
C. finance_calculator.npv(cash_flows=[-50000, 10000, 15000, 20000, 25000, 30000], discount_rate=0.08, years=)
D. finance_calculator.npv()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_compound_interest with description: Calculate compound interest for an initial principal amount. and parameters: {'type': 'dict', 'properties': {'principal': {'type': 'integer', 'description': 'The principal amount that the interest is applied to.'}, 'rate': {'type': 'float', 'description': 'The annual interest rate. Enter as a decimal. E.g, 5% is 0.05'}, 'time': {'type': 'integer', 'description': 'The time the money is invested for in years.'}, 'n': {'type': 'integer', 'description': 'The number of times that interest is compounded per time period. Default is 1.'}}, 'required': ['principal', 'rate', 'time']}, if you are asked to Calculate the compound interest for an initial principal amount of $10000, with an annual interest rate of 5% and the number of times interest applied per time period is 4 and the time the money is invested for 10 years., you will call...
A. similar_function(principal=10000, rate=0.05, time=10, n=4)
B. calculate_compound_interest(wrong_param=value)
C. calculate_compound_interest(principal=10000, rate=0.05, time=10, n=4)
D. calculate_compound_interest()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_return_on_equity with description: Calculate a company's return on equity based on its net income, shareholder's equity, and dividends paid. and parameters: {'type': 'dict', 'properties': {'net_income': {'type': 'integer', 'description': "The company's net income."}, 'shareholder_equity': {'type': 'integer', 'description': "The company's total shareholder's equity."}, 'dividends_paid': {'type': 'integer', 'description': 'The total dividends paid by the company. Optional. If not given, default to 0.'}}, 'required': ['net_income', 'shareholder_equity']}, if you are asked to Calculate the company's return on equity given its net income of $2,000,000, shareholder's equity of $10,000,000, and dividends paid of $200,000., you will call...
A. similar_function(net_income=2000000, shareholder_equity=10000000, dividends_paid=200000)
B. calculate_return_on_equity(wrong_param=value)
C. calculate_return_on_equity()
D. calculate_return_on_equity(net_income=2000000, shareholder_equity=10000000, dividends_paid=200000)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: finance.predict_future_value with description: Calculate the future value of an investment given its present value, interest rate, the number of compounding periods per year, and the time horizon. and parameters: {'type': 'dict', 'properties': {'present_value': {'type': 'integer', 'description': 'The present value of the investment.'}, 'annual_interest_rate': {'type': 'float', 'description': 'The annual interest rate of the investment.'}, 'compounding_periods_per_year': {'type': 'integer', 'description': 'The number of times that interest is compounded per year. Default is 1 (annually).'}, 'time_years': {'type': 'integer', 'description': 'The investment horizon in years.'}}, 'required': ['present_value', 'annual_interest_rate', 'time_years']}, if you are asked to Predict the future value of a $5000 investment with an annual interest rate of 5% in 3 years with monthly compounding., you will call...
A. similar_function(present_value=5000, annual_interest_rate=0.05, compounding_periods_per_year=12, time_years=3)
B. finance.predict_future_value(wrong_param=value)
C. finance.predict_future_value()
D. finance.predict_future_value(present_value=5000, annual_interest_rate=0.05, compounding_periods_per_year=12, time_years=3)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: investment.predictProfit with description: Predict the profit for given investment after specified number of years. and parameters: {'type': 'dict', 'properties': {'investment_amount': {'type': 'integer', 'description': 'The amount invested in dollars.'}, 'annual_return': {'type': 'float', 'description': 'The annual return rate of the investment.'}, 'years': {'type': 'integer', 'description': 'The time period in years for which the investment is made.'}}, 'required': ['investment_amount', 'annual_return', 'years']}, if you are asked to Predict the total expected profit of stocks XYZ in 5 years given I have invested $5000 and annual return rate is 7%., you will call...
A. similar_function(investment_amount=5000, annual_return=0.07, years=5)
B. investment.predictProfit(investment_amount=5000, annual_return=0.07, years=5)
C. investment.predictProfit(wrong_param=value)
D. investment.predictProfit()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_return_on_investment with description: Calculate the return on investment for a given stock based on its purchase price, sale price, and any dividends received. and parameters: {'type': 'dict', 'properties': {'purchase_price': {'type': 'integer', 'description': 'The price the stock was bought at.'}, 'sale_price': {'type': 'integer', 'description': 'The price the stock was sold at.'}, 'dividend': {'type': 'integer', 'description': 'Any dividends received from the stock.', 'default': 0}}, 'required': ['purchase_price', 'sale_price']}, if you are asked to Calculate the return on investment for a stock bought at $20, sold at $25, with a dividend of $2., you will call...
A. similar_function(purchase_price=20, sale_price=25, dividend=2)
B. calculate_return_on_investment(wrong_param=value)
C. calculate_return_on_investment(purchase_price=20, sale_price=25, dividend=2)
D. calculate_return_on_investment()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: compound_interest with description: Calculate compound interest for a certain time period. and parameters: {'type': 'dict', 'properties': {'principal': {'type': 'integer', 'description': 'The initial amount of money that was invested or loaned out.'}, 'annual_rate': {'type': 'float', 'description': 'The interest rate for a year as a percentage.'}, 'compounding_freq': {'type': 'string', 'enum': ['monthly', 'quarterly', 'annually'], 'description': 'The number of times that interest is compounded per unit period.'}, 'time_in_years': {'type': 'integer', 'description': 'The time the money is invested for in years.'}}, 'required': ['principal', 'annual_rate', 'compounding_freq', 'time_in_years']}, if you are asked to Find the compound interest for an investment of $10000 with an annual interest rate of 5% compounded monthly for 5 years., you will call...
A. similar_function(principal=10000, annual_rate=5, compounding_freq=monthly, time_in_years=5)
B. compound_interest(wrong_param=value)
C. compound_interest(principal=10000, annual_rate=5, compounding_freq=monthly, time_in_years=5)
D. compound_interest()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_stock_return with description: Calculate the projected return of a stock investment given the investment amount, the annual growth rate and holding period in years. and parameters: {'type': 'dict', 'properties': {'investment_amount': {'type': 'integer', 'description': 'The amount of money to invest.'}, 'annual_growth_rate': {'type': 'float', 'description': 'The expected annual growth rate of the stock.'}, 'holding_period': {'type': 'integer', 'description': 'The number of years you intend to hold the stock.'}, 'dividends': {'type': 'boolean', 'description': 'Optional. True if the calculation should take into account potential dividends. Default is false.'}}, 'required': ['investment_amount', 'annual_growth_rate', 'holding_period']}, if you are asked to Calculate the projected return on a $5000 investment in ABC company's stock, if the expected annual growth rate is 6% and the holding period is 5 years., you will call...
A. similar_function(investment_amount=5000, annual_growth_rate=0.06, holding_period=5, dividends=)
B. calculate_stock_return(wrong_param=value)
C. calculate_stock_return()
D. calculate_stock_return(investment_amount=5000, annual_growth_rate=0.06, holding_period=5, dividends=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: portfolio_future_value with description: Calculate the future value of an investment in a specific stock based on the invested amount, expected annual return and number of years. and parameters: {'type': 'dict', 'properties': {'stock': {'type': 'string', 'description': 'The ticker symbol of the stock.'}, 'invested_amount': {'type': 'integer', 'description': 'The invested amount in USD.'}, 'expected_annual_return': {'type': 'float', 'description': 'The expected annual return on investment as a decimal. E.g. 5% = 0.05'}, 'years': {'type': 'integer', 'description': 'The number of years for which the investment is made.'}}, 'required': ['stock', 'invested_amount', 'expected_annual_return', 'years']}, if you are asked to Calculate the future value of my portfolio if I invest $5000 in stock 'X' with an expected annual return of 5% for 7 years., you will call...
A. similar_function(stock=X, invested_amount=5000, expected_annual_return=0.05, years=7)
B. portfolio_future_value(stock=X, invested_amount=5000, expected_annual_return=0.05, years=7)
C. portfolio_future_value(wrong_param=value)
D. portfolio_future_value()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: estimate_mutual_fund_return with description: Calculate the estimated return on a mutual fund given the yearly yield, the investment amount and the time period. and parameters: {'type': 'dict', 'properties': {'yearly_yield': {'type': 'float', 'description': 'The yearly yield of the mutual fund as a percentage.'}, 'investment_amount': {'type': 'integer', 'description': 'The initial investment amount in the mutual fund.'}, 'years': {'type': 'integer', 'description': 'The time period for which the investment is made in years.'}}, 'required': ['yearly_yield', 'investment_amount', 'years']}, if you are asked to What is the estimated return on a mutual fund, given that it has a yearly yield of 5%, an investment amount of $2000 and a time period of 3 years?, you will call...
A. similar_function(yearly_yield=5, investment_amount=2000, years=3)
B. estimate_mutual_fund_return(wrong_param=value)
C. estimate_mutual_fund_return()
D. estimate_mutual_fund_return(yearly_yield=5, investment_amount=2000, years=3)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_cagr with description: Calculate the Compound Annual Growth Rate (CAGR) given an initial investment value, a final investment value, and the number of years. and parameters: {'type': 'dict', 'properties': {'initial_value': {'type': 'integer', 'description': 'The initial investment value.'}, 'final_value': {'type': 'integer', 'description': 'The final investment value.'}, 'period_in_years': {'type': 'integer', 'description': 'The period of the investment in years.'}}, 'required': ['initial_value', 'final_value', 'period_in_years']}, if you are asked to Calculate the Compound Annual Growth Rate (CAGR) for an initial investment of $2000, final value of $3000 in a period of 4 years., you will call...
A. calculate_cagr(initial_value=2000, final_value=3000, period_in_years=4)
B. similar_function(initial_value=2000, final_value=3000, period_in_years=4)
C. calculate_cagr(wrong_param=value)
D. calculate_cagr()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_metal_price with description: Retrieve the current price for a specified metal and measure. and parameters: {'type': 'dict', 'properties': {'metal': {'type': 'string', 'description': 'The metal whose price needs to be fetched.'}, 'measure': {'type': 'string', 'description': "The measure unit for price, like 'ounce' or 'kg'."}}, 'required': ['metal', 'measure']}, if you are asked to Get current Gold price per ounce., you will call...
A. similar_function(metal=Gold, measure=ounce)
B. get_metal_price(wrong_param=value)
C. get_metal_price(metal=Gold, measure=ounce)
D. get_metal_price()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_stock_price with description: Get the closing stock price for a specific company on a specified date. and parameters: {'type': 'dict', 'properties': {'company_name': {'type': 'string', 'description': 'Name of the company.'}, 'date': {'type': 'string', 'description': 'Date of when to get the stock price. Format: yyyy-mm-dd.'}, 'exchange': {'type': 'string', 'description': "Name of the stock exchange market where the company's stock is listed. Default is 'NASDAQ'"}}, 'required': ['company_name', 'date']}, if you are asked to Find the NASDAQ stock price for the company Amazon at closing March.11, 2022., you will call...
A. similar_function(company_name=Amazon, date=2022-03-11, exchange=NASDAQ)
B. get_stock_price(wrong_param=value)
C. get_stock_price()
D. get_stock_price(company_name=Amazon, date=2022-03-11, exchange=NASDAQ)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_stock_price with description: Retrieve the stock price for a specific company and time frame. and parameters: {'type': 'dict', 'properties': {'company': {'type': 'string', 'description': 'The ticker symbol of the company.'}, 'days': {'type': 'integer', 'description': 'Number of past days for which the stock price is required.'}, 'exchange': {'type': 'string', 'description': 'The stock exchange where the company is listed, default is NYSE'}}, 'required': ['company', 'days']}, if you are asked to 'Get stock price of Apple for the last 5 days in NASDAQ.', you will call...
A. similar_function(company=AAPL, days=5, exchange=NASDAQ)
B. get_stock_price(wrong_param=value)
C. get_stock_price()
D. get_stock_price(company=AAPL, days=5, exchange=NASDAQ)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: market_performance.get_data with description: Retrieve the market performance data for specified indexes over a specified time period. and parameters: {'type': 'dict', 'properties': {'indexes': {'type': 'array', 'items': {'type': 'string'}, 'description': "Array of stock market indexes. Supported indexes are 'S&P 500', 'Dow Jones', 'NASDAQ', 'FTSE 100', 'DAX' etc."}, 'days': {'type': 'integer', 'description': 'Number of days in the past for which the performance data is required.'}, 'detailed': {'type': 'boolean', 'description': 'Whether to return detailed performance data. If set to true, returns high, low, opening, and closing prices. If false, returns only closing prices. Default is false.'}}, 'required': ['indexes', 'days']}, if you are asked to Find the market performance of the S&P 500 and the Dow Jones over the past 5 days., you will call...
A. market_performance.get_data(indexes=['S&P 500', 'Dow Jones'], days=5, detailed=)
B. similar_function(indexes=['S&P 500', 'Dow Jones'], days=5, detailed=)
C. market_performance.get_data(wrong_param=value)
D. market_performance.get_data()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_compounded_interest with description: Calculate the compounded interest for a given principal, interest rate, and period. and parameters: {'type': 'dict', 'properties': {'principal': {'type': 'integer', 'description': 'The initial principal.'}, 'interest_rate': {'type': 'float', 'description': 'The annual interest rate.'}, 'period': {'type': 'integer', 'description': 'The period in years.'}, 'compounding_frequency': {'type': 'string', 'description': "The frequency of compounding per year. Defaults to 'Annually'.", 'enum': ['Annually', 'Semiannually', 'Quarterly', 'Monthly', 'Daily']}}, 'required': ['principal', 'interest_rate', 'period']}, if you are asked to Calculate the compounded interest for an initial principal of $5000, annual interest rate of 5%, and compounding period of 10 years., you will call...
A. similar_function(principal=5000, interest_rate=0.05, period=10, compounding_frequency=Annually)
B. calculate_compounded_interest(wrong_param=value)
C. calculate_compounded_interest(principal=5000, interest_rate=0.05, period=10, compounding_frequency=Annually)
D. calculate_compounded_interest()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: stock_price with description: Get stock price data for a given company over a specified number of days. and parameters: {'type': 'dict', 'properties': {'company': {'type': 'string', 'description': 'The company name.'}, 'days': {'type': 'integer', 'description': 'The number of previous days to retrieve data for.'}, 'data_type': {'type': 'string', 'description': "The type of price data to retrieve (e.g., 'Open', 'Close', 'High', 'Low'). Default is 'Close'."}}, 'required': ['company', 'days']}, if you are asked to What's the price of Amazon stock for the last 3 days?, you will call...
A. similar_function(company=Amazon, days=3, data_type=Close)
B. stock_price(wrong_param=value)
C. stock_price()
D. stock_price(company=Amazon, days=3, data_type=Close)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_stock_prices with description: Retrieves stock prices for specified companies and duration. and parameters: {'type': 'dict', 'properties': {'companies': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of companies to retrieve stock prices for.'}, 'duration': {'type': 'string', 'description': "Time duration to retrieve stock prices for. E.g., '1 week', '2 weeks', '1 month', etc."}}, 'required': ['companies', 'duration']}, if you are asked to Retrieve stock prices of Microsoft and Google for the last 2 weeks., you will call...
A. similar_function(companies=['Microsoft', 'Google'], duration=2 weeks)
B. get_stock_prices(wrong_param=value)
C. get_stock_prices()
D. get_stock_prices(companies=['Microsoft', 'Google'], duration=2 weeks)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: finance.calculate_future_value with description: Calculate the future value of an investment given an initial investment, annual rate of return, and a time frame. and parameters: {'type': 'dict', 'properties': {'initial_investment': {'type': 'integer', 'description': 'The initial investment amount.'}, 'rate_of_return': {'type': 'float', 'description': 'The annual rate of return.'}, 'years': {'type': 'integer', 'description': 'The time frame of the investment in years.'}, 'contribution': {'type': 'integer', 'description': 'Optional: Additional regular contributions. Default is 0.'}}, 'required': ['initial_investment', 'rate_of_return', 'years']}, if you are asked to Calculate the future value of an investment with an annual rate of return of 8%, an initial investment of $20000, and a time frame of 5 years., you will call...
A. similar_function(initial_investment=20000, rate_of_return=0.08, years=5, contribution=)
B. finance.calculate_future_value(wrong_param=value)
C. finance.calculate_future_value()
D. finance.calculate_future_value(initial_investment=20000, rate_of_return=0.08, years=5, contribution=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_stock_price with description: Retrieves the current stock price of the specified companies and parameters: {'type': 'dict', 'properties': {'company_names': {'type': 'array', 'items': {'type': 'string'}, 'description': 'The list of companies for which to retrieve the stock price.'}}, 'required': ['company_names']}, if you are asked to What's the current stock price of Apple and Microsoft?, you will call...
A. similar_function(company_names=['Apple', 'Microsoft'])
B. get_stock_price(company_names=['Apple', 'Microsoft'])
C. get_stock_price(wrong_param=value)
D. get_stock_price()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_roi with description: Calculate the return on investment for a given deposit amount, annual interest rate, and time frame. and parameters: {'type': 'dict', 'properties': {'deposit': {'type': 'integer', 'description': 'The initial deposit amount.'}, 'annual_interest_rate': {'type': 'float', 'description': 'The annual interest rate provided by the bank.'}, 'years': {'type': 'integer', 'description': 'The period for which the money is invested.'}}, 'required': ['deposit', 'annual_interest_rate', 'years']}, if you are asked to Calculate the return of investment of a bank's savings account with a deposit of $1000, annual interest rate of 3% for 1 year., you will call...
A. similar_function(deposit=1000, annual_interest_rate=0.03, years=1)
B. calculate_roi(wrong_param=value)
C. calculate_roi(deposit=1000, annual_interest_rate=0.03, years=1)
D. calculate_roi()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: highest_grossing_banks with description: Retrieve the highest grossing banks in a specified country and year. and parameters: {'type': 'dict', 'properties': {'country': {'type': 'string', 'description': 'The country to get the data from.'}, 'year': {'type': 'integer', 'description': 'The year to get the data from.'}, 'top_n': {'type': 'integer', 'description': 'Top n banks in terms of grossing. Default is 5'}}, 'required': ['country', 'year']}, if you are asked to Find the highest grossing bank in the U.S for year 2020., you will call...
A. highest_grossing_banks(country=U.S, year=2020, top_n=1)
B. similar_function(country=U.S, year=2020, top_n=1)
C. highest_grossing_banks(wrong_param=value)
D. highest_grossing_banks()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_mutual_fund_balance with description: Calculate the final balance of a mutual fund investment based on the total initial investment, annual yield rate and the time period. and parameters: {'type': 'dict', 'properties': {'investment_amount': {'type': 'integer', 'description': 'The initial total amount invested in the fund.'}, 'annual_yield': {'type': 'float', 'description': 'The annual yield rate of the fund.'}, 'years': {'type': 'integer', 'description': 'The period of time for the fund to mature.'}}, 'required': ['investment_amount', 'annual_yield', 'years']}, if you are asked to Calculate the balance of a mutual fund given a total investment of $50000 with a 5% annual yield after 3 years., you will call...
A. similar_function(investment_amount=50000, annual_yield=0.05, years=3)
B. calculate_mutual_fund_balance(investment_amount=50000, annual_yield=0.05, years=3)
C. calculate_mutual_fund_balance(wrong_param=value)
D. calculate_mutual_fund_balance()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_compounded_interest with description: Calculate the compounded interest for a given initial deposit, interest rate, time and number of times the interest is compounded per unit time. and parameters: {'type': 'dict', 'properties': {'principal': {'type': 'integer', 'description': 'The initial amount of money that is being invested or loaned.'}, 'rate': {'type': 'float', 'description': 'The annual interest rate.'}, 'time': {'type': 'integer', 'description': 'The number of time periods the money is invested or loaned for.'}, 'n': {'type': 'integer', 'description': 'The number of times that interest is compounded per unit time.'}}, 'required': ['principal', 'rate', 'time', 'n']}, if you are asked to Calculate the compounded interest on an initial deposit of $5000 at an annual interest rate of 3% for 5 years, compounded quarterly., you will call...
A. calculate_compounded_interest(principal=5000, rate=0.03, time=5, n=4)
B. similar_function(principal=5000, rate=0.03, time=5, n=4)
C. calculate_compounded_interest(wrong_param=value)
D. calculate_compounded_interest()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_future_value with description: Calculates the future value of an investment based on the present value, interest rate, and time period. and parameters: {'type': 'dict', 'properties': {'present_value': {'type': 'integer', 'description': 'The present value or principal amount.'}, 'annual_interest_rate': {'type': 'float', 'description': 'The annual interest rate in decimal form. Example, 5% is 0.05.'}, 'years': {'type': 'integer', 'description': 'The time period in years for which the investment is made.'}, 'compounds_per_year': {'type': 'integer', 'description': 'The number of times the interest is compounded per year. Default is 1 (annual compounding).'}}, 'required': ['present_value', 'annual_interest_rate', 'years']}, if you are asked to Calculate the Future Value of a $5000 investment made today for a term of 10 years at an annual interest rate of 5%, you will call...
A. similar_function(present_value=5000, annual_interest_rate=0.05, years=10, compounds_per_year=)
B. calculate_future_value(wrong_param=value)
C. calculate_future_value()
D. calculate_future_value(present_value=5000, annual_interest_rate=0.05, years=10, compounds_per_year=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_future_value with description: Calculate the future value of an investment given the initial amount, interest rate, and investment duration. and parameters: {'type': 'dict', 'properties': {'initial_investment': {'type': 'integer', 'description': 'The initial investment amount.'}, 'interest_rate': {'type': 'float', 'description': 'The annual interest rate in decimal form.'}, 'duration': {'type': 'integer', 'description': 'The investment duration in years.'}, 'compounded': {'type': 'integer', 'description': 'The number of times the interest is compounded per year. Default is 1 (annual compounding).'}}, 'required': ['initial_investment', 'interest_rate', 'duration']}, if you are asked to Calculate the future value of my investment of $1000 with an annual interest rate of 5% over 2 years., you will call...
A. similar_function(initial_investment=1000, interest_rate=0.05, duration=2, compounded=)
B. calculate_future_value(wrong_param=value)
C. calculate_future_value()
D. calculate_future_value(initial_investment=1000, interest_rate=0.05, duration=2, compounded=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: crime_record.get_record with description: Retrieve detailed felony crime records using a specific case number and location. and parameters: {'type': 'dict', 'properties': {'case_number': {'type': 'string', 'description': 'The case number related to the crime.'}, 'county': {'type': 'string', 'description': 'The county in which the crime occurred.'}, 'details': {'type': 'boolean', 'description': 'To get a detailed report, set as true. Defaults to false.'}}, 'required': ['case_number', 'county']}, if you are asked to Look up details of a felony crime record for case number CA123456 in San Diego County, you will call...
A. similar_function(case_number=CA123456, county=San Diego, details=True)
B. crime_record.get_record(wrong_param=value)
C. crime_record.get_record(case_number=CA123456, county=San Diego, details=True)
D. crime_record.get_record()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: criminal_history.check_felonies with description: This function checks if an individual has any prior felony convictions based on their full name and birth date. and parameters: {'type': 'dict', 'properties': {'full_name': {'type': 'string', 'description': 'The full name of the individual.'}, 'birth_date': {'type': 'string', 'description': 'The birth date of the individual. Must be in MM-DD-YYYY format.'}, 'state': {'type': 'string', 'description': "The state to search the criminal record in. Default to 'None', which the function will search across all states."}}, 'required': ['full_name', 'birth_date']}, if you are asked to Find out if an individual John Doe with a birthday 01-01-1980 has any prior felony convictions in California., you will call...
A. similar_function(full_name=John Doe, birth_date=01-01-1980, state=California)
B. criminal_history.check_felonies(wrong_param=value)
C. criminal_history.check_felonies(full_name=John Doe, birth_date=01-01-1980, state=California)
D. criminal_history.check_felonies()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_criminal_records with description: Retrieve the criminal records of a specific person in a specific area during a certain time period. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The name of the person.'}, 'location': {'type': 'string', 'description': 'The city and state, e.g. New York, NY'}, 'from_year': {'type': 'integer', 'description': 'The start year of the time frame.'}, 'to_year': {'type': 'integer', 'description': 'The end year of the time frame.'}}, 'required': ['name', 'location', 'from_year', 'to_year']}, if you are asked to Find the information of criminal cases of Mr. X in New York between 2012 and 2015., you will call...
A. similar_function(name=Mr. X, location=New York, NY, from_year=2012, to_year=2015)
B. get_criminal_records(wrong_param=value)
C. get_criminal_records(name=Mr. X, location=New York, NY, from_year=2012, to_year=2015)
D. get_criminal_records()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_act_details with description: Retrieve the details of a particular legal act based on its name and year of amendment if any. and parameters: {'type': 'dict', 'properties': {'act_name': {'type': 'string', 'description': 'The name of the act.'}, 'amendment_year': {'type': 'integer', 'description': 'Year of amendment if any. If not provided, the latest amendment year will be considered.'}}, 'required': ['act_name', 'amendment_year']}, if you are asked to Give me the details of Criminal Law Amendment Act of 2013., you will call...
A. similar_function(act_name=Criminal Law Amendment Act, amendment_year=2013)
B. get_act_details(act_name=Criminal Law Amendment Act, amendment_year=2013)
C. get_act_details(wrong_param=value)
D. get_act_details()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_case_info with description: Retrieve case details using a specific case docket number and court location. and parameters: {'type': 'dict', 'properties': {'docket': {'type': 'string', 'description': 'Docket number for the specific court case.'}, 'court': {'type': 'string', 'description': 'Court in which the case was heard.'}, 'info_type': {'type': 'string', 'description': 'Specify the information type needed for the case. i.e., victim, accused, verdict etc.'}}, 'required': ['docket', 'court', 'info_type']}, if you are asked to Who was the victim in the case docket numbered 2022/AL2562 in California?, you will call...
A. similar_function(docket=2022/AL2562, court=California, info_type=victim)
B. get_case_info(docket=2022/AL2562, court=California, info_type=victim)
C. get_case_info(wrong_param=value)
D. get_case_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: crime_statute_lookup with description: Look up the criminal statutes in a specific jurisdiction to find possible punishments for a specific crime. and parameters: {'type': 'dict', 'properties': {'jurisdiction': {'type': 'string', 'description': 'The jurisdiction to search in, usually a state or country.'}, 'crime': {'type': 'string', 'description': 'The crime to search for.'}, 'detail_level': {'type': 'string', 'enum': ['basic', 'detailed'], 'description': "How detailed of a report to return. Optional, default is 'basic'."}}, 'required': ['jurisdiction', 'crime']}, if you are asked to Find out the possible punishments for the crime of theft in California in detail., you will call...
A. similar_function(jurisdiction=California, crime=theft, detail_level=detailed)
B. crime_statute_lookup(wrong_param=value)
C. crime_statute_lookup(jurisdiction=California, crime=theft, detail_level=detailed)
D. crime_statute_lookup()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: generate_law_contract with description: Generates a customized law contract given involved parties, contract type and location. and parameters: {'type': 'dict', 'properties': {'parties': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Parties involved in the contract.'}, 'contract_type': {'type': 'string', 'description': 'Type of the contract.'}, 'location': {'type': 'string', 'description': 'Location where the contract will be in effect.'}}, 'required': ['parties', 'contract_type', 'location']}, if you are asked to Generate a customized law contract between John and Alice for rental agreement in California., you will call...
A. generate_law_contract(parties=['John', 'Alice'], contract_type=Rental Agreement, location=California)
B. similar_function(parties=['John', 'Alice'], contract_type=Rental Agreement, location=California)
C. generate_law_contract(wrong_param=value)
D. generate_law_contract()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: property_records.get with description: Fetch property records based on location, parcel number and county. and parameters: {'type': 'dict', 'properties': {'address': {'type': 'string', 'description': 'Address of the property.'}, 'parcel_number': {'type': 'string', 'description': 'Parcel number of the property.'}, 'county': {'type': 'string', 'description': 'County where the property is located.'}, 'include_owner': {'type': 'boolean', 'description': "Include owner's name in the property record. Default is false.", 'default': False}}, 'required': ['address', 'parcel_number', 'county']}, if you are asked to Provide me with the property records of my house located at 123 main street, with parcel number 1234567890 in Santa Clara county. Include owners information in the response., you will call...
A. similar_function(address=123 main street, parcel_number=1234567890, county=Santa Clara, include_owner=True)
B. property_records.get(wrong_param=value)
C. property_records.get(address=123 main street, parcel_number=1234567890, county=Santa Clara, include_owner=True)
D. property_records.get()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_crime_rate with description: Retrieve the official crime rate of a city. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The name of the city.'}, 'state': {'type': 'string', 'description': 'The state where the city is located.'}, 'type': {'type': 'string', 'description': "Optional. The type of crime. Default is 'violent'"}, 'year': {'type': 'integer', 'description': 'Optional. The year for the crime rate data. Default is year 2001.'}}, 'required': ['city', 'state']}, if you are asked to Provide me the official crime rate of violent crime in San Francisco in 2020., you will call...
A. get_crime_rate(city=San Francisco, state=California, type=violent, year=2020)
B. similar_function(city=San Francisco, state=California, type=violent, year=2020)
C. get_crime_rate(wrong_param=value)
D. get_crime_rate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: civil_cases.retrieve with description: Retrieve civil cases based on given parameters, including year, crime type, and location. and parameters: {'type': 'dict', 'properties': {'year': {'type': 'integer', 'description': 'Year of the cases'}, 'crime_type': {'type': 'string', 'description': 'Type of the crime.'}, 'location': {'type': 'string', 'description': 'Location of the case in the format of city name.'}}, 'required': ['year', 'crime_type', 'location']}, if you are asked to Retrieve cases from 2020 about theft crimes in Los Angeles, California, you will call...
A. similar_function(year=2020, crime_type=theft, location=Los Angeles)
B. civil_cases.retrieve(wrong_param=value)
C. civil_cases.retrieve()
D. civil_cases.retrieve(year=2020, crime_type=theft, location=Los Angeles)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: lawyer.find_nearby with description: Locate nearby lawyers based on specific criteria like specialty, fee per hour and city. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The city and state, e.g. Chicago, IL.'}, 'specialty': {'type': 'array', 'items': {'type': 'string', 'enum': ['Civil', 'Divorce', 'Immigration', 'Business', 'Criminal']}, 'description': 'Specialization of the lawyer.'}, 'fee': {'type': 'integer', 'description': 'Hourly fee charged by lawyer'}}, 'required': ['city', 'specialty', 'fee']}, if you are asked to Find a lawyer specializing in divorce cases and charge fee less than 400 dollars per hour in Chicago., you will call...
A. similar_function(city=Chicago, IL., specialty=['Divorce'], fee=400)
B. lawyer.find_nearby(wrong_param=value)
C. lawyer.find_nearby(city=Chicago, IL., specialty=['Divorce'], fee=400)
D. lawyer.find_nearby()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: law.civil.get_case_details with description: Retrieve the details of a Supreme Court case given its title. and parameters: {'type': 'dict', 'properties': {'case_title': {'type': 'string', 'description': 'Title of the Supreme Court case.'}, 'include_dissent': {'type': 'boolean', 'description': 'If true, the output will include details of the dissenting opinion.'}}, 'required': ['case_title', 'include_dissent']}, if you are asked to Retrieve the details of a Supreme Court case titled 'Roe v. Wade'.Include dissent information., you will call...
A. law.civil.get_case_details(case_title=Roe v. Wade, include_dissent=True)
B. similar_function(case_title=Roe v. Wade, include_dissent=True)
C. law.civil.get_case_details(wrong_param=value)
D. law.civil.get_case_details()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: lawsuit_search with description: Search for lawsuits related to a specific company within a specific date range and location. and parameters: {'type': 'dict', 'properties': {'company': {'type': 'string', 'description': 'The company related to the lawsuit.'}, 'start_date': {'type': 'string', 'description': 'Start of the date range for when the lawsuit was filed in the format of MM-DD-YYY.'}, 'location': {'type': 'string', 'description': 'Location where the lawsuit was filed in the format of full state name.'}, 'status': {'type': 'string', 'enum': ['ongoing', 'settled', 'dismissed'], 'description': "The status of the lawsuit. Default is 'ongoing'."}}, 'required': ['company', 'start_date', 'location']}, if you are asked to Search for ongoing lawsuits related to the company 'Google' filed after January 1, 2021 in California., you will call...
A. similar_function(company=Google, start_date=01-01-2021, location=California, status=ongoing)
B. lawsuit_search(wrong_param=value)
C. lawsuit_search(company=Google, start_date=01-01-2021, location=California, status=ongoing)
D. lawsuit_search()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: court_case.search with description: Retrieves details about a court case using its docket number and location. and parameters: {'type': 'dict', 'properties': {'docket_number': {'type': 'string', 'description': 'The docket number for the case.'}, 'location': {'type': 'string', 'description': 'The location where the case is registered, in the format: state, e.g., Texas'}, 'full_text': {'type': 'boolean', 'default': 'false', 'description': 'Option to return the full text of the case ruling.'}}, 'required': ['docket_number', 'location']}, if you are asked to Find the details of the court case identified by docket number 123456 in Texas. Don't return full text, you will call...
A. court_case.search(docket_number=123456, location=Texas, full_text=False)
B. similar_function(docket_number=123456, location=Texas, full_text=False)
C. court_case.search(wrong_param=value)
D. court_case.search()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: law_case_search.find_historical with description: Search for a historical law case based on specific criteria like the subject and year. and parameters: {'type': 'dict', 'properties': {'subject': {'type': 'string', 'description': "The subject matter of the case, e.g., 'fraud'"}, 'from_year': {'type': 'integer', 'description': 'The start year for the range of the case. The case should happen after this year.'}, 'to_year': {'type': 'integer', 'description': 'The end year for the range of the case. The case should happen before this year.'}}, 'required': ['subject', 'from_year', 'to_year']}, if you are asked to Find a historical law case about fraud from 2010 to 2015., you will call...
A. law_case_search.find_historical(subject=fraud, from_year=2010, to_year=2015)
B. similar_function(subject=fraud, from_year=2010, to_year=2015)
C. law_case_search.find_historical(wrong_param=value)
D. law_case_search.find_historical()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: fetch_law_case_details with description: Fetch details of a specific law case based on case number, year and court. and parameters: {'type': 'dict', 'properties': {'case_number': {'type': 'integer', 'description': 'The specific number of the law case.'}, 'court': {'type': 'string', 'description': 'The city name where the court takes place'}, 'year': {'type': 'integer', 'description': 'The year in which the law case took place.'}}, 'required': ['case_number', 'court', 'year']}, if you are asked to Fetch details of a law case with number 43403 in New York court for year 2018., you will call...
A. similar_function(case_number=43403, court=New York, year=2018)
B. fetch_law_case_details(case_number=43403, court=New York, year=2018)
C. fetch_law_case_details(wrong_param=value)
D. fetch_law_case_details()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: legal_case.fetch with description: Fetch detailed legal case information from database. and parameters: {'type': 'dict', 'properties': {'case_id': {'type': 'string', 'description': 'The ID of the legal case.'}, 'details': {'type': 'boolean', 'description': 'True if need the detail info. '}}, 'required': ['case_id', 'details']}, if you are asked to How to obtain the detailed case information of the 'R vs Adams' legal case?, you will call...
A. similar_function(case_id=R vs Adams, details=True)
B. legal_case.fetch(wrong_param=value)
C. legal_case.fetch(case_id=R vs Adams, details=True)
D. legal_case.fetch()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: law_case_search with description: Search and retrieve law cases based on the topic, timeline, and location. and parameters: {'type': 'dict', 'properties': {'topic': {'type': 'string', 'description': 'The subject matter of the case.'}, 'year_range': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'The start and end year for searching cases.'}, 'location': {'type': 'string', 'description': 'The location where the case is being heard.'}, 'judicial_system': {'type': 'string', 'description': "The specific judicial system in which to search (e.g. 'federal', 'state').", 'default': 'all'}}, 'required': ['topic', 'year_range', 'location']}, if you are asked to Find state law cases related to land disputes in the past 5 years from 2015 to 2021 in New York., you will call...
A. similar_function(topic=land disputes, year_range=[2015, 2021], location=New York, judicial_system=state)
B. law_case_search(wrong_param=value)
C. law_case_search(topic=land disputes, year_range=[2015, 2021], location=New York, judicial_system=state)
D. law_case_search()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_top_cases with description: Retrieve a list of the most influential or landmark cases in a specific field of law. and parameters: {'type': 'dict', 'properties': {'field_of_law': {'type': 'string', 'description': 'The specific field of law e.g., constitutional law, criminal law, etc.'}, 'top_number': {'type': 'integer', 'description': 'The number of top cases to retrieve.'}, 'country': {'type': 'string', 'description': 'The country where the law cases should be retrieved from. Default is United States of America.'}}, 'required': ['field_of_law', 'top_number']}, if you are asked to Get me the top 10 landmark cases in constitutional law in China., you will call...
A. similar_function(field_of_law=constitutional law, top_number=10, country=China)
B. get_top_cases(field_of_law=constitutional law, top_number=10, country=China)
C. get_top_cases(wrong_param=value)
D. get_top_cases()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: lawyer.get_experience with description: Retrieve months of experience of a Lawyer on handling certain type of law cases. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The full name of the Lawyer.'}, 'law_type': {'type': 'string', 'description': 'The type of law case. eg. Bankruptcy'}}, 'required': ['name', 'law_type']}, if you are asked to How many months of experience a Lawyer John Doe has on handling Bankruptcy cases., you will call...
A. lawyer.get_experience(name=John Doe, law_type=Bankruptcy)
B. similar_function(name=John Doe, law_type=Bankruptcy)
C. lawyer.get_experience(wrong_param=value)
D. lawyer.get_experience()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: lawsuit_details.find with description: Find details of lawsuits involving a specific company from a given year. and parameters: {'type': 'dict', 'properties': {'company_name': {'type': 'string', 'description': 'Name of the company.'}, 'year': {'type': 'integer', 'description': 'Year of the lawsuit.'}, 'case_type': {'type': 'string', 'description': "Type of the lawsuit, e.g., 'IPR', 'Patent', 'Commercial', etc. Default is 'all'."}}, 'required': ['company_name', 'year']}, if you are asked to Find details of patent lawsuits involving the company 'Apple Inc.' from the year 2010., you will call...
A. similar_function(company_name=Apple Inc., year=2010, case_type=Patent)
B. lawsuit_details.find(wrong_param=value)
C. lawsuit_details.find(company_name=Apple Inc., year=2010, case_type=Patent)
D. lawsuit_details.find()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_lawsuit_cases with description: Retrieve all lawsuit cases related to a specific company during a particular year. and parameters: {'type': 'dict', 'properties': {'company_name': {'type': 'string', 'description': 'The name of the company.'}, 'year': {'type': 'integer', 'description': 'The specific year to search for lawsuit cases.'}, 'status': {'type': 'string', 'enum': ['open', 'closed', 'all'], 'description': "The status of the lawsuit cases to retrieve. If not specified, defaults to 'all'."}}, 'required': ['company_name', 'year']}, if you are asked to Find all Patent lawsuit cases of Facebook in 2018., you will call...
A. get_lawsuit_cases(company_name=Facebook, year=2018, status=all)
B. similar_function(company_name=Facebook, year=2018, status=all)
C. get_lawsuit_cases(wrong_param=value)
D. get_lawsuit_cases()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_lawsuit_details with description: Retrieve the detailed information about a lawsuit based on its case number and the court location. and parameters: {'type': 'dict', 'properties': {'case_number': {'type': 'string', 'description': 'The case number of the lawsuit.'}, 'court_location': {'type': 'string', 'description': 'The location of the court where the case is filed.'}, 'additional_details': {'type': 'array', 'items': {'type': 'string', 'enum': ['attorneys', 'plaintiffs', 'defendants', 'charges', 'court_updates']}, 'description': 'Optional. Array containing additional details to be fetched. Default is all.'}}, 'required': ['case_number', 'court_location']}, if you are asked to Find details about lawsuit case numbered 'LAX2019080202' in the Los Angeles court., you will call...
A. similar_function(case_number=LAX2019080202, court_location=Los Angeles, additional_details=)
B. get_lawsuit_details(case_number=LAX2019080202, court_location=Los Angeles, additional_details=)
C. get_lawsuit_details(wrong_param=value)
D. get_lawsuit_details()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: find_latest_court_case with description: Find the latest court case between two companies. and parameters: {'type': 'dict', 'properties': {'company1': {'type': 'string', 'description': 'The name of the first company.'}, 'company2': {'type': 'string', 'description': 'The name of the second company.'}, 'country': {'type': 'string', 'description': 'The country in which the court case is located.', 'default': 'USA'}}, 'required': ['company1', 'company2']}, if you are asked to Find the latest court case between Apple and Samsung occured in USA., you will call...
A. similar_function(company1=Apple, company2=Samsung, country=USA)
B. find_latest_court_case(company1=Apple, company2=Samsung, country=USA)
C. find_latest_court_case(wrong_param=value)
D. find_latest_court_case()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: lawsuits_search with description: Search for lawsuits against a specific company within a specific time and location. and parameters: {'type': 'dict', 'properties': {'company_name': {'type': 'string', 'description': 'The name of the company.'}, 'location': {'type': 'string', 'description': 'The location where the lawsuit was filed.'}, 'year': {'type': 'integer', 'description': 'The year when the lawsuit was filed.'}, 'case_type': {'type': 'string', 'description': "The type of the case. Options include: 'civil', 'criminal', 'small_claims', etc. Default is 'all'."}}, 'required': ['company_name', 'location', 'year']}, if you are asked to Find the lawsuits filed against the company Google in California in the year 2020., you will call...
A. similar_function(company_name=Google, location=California, year=2020, case_type=)
B. lawsuits_search(company_name=Google, location=California, year=2020, case_type=)
C. lawsuits_search(wrong_param=value)
D. lawsuits_search()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_lawsuit_details with description: Retrieve details of a lawsuit based on its case number and court location. and parameters: {'type': 'dict', 'properties': {'case_number': {'type': 'string', 'description': 'Case number of the lawsuit.'}, 'court_location': {'type': 'string', 'description': 'The location of the court where the lawsuit was filed.'}, 'with_verdict': {'type': 'boolean', 'description': 'Flag to include verdict details if available. Default is False'}}, 'required': ['case_number', 'court_location']}, if you are asked to Get details of a lawsuit with case number '123456-ABC' filed in Los Angeles court with verdict, you will call...
A. get_lawsuit_details(case_number=123456-ABC, court_location=Los Angeles, with_verdict=True)
B. similar_function(case_number=123456-ABC, court_location=Los Angeles, with_verdict=True)
C. get_lawsuit_details(wrong_param=value)
D. get_lawsuit_details()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: lawsuit_info with description: Retrieves details of a lawsuit given a case number and parameters: {'type': 'dict', 'properties': {'case_number': {'type': 'string', 'description': 'The unique identifier of the lawsuit case'}, 'year': {'type': 'integer', 'description': 'The year in which the lawsuit case was initiated. Default is latest year if not specified.', 'optional': True}, 'location': {'type': 'string', 'description': "The location or court jurisdiction where the case was filed. Default is 'all'.", 'optional': True}}, 'required': ['case_number']}, if you are asked to Retrieve all the lawsuit details for case number XYZ123, you will call...
A. similar_function(case_number=XYZ123, year=, location=)
B. lawsuit_info(wrong_param=value)
C. lawsuit_info(case_number=XYZ123, year=, location=)
D. lawsuit_info()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: lawsuit_search with description: Retrieve all lawsuits involving a particular entity from specified jurisdiction. and parameters: {'type': 'dict', 'properties': {'entity': {'type': 'string', 'description': 'The entity involved in lawsuits.'}, 'county': {'type': 'string', 'description': 'The jurisdiction for the lawsuit search for example Alameda county.'}, 'state': {'type': 'string', 'description': 'The state for the lawsuit search. Default is California.'}}, 'required': ['entity', 'county']}, if you are asked to Search for current lawsuits filed against Apple in Santa Clara County., you will call...
A. similar_function(entity=Apple, county=Santa Clara County, state=California)
B. lawsuit_search(entity=Apple, county=Santa Clara County, state=California)
C. lawsuit_search(wrong_param=value)
D. lawsuit_search()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: lawsuit.check_case with description: Verify the details of a lawsuit case and check its status using case ID. and parameters: {'type': 'dict', 'properties': {'case_id': {'type': 'integer', 'description': 'The identification number of the lawsuit case.'}, 'closed_status': {'type': 'boolean', 'description': 'The status of the lawsuit case to be verified.'}}, 'required': ['case_id', 'closed_status']}, if you are asked to I need the details of the lawsuit case with case ID of 1234 and verify if it's already closed., you will call...
A. similar_function(case_id=1234, closed_status=True)
B. lawsuit.check_case(case_id=1234, closed_status=True)
C. lawsuit.check_case(wrong_param=value)
D. lawsuit.check_case()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: detailed_weather_forecast with description: Retrieve a detailed weather forecast for a specific location and duration including optional precipitation details. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city name that you want to get the weather for.'}, 'duration': {'type': 'integer', 'description': 'Duration in hours for the detailed forecast.'}, 'include_precipitation': {'type': 'boolean', 'description': 'Whether to include precipitation data in the forecast. Default is false.'}}, 'required': ['location', 'duration']}, if you are asked to What will be the weather in New York in the next 72 hours including the precipitation?, you will call...
A. similar_function(location=New York, duration=72, include_precipitation=True)
B. detailed_weather_forecast(wrong_param=value)
C. detailed_weather_forecast(location=New York, duration=72, include_precipitation=True)
D. detailed_weather_forecast()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: current_weather_condition with description: Get the current weather conditions of a specific city including temperature and humidity. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The city that you want to get the current weather conditions for.'}, 'country': {'type': 'string', 'description': 'The country of the city you specified.'}, 'measurement': {'type': 'string', 'description': "You can specify which unit to display the temperature in, 'c' for Celsius, 'f' for Fahrenheit. Default is 'c'."}}, 'required': ['city', 'country']}, if you are asked to What is the temperature in celsius and humidity level of Tokyo, Japan right now?, you will call...
A. similar_function(city=Tokyo, country=Japan, measurement=c)
B. current_weather_condition(wrong_param=value)
C. current_weather_condition(city=Tokyo, country=Japan, measurement=c)
D. current_weather_condition()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_current_weather with description: Retrieves the current temperature and humidity for a specific location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city name to get the weather for.'}, 'include_temperature': {'type': 'boolean', 'description': 'Whether to include the temperature in the result. Default is true.'}, 'include_humidity': {'type': 'boolean', 'description': 'Whether to include the humidity in the result. Default is true.'}}, 'required': ['location']}, if you are asked to What's the current temperature and humidity in Seattle, Washington?, you will call...
A. similar_function(location=Seattle, include_temperature=True, include_humidity=True)
B. get_current_weather(wrong_param=value)
C. get_current_weather()
D. get_current_weather(location=Seattle, include_temperature=True, include_humidity=True)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: weather.humidity_forecast with description: Retrieve a humidity forecast for a specific location and time frame. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city that you want to get the humidity for.'}, 'days': {'type': 'integer', 'description': 'Number of days for the forecast.'}, 'min_humidity': {'type': 'integer', 'description': 'Minimum level of humidity (in percentage) to filter the result. Default is 0.'}}, 'required': ['location', 'days']}, if you are asked to What is the humidity level in Miami, Florida in the upcoming 7 days?, you will call...
A. similar_function(location=Miami, days=7, min_humidity=)
B. weather.humidity_forecast(location=Miami, days=7, min_humidity=)
C. weather.humidity_forecast(wrong_param=value)
D. weather.humidity_forecast()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: weather_forecast_detailed with description: Retrieve a detailed weather forecast for a specific city like Boston and time frame. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city that you want to get the weather for.'}, 'days': {'type': 'integer', 'description': 'Number of days for the forecast.'}, 'details': {'type': 'boolean', 'description': 'Provide detailed weather information or not.', 'default': False}}, 'required': ['location', 'days']}, if you are asked to Get weather information for New York, USA for the next 3 days with details., you will call...
A. weather_forecast_detailed(location=New York, days=3, details=True)
B. similar_function(location=New York, days=3, details=True)
C. weather_forecast_detailed(wrong_param=value)
D. weather_forecast_detailed()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: park_information with description: Retrieve the basic information such as elevation and area of a national park. and parameters: {'type': 'dict', 'properties': {'park_name': {'type': 'string', 'description': 'The name of the national park.'}, 'information': {'type': 'array', 'items': {'type': 'string', 'enum': ['Elevation', 'Area', 'Location', 'Established Year']}, 'description': 'The type of information you want about the park.'}}, 'required': ['park_name', 'information']}, if you are asked to What's the elevation and area of Yellowstone National Park?, you will call...
A. similar_function(park_name=Yellowstone, information=['Elevation', 'Area'])
B. park_information(wrong_param=value)
C. park_information()
D. park_information(park_name=Yellowstone, information=['Elevation', 'Area'])

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: locate_tallest_mountains with description: Find the tallest mountains within a specified radius of a location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city from which to calculate distance.'}, 'radius': {'type': 'integer', 'description': 'The radius within which to find mountains, measured in kilometers.'}, 'amount': {'type': 'integer', 'description': 'The number of mountains to find, listed from tallest to smallest.'}}, 'required': ['location', 'radius', 'amount']}, if you are asked to Find me the 5 tallest mountains within 50km of Denver, Colorado., you will call...
A. similar_function(location=Denver, Colorado, radius=50, amount=5)
B. locate_tallest_mountains(wrong_param=value)
C. locate_tallest_mountains()
D. locate_tallest_mountains(location=Denver, Colorado, radius=50, amount=5)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_slope_gradient with description: Calculate the slope gradient between two geographical coordinates. and parameters: {'type': 'dict', 'properties': {'point1': {'type': 'array', 'items': {'type': 'float'}, 'description': 'The geographic coordinates for the first point [Latitude, Longitude].'}, 'point2': {'type': 'array', 'items': {'type': 'float'}, 'description': 'The geographic coordinates for the second point [Latitude, Longitude].'}, 'unit': {'type': 'string', 'enum': ['degree', 'percent', 'ratio'], 'description': "The unit for the slope gradient. Default is 'degree'."}}, 'required': ['point1', 'point2']}, if you are asked to Calculate the slope gradient in degree between two points on a landscape with coordinates (40.7128, -74.0060) and (34.0522, -118.2437)., you will call...
A. similar_function(point1=[40.7128, -74.006], point2=[34.0522, -118.2437], unit=degree)
B. calculate_slope_gradient(wrong_param=value)
C. calculate_slope_gradient()
D. calculate_slope_gradient(point1=[40.7128, -74.006], point2=[34.0522, -118.2437], unit=degree)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: local_nursery.find with description: Locate local nurseries based on location and plant types availability. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city or locality where the nursery needs to be located.'}, 'plant_types': {'type': 'array', 'items': {'type': 'string', 'enum': ['Annual', 'Perennial', 'Shrub', 'Tree', 'Herbs', 'Fruits']}, 'description': 'Type of plants the nursery should provide.'}}, 'required': ['location', 'plant_types']}, if you are asked to Find the best local nurseries in Toronto with a good variety of annual plants., you will call...
A. similar_function(location=Toronto, plant_types=['Annual'])
B. local_nursery.find(location=Toronto, plant_types=['Annual'])
C. local_nursery.find(wrong_param=value)
D. local_nursery.find()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_plants_for_slope with description: Retrieve the list of plants suitable for slope based on erosion control ability. and parameters: {'type': 'dict', 'properties': {'slope_type': {'type': 'string', 'description': 'The type of slope like steep, moderate etc.'}, 'num_results': {'type': 'integer', 'description': 'The number of top results needed. Default is 5.'}}, 'required': ['slope_type', 'num_results']}, if you are asked to What are the top three plants suitable for a hill slope in terms of erosion prevention?, you will call...
A. similar_function(slope_type=hill, num_results=3)
B. get_plants_for_slope(wrong_param=value)
C. get_plants_for_slope()
D. get_plants_for_slope(slope_type=hill, num_results=3)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_carbon_footprint with description: Calculate the estimated carbon footprint of a lifestyle based on factors such as daily driving distance, weekly meat consumption, and yearly trash production. and parameters: {'type': 'dict', 'properties': {'daily_miles': {'type': 'integer', 'description': 'The daily driving distance in miles.'}, 'meat_meals_per_week': {'type': 'integer', 'description': 'The number of meat-based meals consumed per week.'}, 'annual_trash_weight': {'type': 'integer', 'description': 'The yearly weight of trash production in pounds.'}, 'flights_per_year': {'type': 'integer', 'description': 'The number of flights taken per year. Default is 0.'}}, 'required': ['daily_miles', 'meat_meals_per_week', 'annual_trash_weight']}, if you are asked to Calculate the carbon footprint of my lifestyle, assuming I drive 20 miles a day, consume 3 meat meals a week, and produce 500 lbs of trash in a year., you will call...
A. similar_function(daily_miles=20, meat_meals_per_week=3, annual_trash_weight=500, flights_per_year=)
B. calculate_carbon_footprint(daily_miles=20, meat_meals_per_week=3, annual_trash_weight=500, flights_per_year=)
C. calculate_carbon_footprint(wrong_param=value)
D. calculate_carbon_footprint()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: air_quality with description: Retrieve the air quality index for a specific location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city that you want to get the air quality index for.'}, 'date': {'type': 'string', 'description': 'The date you want to get the air quality index for. Default is today.'}}, 'required': ['location', 'date']}, if you are asked to What is the air quality index in London 2022/08/16?, you will call...
A. air_quality(location=London, date=2022-08-16)
B. similar_function(location=London, date=2022-08-16)
C. air_quality(wrong_param=value)
D. air_quality()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_air_quality_index with description: Retrieve the air quality index at a specified location and time. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The location to get the air quality index for.'}, 'time': {'type': 'string', 'description': 'The specific time to check the air quality. Default is the current time.'}}, 'required': ['location', 'time']}, if you are asked to Find the air quality index in San Diego at 12pm., you will call...
A. similar_function(location=San Diego, time=12pm)
B. get_air_quality_index(location=San Diego, time=12pm)
C. get_air_quality_index(wrong_param=value)
D. get_air_quality_index()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_daily_water_intake with description: Calculate the recommended daily water intake for a person based on their weight. and parameters: {'type': 'dict', 'properties': {'weight': {'type': 'integer', 'description': 'The weight of the person in kilograms.'}, 'activity_level': {'type': 'string', 'description': "The level of physical activity of the person. Default is 'moderate'."}, 'climate': {'type': 'string', 'description': "The climate of the area where the person lives. Default is 'temperate'."}}, 'required': ['weight']}, if you are asked to Calculate the required water daily intake for a person with weight 70 kg., you will call...
A. similar_function(weight=70, activity_level=, climate=)
B. calculate_daily_water_intake(weight=70, activity_level=, climate=)
C. calculate_daily_water_intake(wrong_param=value)
D. calculate_daily_water_intake()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: environmental_data.air_quality_index with description: Retrieves Air Quality Index (AQI) for specified location over a number of days. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'Name of the city or town to retrieve air quality index for.'}, 'days': {'type': 'integer', 'description': 'Number of days for which to retrieve data. If not provided, default to today.'}}, 'required': ['location']}, if you are asked to Find air quality index in San Jose for next three days., you will call...
A. similar_function(location=San Jose, days=3)
B. environmental_data.air_quality_index(wrong_param=value)
C. environmental_data.air_quality_index()
D. environmental_data.air_quality_index(location=San Jose, days=3)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_emissions with description: Calculates the annual carbon dioxide emissions produced by a vehicle based on the distance traveled, the fuel type and the fuel efficiency of the vehicle. and parameters: {'type': 'dict', 'properties': {'distance': {'type': 'integer', 'description': 'The distance travelled in miles.'}, 'fuel_type': {'type': 'string', 'description': 'Type of fuel used by the vehicle.'}, 'fuel_efficiency': {'type': 'float', 'description': "The vehicle's fuel efficiency in miles per gallon."}, 'efficiency_reduction': {'type': 'integer', 'description': 'The percentage decrease in fuel efficiency per year (optional). Default is 0'}}, 'required': ['distance', 'fuel_type', 'fuel_efficiency']}, if you are asked to How much CO2 is produced annually by a gas-fueled car that travels 12,000 miles per year, with fuel efficiency of 25 MPG ?, you will call...
A. similar_function(distance=12000, fuel_type=gas, fuel_efficiency=, efficiency_reduction=0)
B. calculate_emissions(wrong_param=value)
C. calculate_emissions(distance=12000, fuel_type=gas, fuel_efficiency=, efficiency_reduction=0)
D. calculate_emissions()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: estimate_population with description: Estimate the population of a particular species in a given country. and parameters: {'type': 'dict', 'properties': {'species': {'type': 'string', 'description': 'The species for which population needs to be estimated.'}, 'country': {'type': 'string', 'description': 'The country where the species lives.'}, 'year': {'type': 'integer', 'description': 'The year for which population estimate is sought. Default is the current year.'}}, 'required': ['species', 'country']}, if you are asked to Estimate the population of pandas in the wild in China., you will call...
A. estimate_population(species=panda, country=China, year=)
B. similar_function(species=panda, country=China, year=)
C. estimate_population(wrong_param=value)
D. estimate_population()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_emission_savings with description: Calculate potential greenhouse gas emissions saved by switching to renewable energy sources. and parameters: {'type': 'dict', 'properties': {'energy_type': {'type': 'string', 'description': 'Type of the renewable energy source.'}, 'usage_duration': {'type': 'integer', 'description': 'Usage duration in months.'}, 'region': {'type': 'string', 'description': "The region where you use energy. Default is 'Texas'."}}, 'required': ['energy_type', 'usage_duration']}, if you are asked to How many greenhouse gas emissions would I save if I switched to renewable energy sources for 3 months in California?, you will call...
A. similar_function(energy_type=renewable, usage_duration=3, region=California)
B. calculate_emission_savings(wrong_param=value)
C. calculate_emission_savings()
D. calculate_emission_savings(energy_type=renewable, usage_duration=3, region=California)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_air_quality with description: Retrieve real-time air quality and pollution data for a specific location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city that you want to get the air quality data for.'}, 'detail': {'type': 'boolean', 'description': 'If true, additional data like PM2.5, PM10, ozone levels, and pollution sources will be retrieved. Default is false.'}, 'historical': {'type': 'string', 'description': "Optional date (in 'YYYY-MM-DD' format) to retrieve historical data.", 'default': 'today'}}, 'required': ['location']}, if you are asked to Can you find me the latest information about air quality index and pollution data for Chicago?, you will call...
A. similar_function(location=Chicago, detail=True, historical=)
B. get_air_quality(wrong_param=value)
C. get_air_quality()
D. get_air_quality(location=Chicago, detail=True, historical=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: restaurant.find_nearby with description: Locate nearby restaurants based on specific criteria like cuisine type. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. Seattle, WA'}, 'cuisine': {'type': 'string', 'description': 'Preferred type of cuisine in restaurant.'}, 'max_distance': {'type': 'integer', 'description': 'Maximum distance (in miles) within which to search for restaurants. Default is 5.'}}, 'required': ['location', 'cuisine']}, if you are asked to Find restaurants near me within 10 miles that offer Chinese cuisine in Seattle., you will call...
A. similar_function(location=Seattle, cuisine=Chinese, max_distance=10)
B. restaurant.find_nearby(location=Seattle, cuisine=Chinese, max_distance=10)
C. restaurant.find_nearby(wrong_param=value)
D. restaurant.find_nearby()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_traffic_info with description: Retrieve current traffic conditions for a specified route. and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'The starting point of the route.'}, 'end_location': {'type': 'string', 'description': 'The destination of the route.'}, 'mode': {'type': 'string', 'enum': ['driving', 'walking', 'bicycling', 'transit'], 'description': "Preferred method of transportation, default to 'driving'."}}, 'required': ['start_location', 'end_location']}, if you are asked to Find out the current traffic situation from Boston driving to New York., you will call...
A. similar_function(start_location=Boston, end_location=New York, mode=driving)
B. get_traffic_info(wrong_param=value)
C. get_traffic_info()
D. get_traffic_info(start_location=Boston, end_location=New York, mode=driving)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: parks.find_nearby with description: Locate nearby parks based on specific criteria like tennis court availability. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. London, UK'}, 'amenities': {'type': 'array', 'items': {'type': 'string', 'enum': ['Tennis Court', 'Picnic Area', 'Playground', 'Running Track']}, 'description': "Preferred amenities in park. Default is ['Running Track']"}}, 'required': ['location']}, if you are asked to Find the nearest park with a tennis court in London., you will call...
A. similar_function(location=London, amenities=['Tennis Court'])
B. parks.find_nearby(location=London, amenities=['Tennis Court'])
C. parks.find_nearby(wrong_param=value)
D. parks.find_nearby()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_shortest_distance with description: Calculate the shortest driving distance between two locations. and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'The starting location for the drive.'}, 'end_location': {'type': 'string', 'description': 'The destination location for the drive.'}, 'route_preference': {'type': 'string', 'enum': ['Shortest', 'Scenic'], 'description': 'The preferred type of route.'}}, 'required': ['start_location', 'end_location', 'route_preference']}, if you are asked to Get the shortest driving distance between New York, USA and Miami, USA., you will call...
A. similar_function(start_location=New York, USA, end_location=Miami, USA, route_preference=Shortest)
B. calculate_shortest_distance(wrong_param=value)
C. calculate_shortest_distance()
D. calculate_shortest_distance(start_location=New York, USA, end_location=Miami, USA, route_preference=Shortest)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: map_service.get_directions with description: Retrieve directions from a starting location to an ending location, including options for route preferences. and parameters: {'type': 'dict', 'properties': {'start': {'type': 'string', 'description': 'Starting location for the route.'}, 'end': {'type': 'string', 'description': 'Ending location for the route.'}, 'avoid': {'type': 'array', 'items': {'type': 'string', 'enum': ['tolls', 'highways', 'ferries']}, 'description': "Route features to avoid. Default is ['highways', 'ferries']"}}, 'required': ['start', 'end']}, if you are asked to Get me the directions from New York to Los Angeles avoiding highways and toll roads., you will call...
A. similar_function(start=New York, end=Los Angeles, avoid=['highways', 'tolls'])
B. map_service.get_directions(start=New York, end=Los Angeles, avoid=['highways', 'tolls'])
C. map_service.get_directions(wrong_param=value)
D. map_service.get_directions()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: public_library.find_nearby with description: Locate nearby public libraries based on specific criteria like English fiction availability and Wi-Fi. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. Boston, MA'}, 'facilities': {'type': 'array', 'items': {'type': 'string', 'enum': ['Wi-Fi', 'Reading Room', 'Fiction', 'Children Section', 'Cafe']}, 'description': 'Facilities and sections in public library.'}}, 'required': ['location', 'facilities']}, if you are asked to Locate the nearest public library in Boston, Massachusetts with English fiction section and free Wi-Fi., you will call...
A. similar_function(location=Boston, MA, facilities=['Fiction', 'Wi-Fi'])
B. public_library.find_nearby(wrong_param=value)
C. public_library.find_nearby()
D. public_library.find_nearby(location=Boston, MA, facilities=['Fiction', 'Wi-Fi'])

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_news with description: Fetches the latest news on a specific topic. and parameters: {'type': 'dict', 'properties': {'topic': {'type': 'string', 'description': 'The subject for the news topic.'}, 'quantity': {'type': 'integer', 'description': 'Number of articles to fetch.'}, 'region': {'type': 'string', 'description': "The geographical region for the news. Default is 'US'."}}, 'required': ['topic', 'quantity']}, if you are asked to Get 5 latest news on Bitcoin in US, you will call...
A. similar_function(topic=Bitcoin, quantity=5, region=US)
B. get_news(wrong_param=value)
C. get_news()
D. get_news(topic=Bitcoin, quantity=5, region=US)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: send_email with description: Send an email to the specified email address. and parameters: {'type': 'dict', 'properties': {'to': {'type': 'string', 'description': 'The email address to send to.'}, 'subject': {'type': 'string', 'description': 'The subject of the email.'}, 'body': {'type': 'string', 'description': 'The body content of the email.'}, 'cc': {'type': 'string', 'description': 'The email address to carbon copy. Default is empty if not specified.'}, 'bcc': {'type': 'string', 'description': 'The email address to blind carbon copy. Default is empty if not specified.'}}, 'required': ['to', 'subject', 'body']}, if you are asked to Send an email to John Doe at john.doe@example.com with the subject 'Meeting' and body 'Let's meet at 10 AM tomorrow'., you will call...
A. similar_function(to=john.doe@example.com, subject=Meeting, body=Let's meet at 10 AM tomorrow, cc=, bcc=)
B. send_email(wrong_param=value)
C. send_email()
D. send_email(to=john.doe@example.com, subject=Meeting, body=Let's meet at 10 AM tomorrow, cc=, bcc=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_stock_info with description: Retrieves information about a specific stock based on company's name. and parameters: {'type': 'dict', 'properties': {'company_name': {'type': 'string', 'description': 'The name of the company.'}, 'detail_level': {'type': 'string', 'description': "Level of detail for stock information. Can be 'summary' or 'detailed'."}, 'market': {'type': 'string', 'description': "The stock market of interest. Default is 'NASDAQ'"}}, 'required': ['company_name', 'detail_level']}, if you are asked to Give me detail information about stocks of Apple Inc., you will call...
A. similar_function(company_name=Apple Inc., detail_level=detailed, market=)
B. get_stock_info(company_name=Apple Inc., detail_level=detailed, market=)
C. get_stock_info(wrong_param=value)
D. get_stock_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: flight.book with description: Book a direct flight for a specific date and time from departure location to destination location. and parameters: {'type': 'dict', 'properties': {'departure_location': {'type': 'string', 'description': 'The location you are departing from.'}, 'destination_location': {'type': 'string', 'description': 'The location you are flying to.'}, 'date': {'type': 'string', 'description': 'The date of the flight. Accepts standard date format e.g., 2022-04-28.'}, 'time': {'type': 'string', 'description': "Preferred time of flight. Default is 'morning'."}, 'direct_flight': {'type': 'boolean', 'description': 'If set to true, only direct flights will be searched. Default is false.'}}, 'required': ['departure_location', 'destination_location', 'date']}, if you are asked to Book a direct flight from San Francisco to London for 2022-04-27 afternoon, you will call...
A. similar_function(departure_location=San Francisco, destination_location=London, date=2022-04-27, time=afternoon, direct_flight=True)
B. flight.book(wrong_param=value)
C. flight.book(departure_location=San Francisco, destination_location=London, date=2022-04-27, time=afternoon, direct_flight=True)
D. flight.book()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: event_finder.find_upcoming with description: Find upcoming events of a specific genre in a given location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state where the search will take place, e.g. New York, NY.'}, 'genre': {'type': 'string', 'description': 'The genre of events.'}, 'days_ahead': {'type': 'integer', 'description': 'The number of days from now to include in the search.', 'default': 7}}, 'required': ['location', 'genre']}, if you are asked to Search for upcoming month rock concerts in New York., you will call...
A. similar_function(location=New York, genre=Rock, days_ahead=30)
B. event_finder.find_upcoming(wrong_param=value)
C. event_finder.find_upcoming(location=New York, genre=Rock, days_ahead=30)
D. event_finder.find_upcoming()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: movie_details.brief with description: This function retrieves a brief about a specified movie. and parameters: {'type': 'dict', 'properties': {'title': {'type': 'string', 'description': 'Title of the movie'}, 'extra_info': {'type': 'boolean', 'description': 'Option to get additional information like Director, Cast, Awards etc.', 'default': 'false'}}, 'required': ['title']}, if you are asked to Give me a brief on movie 'Interstellar', you will call...
A. movie_details.brief(title=Interstellar, extra_info=)
B. similar_function(title=Interstellar, extra_info=)
C. movie_details.brief(wrong_param=value)
D. movie_details.brief()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: sentiment_analysis with description: Perform sentiment analysis on a given piece of text. and parameters: {'type': 'dict', 'properties': {'text': {'type': 'string', 'description': 'The text on which to perform sentiment analysis.'}, 'language': {'type': 'string', 'description': 'The language in which the text is written.'}}, 'required': ['text', 'language']}, if you are asked to Analyze the sentiment of a customer review 'I love the food here! It's always fresh and delicious.'., you will call...
A. similar_function(text=I love the food here! It's always fresh and delicious., language=english)
B. sentiment_analysis(wrong_param=value)
C. sentiment_analysis()
D. sentiment_analysis(text=I love the food here! It's always fresh and delicious., language=english)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: fMRI.analyze with description: This function takes in fMRI data to output analyzed data. and parameters: {'type': 'dict', 'properties': {'data_source': {'type': 'string', 'description': 'The path where the data is stored.'}, 'sequence_type': {'type': 'string', 'description': 'Type of fMRI sequence'}, 'smooth': {'type': 'integer', 'description': 'Spatial smoothing FWHM. In mm.'}, 'voxel_size': {'type': 'integer', 'description': 'Size of isotropic voxels in mm.', 'default': 3}}, 'required': ['data_source', 'sequence_type', 'smooth']}, if you are asked to Analyze my fMRI data in ~/data/myfMRI.nii from a multi-band sequence, that is smoothed at 6mm with an isotropic voxel size of 2mm., you will call...
A. similar_function(data_source=~/data/myfMRI.nii, sequence_type=multi-band, smooth=6, voxel_size=2)
B. fMRI.analyze(wrong_param=value)
C. fMRI.analyze()
D. fMRI.analyze(data_source=~/data/myfMRI.nii, sequence_type=multi-band, smooth=6, voxel_size=2)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: patient.get_mri_report with description: Fetch the brain MRI report of the patient for a given status. and parameters: {'type': 'dict', 'properties': {'patient_id': {'type': 'string', 'description': 'The patient identifier.'}, 'mri_type': {'type': 'string', 'description': "Type of the MRI. Default to be 'brain'.", 'enum': ['brain', 'spinal', 'chest', 'abdominal']}, 'status': {'type': 'string', 'description': "Status of the report, could be 'in progress', 'concluded' or 'draft'.", 'enum': ['in progress', 'concluded', 'draft']}}, 'required': ['patient_id', 'status']}, if you are asked to Given patient with id 546382, retrieve their brain MRI report with the status 'concluded'., you will call...
A. similar_function(patient_id=546382, mri_type=brain, status=concluded)
B. patient.get_mri_report(patient_id=546382, mri_type=brain, status=concluded)
C. patient.get_mri_report(wrong_param=value)
D. patient.get_mri_report()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_neuron_coordinates with description: Retrieve the coordinates of the specified neuron in the rat's brain. and parameters: {'type': 'dict', 'properties': {'neuron_type': {'type': 'string', 'description': 'Type of neuron to find. For instance, GABA, Glutamate, etc.'}, 'brain_region': {'type': 'string', 'description': 'The region of the brain to consider.', 'default': 'All'}}, 'required': ['neuron_type', 'brain_region']}, if you are asked to What are the coordinates of the neuron in a rat's all part of the brain that produces GABA neurotransmitters?, you will call...
A. similar_function(neuron_type=GABA, brain_region=All)
B. get_neuron_coordinates(neuron_type=GABA, brain_region=All)
C. get_neuron_coordinates(wrong_param=value)
D. get_neuron_coordinates()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_neuronal_activity with description: Calculate the neuronal activity (rate of firing) based on a given input synaptic rate, weight of inputs, and decay rate. Higher input or weight increases firing rate and higher decay rate decreases it. and parameters: {'type': 'dict', 'properties': {'input_synaptic_rate': {'type': 'integer', 'description': 'The synaptic input rate, usually represented as number of inputs per second.'}, 'weight': {'type': 'float', 'description': "The weight of the input, denoting its influence on the neuron's state. Default is 1.0."}, 'decay_rate': {'type': 'float', 'description': "The rate at which the neuron's potential decays in the absence of inputs."}}, 'required': ['input_synaptic_rate', 'decay_rate']}, if you are asked to Calculate the neuronal activity based on synaptic input rate of 200 and weight 0.5 and decay rate of 0.1., you will call...
A. similar_function(input_synaptic_rate=200, weight=0.5, decay_rate=0.1)
B. calculate_neuronal_activity(wrong_param=value)
C. calculate_neuronal_activity(input_synaptic_rate=200, weight=0.5, decay_rate=0.1)
D. calculate_neuronal_activity()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: population_growth_estimate with description: Estimate the future population growth of a specific location over a specified time period. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city that you want to estimate the population growth for.'}, 'years': {'type': 'integer', 'description': 'Number of years into the future for the estimate.'}, 'rate': {'type': 'float', 'description': 'Expected annual growth rate in percentage. Default is 1.2.'}}, 'required': ['location', 'years']}, if you are asked to What will be the population growth in London over the next five years?, you will call...
A. population_growth_estimate(location=London, years=5, rate=)
B. similar_function(location=London, years=5, rate=)
C. population_growth_estimate(wrong_param=value)
D. population_growth_estimate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: calculate_bmi with description: Calculate the Body Mass Index based on given weight and height. and parameters: {'type': 'dict', 'properties': {'weight': {'type': 'integer', 'description': 'The weight of a person in kilograms.'}, 'height': {'type': 'integer', 'description': 'The height of a person in centimeters.'}, 'unit': {'type': 'string', 'description': "Optional. The measurement system to be used for the result. The default is 'metric'."}}, 'required': ['weight', 'height']}, if you are asked to Can you calculate my Body Mass Index (BMI) given my weight is 70 kg and height is 180 cm?, you will call...
A. similar_function(weight=70, height=180, unit=)
B. calculate_bmi(wrong_param=value)
C. calculate_bmi(weight=70, height=180, unit=)
D. calculate_bmi()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: group_dynamics.pattern with description: Examine the social dynamics and interactions within a group based on the personality traits and group size. and parameters: {'type': 'dict', 'properties': {'total': {'type': 'integer', 'description': 'The total group size.'}, 'extroverts': {'type': 'integer', 'description': 'The number of extroverted members in the group.'}, 'introverts': {'type': 'integer', 'description': 'The number of introverted members in the group.'}}, 'required': ['total', 'extroverts', 'introverts']}, if you are asked to Find social behaviors and patterns in a group size of 50 with extroverted members being 15 and introverted members being 35., you will call...
A. similar_function(total=50, extroverts=15, introverts=35)
B. group_dynamics.pattern(wrong_param=value)
C. group_dynamics.pattern()
D. group_dynamics.pattern(total=50, extroverts=15, introverts=35)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: social_media_analytics.most_followed with description: Find the most followed Twitter user related to certain topics. and parameters: {'type': 'dict', 'properties': {'topic': {'type': 'string', 'description': 'The main topic of interest.'}, 'sub_topics': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Sub-topics related to main topic. Default is empty.'}, 'region': {'type': 'string', 'description': "Region of interest for twitter search. Default is 'all'."}}, 'required': ['topic']}, if you are asked to Find the most followed person on twitter who tweets about psychology related to behaviour and group dynamics., you will call...
A. social_media_analytics.most_followed(topic=psychology, sub_topics=['behaviour', 'group dynamics'], region=)
B. similar_function(topic=psychology, sub_topics=['behaviour', 'group dynamics'], region=)
C. social_media_analytics.most_followed(wrong_param=value)
D. social_media_analytics.most_followed()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: psych_research.get_preference with description: Gathers research data on public preference between two options, based on societal category. and parameters: {'type': 'dict', 'properties': {'category': {'type': 'string', 'description': 'The societal category the preference data is about. E.g. reading, transportation, food'}, 'option_one': {'type': 'string', 'description': 'The first option people could prefer.'}, 'option_two': {'type': 'string', 'description': 'The second option people could prefer.'}, 'demographic': {'type': 'string', 'description': 'Specific demographic of society to narrow down the research.', 'default': 'all'}}, 'required': ['category', 'option_one', 'option_two']}, if you are asked to What is the percentage of population preferring digital reading over physical books?, you will call...
A. similar_function(category=reading, option_one=digital reading, option_two=physical book, demographic=)
B. psych_research.get_preference(category=reading, option_one=digital reading, option_two=physical book, demographic=)
C. psych_research.get_preference(wrong_param=value)
D. psych_research.get_preference()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_zodiac_compatibility with description: Retrieve the compatibility score between two Zodiac signs. and parameters: {'type': 'dict', 'properties': {'sign1': {'type': 'string', 'description': 'The first Zodiac sign.'}, 'sign2': {'type': 'string', 'description': 'The second Zodiac sign.'}, 'scale': {'type': 'string', 'enum': ['percentage', '0-10 scale'], 'description': "The scale on which compatibility should be shown. Default is 'percentage'."}}, 'required': ['sign1', 'sign2']}, if you are asked to Find the compatibility score in percentage of Aries with Gemini., you will call...
A. get_zodiac_compatibility(sign1=Aries, sign2=Gemini, scale=percentage)
B. similar_function(sign1=Aries, sign2=Gemini, scale=percentage)
C. get_zodiac_compatibility(wrong_param=value)
D. get_zodiac_compatibility()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_personality_traits with description: Retrieve the personality traits for a specific personality type, including their strengths and weaknesses. and parameters: {'type': 'dict', 'properties': {'type': {'type': 'string', 'description': 'The personality type.'}, 'traits': {'type': 'array', 'items': {'type': 'string', 'enum': ['strengths', 'weaknesses']}, 'description': "List of traits to be retrieved, default is ['strengths']."}}, 'required': ['type']}, if you are asked to Get me strength and weakness traits for ENFJ personality type., you will call...
A. get_personality_traits(type=ENFJ, traits=['strengths', 'weaknesses'])
B. similar_function(type=ENFJ, traits=['strengths', 'weaknesses'])
C. get_personality_traits(wrong_param=value)
D. get_personality_traits()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_personality_traits with description: Retrieve the common personality traits of people based on their hobbies or activities. and parameters: {'type': 'dict', 'properties': {'hobby': {'type': 'string', 'description': 'The hobby or activity of interest.'}, 'trait_count': {'type': 'integer', 'description': 'The number of top traits to return, default is 5'}}, 'required': ['hobby']}, if you are asked to Find three personality traits of people who like jogging., you will call...
A. similar_function(hobby=jogging, trait_count=3)
B. get_personality_traits(wrong_param=value)
C. get_personality_traits(hobby=jogging, trait_count=3)
D. get_personality_traits()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_bigfive_scores with description: Retrieve Big Five Personality trait scores based on individual's behavioural characteristics. and parameters: {'type': 'dict', 'properties': {'characteristics': {'type': 'array', 'items': {'type': 'string'}, 'description': "List of user's behavioural characteristics."}, 'scale': {'type': 'string', 'enum': ['high', 'medium', 'low'], 'description': 'The scoring scale of traits (default is medium).'}}, 'required': ['characteristics']}, if you are asked to What's my Big Five Personality trait scores given that I am efficient, organized, easy going and compassionate?, you will call...
A. similar_function(characteristics=['efficient', 'organized', 'easy going', 'compassionate'], scale=medium)
B. get_bigfive_scores(wrong_param=value)
C. get_bigfive_scores()
D. get_bigfive_scores(characteristics=['efficient', 'organized', 'easy going', 'compassionate'], scale=medium)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: historic_leader_search with description: Retrieve information about a historical leader given a location and date. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The country or region in question.'}, 'date': {'type': 'integer', 'description': 'The year being queried.'}, 'title': {'type': 'string', 'description': "The official title of the position. Default is 'King'."}}, 'required': ['location', 'date']}, if you are asked to Who was the King of France in 1510?, you will call...
A. historic_leader_search(location=France, date=1510, title=King)
B. similar_function(location=France, date=1510, title=King)
C. historic_leader_search(wrong_param=value)
D. historic_leader_search()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: history.get_key_events with description: Retrieve key historical events within a specific period for a certain country. and parameters: {'type': 'dict', 'properties': {'country': {'type': 'string', 'description': 'The name of the country for which history is queried.'}, 'start_year': {'type': 'integer', 'description': 'Start year of the period for which history is queried.'}, 'end_year': {'type': 'integer', 'description': 'End year of the period for which history is queried.'}, 'event_type': {'type': 'array', 'items': {'type': 'string', 'enum': ['War', 'Revolutions', 'Diplomacy', 'Economy']}, 'description': "Types of event. Default to 'all', which all types will be considered."}}, 'required': ['country', 'start_year', 'end_year']}, if you are asked to Provide key war events in German history from 1871 to 1945., you will call...
A. similar_function(country=Germany, start_year=1871, end_year=1945, event_type=['War'])
B. history.get_key_events(country=Germany, start_year=1871, end_year=1945, event_type=['War'])
C. history.get_key_events(wrong_param=value)
D. history.get_key_events()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: monarch.getMonarchOfYear with description: Retrieve the monarch of a specific location during a specified year. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The location (e.g., country) whose monarch needs to be found.'}, 'year': {'type': 'integer', 'description': 'The year to search the monarch.'}, 'fullName': {'type': 'boolean', 'default': False, 'description': 'If true, returns the full name and title of the monarch.'}}, 'required': ['location', 'year']}, if you are asked to What was the full name king of England in 1800?, you will call...
A. similar_function(location=England, year=1800, fullName=True)
B. monarch.getMonarchOfYear(location=England, year=1800, fullName=True)
C. monarch.getMonarchOfYear(wrong_param=value)
D. monarch.getMonarchOfYear()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: european_history.get_event_date with description: Retrieve the date of a specific event in European history. and parameters: {'type': 'dict', 'properties': {'event_name': {'type': 'string', 'description': 'The name of the event.'}, 'format': {'type': 'string', 'description': "Optional format of the returned date. Default is 'MM-DD-YYYY'."}}, 'required': ['event_name']}, if you are asked to When did the Treaty of Tordesillas take place? Put it in the format of YYYY., you will call...
A. similar_function(event_name=Treaty of Tordesillas, format=YYYY)
B. european_history.get_event_date(wrong_param=value)
C. european_history.get_event_date(event_name=Treaty of Tordesillas, format=YYYY)
D. european_history.get_event_date()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: history_eu.fetch_events with description: Fetches significant historical events within a specific time period in European history. and parameters: {'type': 'dict', 'properties': {'century': {'type': 'integer', 'description': 'The century you are interested in.'}, 'region': {'type': 'string', 'description': 'The region of Europe you are interested in.', 'enum': ['Northern', 'Southern', 'Eastern', 'Western']}, 'category': {'type': 'string', 'description': "Category of the historical events. Default is 'Culture'.", 'enum': ['Wars', 'Culture', 'Politics', 'Scientific', 'Others']}}, 'required': ['century', 'region']}, if you are asked to Find important Wars in European history during the 19th century., you will call...
A. similar_function(century=19, region=Northern, category=Wars)
B. history_eu.fetch_events(wrong_param=value)
C. history_eu.fetch_events()
D. history_eu.fetch_events(century=19, region=Northern, category=Wars)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_event_date with description: Retrieve the date of a historical event. and parameters: {'type': 'dict', 'properties': {'event': {'type': 'string', 'description': 'The name of the historical event.'}, 'location': {'type': 'string', 'description': 'Location where the event took place. Default to global if not specified.'}}, 'required': ['event']}, if you are asked to When was the signing of the Treaty of Lisbon?, you will call...
A. similar_function(event=Treaty of Lisbon, location=)
B. get_event_date(wrong_param=value)
C. get_event_date(event=Treaty of Lisbon, location=)
D. get_event_date()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: us_history.get_event_info with description: Retrieve detailed information about a significant event in U.S. history. and parameters: {'type': 'dict', 'properties': {'event_name': {'type': 'string', 'description': 'The name of the event.'}, 'specific_info': {'type': 'string', 'description': 'Specific aspect of information related to event.', 'enum': ['Start Date', 'End Date', 'Participants', 'Result', 'Notable Figures', 'Importance in History']}}, 'required': ['event_name', 'specific_info']}, if you are asked to Get start date on the American Civil War., you will call...
A. similar_function(event_name=American Civil War, specific_info=Start Date)
B. us_history.get_event_info(event_name=American Civil War, specific_info=Start Date)
C. us_history.get_event_info(wrong_param=value)
D. us_history.get_event_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_historical_GDP with description: Retrieve historical GDP data for a specific country and time range. and parameters: {'type': 'dict', 'properties': {'country': {'type': 'string', 'description': 'The country for which the historical GDP data is required.'}, 'start_year': {'type': 'integer', 'description': 'Starting year of the period for which GDP data is required.'}, 'end_year': {'type': 'integer', 'description': 'Ending year of the period for which GDP data is required.'}}, 'required': ['country', 'start_year', 'end_year']}, if you are asked to Get historical GDP data for United States from 1960 to 2000., you will call...
A. get_historical_GDP(country=United States, start_year=1960, end_year=2000)
B. similar_function(country=United States, start_year=1960, end_year=2000)
C. get_historical_GDP(wrong_param=value)
D. get_historical_GDP()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: us_history.get_president with description: Retrieve the U.S. president during a specific event in American history. and parameters: {'type': 'dict', 'properties': {'event': {'type': 'string', 'description': 'The event in U.S. history.'}, 'year': {'type': 'integer', 'description': 'The specific year of the event.'}}, 'required': ['event', 'year']}, if you are asked to Who was the president of the United States during the American Civil War?, you will call...
A. similar_function(event=American Civil War, year=1861)
B. us_history.get_president(event=American Civil War, year=1861)
C. us_history.get_president(wrong_param=value)
D. us_history.get_president()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: US_president.in_year with description: Retrieve the name of the U.S. president in a given year. and parameters: {'type': 'dict', 'properties': {'year': {'type': 'integer', 'description': 'The year in question.'}, 'full_name': {'type': 'boolean', 'default': True, 'description': 'Option to return full name with middle initial, if applicable.'}}, 'required': ['year']}, if you are asked to Who was the full name of the president of the United States in 1861?, you will call...
A. US_president.in_year(year=1861, full_name=True)
B. similar_function(year=1861, full_name=True)
C. US_president.in_year(wrong_param=value)
D. US_president.in_year()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: history_api.get_president_by_year with description: Get the name of the U.S. President for a specified year. and parameters: {'type': 'dict', 'properties': {'year': {'type': 'integer', 'description': 'The year you want to know the U.S. president of.'}, 'full_term_only': {'type': 'boolean', 'description': 'Flag to determine if we should only return presidents that served a full term for the specified year.', 'default': False}}, 'required': ['year']}, if you are asked to Who was the President of the United States in 1940?, you will call...
A. similar_function(year=1940, full_term_only=)
B. history_api.get_president_by_year(wrong_param=value)
C. history_api.get_president_by_year(year=1940, full_term_only=)
D. history_api.get_president_by_year()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: US_President_During_Event with description: Returns the U.S. president during a specified historical event. and parameters: {'type': 'dict', 'properties': {'event': {'type': 'string', 'description': 'The historical event.'}, 'country': {'type': 'string', 'description': "The country the president leads (optional parameter, defaults to 'USA' if not specified)."}}, 'required': ['event']}, if you are asked to Who was the U.S. president during the Civil War?, you will call...
A. US_President_During_Event(event=Civil War, country=USA)
B. similar_function(event=Civil War, country=USA)
C. US_President_During_Event(wrong_param=value)
D. US_President_During_Event()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_scientist_for_discovery with description: Retrieve the scientist's name who is credited for a specific scientific discovery or theory. and parameters: {'type': 'dict', 'properties': {'discovery': {'type': 'string', 'description': 'The scientific discovery or theory.'}}, 'required': ['discovery']}, if you are asked to Who is the scientist that first proposed the theory of evolution?, you will call...
A. get_scientist_for_discovery(discovery=Theory of Evolution)
B. similar_function(discovery=Theory of Evolution)
C. get_scientist_for_discovery(wrong_param=value)
D. get_scientist_for_discovery()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_discoverer with description: Get the person or team who made a particular scientific discovery and parameters: {'type': 'dict', 'properties': {'discovery': {'type': 'string', 'description': "The discovery for which the discoverer's information is needed."}, 'detail': {'type': 'boolean', 'description': 'Optional flag to get additional details about the discoverer, such as birth date and nationality. Defaults to false.'}}, 'required': ['discovery', 'detail']}, if you are asked to Who discovered the neutron? Give me detail information., you will call...
A. similar_function(discovery=neutron, detail=True)
B. get_discoverer(wrong_param=value)
C. get_discoverer(discovery=neutron, detail=True)
D. get_discoverer()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: publication_year.find with description: Fetches the year a particular scientific work was published. and parameters: {'type': 'dict', 'properties': {'author': {'type': 'string', 'description': 'Name of the author of the work.'}, 'work_title': {'type': 'string', 'description': 'Title of the scientific work.'}, 'location': {'type': 'string', 'description': "Place of the publication, if known. Default to 'all'."}}, 'required': ['author', 'work_title']}, if you are asked to What year was the law of universal gravitation published by Isaac Newton?, you will call...
A. publication_year.find(author=Isaac Newton, work_title=Law of Universal Gravitation, location=)
B. similar_function(author=Isaac Newton, work_title=Law of Universal Gravitation, location=)
C. publication_year.find(wrong_param=value)
D. publication_year.find()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: discoverer.get with description: Retrieve the name of the discoverer of an element based on its name. and parameters: {'type': 'dict', 'properties': {'element_name': {'type': 'string', 'description': 'The name of the element.'}, 'year': {'type': 'integer', 'description': 'Optional parameter that refers to the year of discovery. It could be helpful in case an element was discovered more than once. Default to 0, which means not use it.'}, 'first': {'type': 'boolean', 'default': True, 'description': "Optional parameter indicating if the first discoverer's name should be retrieved."}}, 'required': ['element_name']}, if you are asked to Who discovered radium?, you will call...
A. similar_function(element_name='radium', year=, first=True)
B. discoverer.get(element_name='radium', year=, first=True)
C. discoverer.get(wrong_param=value)
D. discoverer.get()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: science_history.get_discovery_details with description: Retrieve the details of a scientific discovery based on the discovery name. and parameters: {'type': 'dict', 'properties': {'discovery': {'type': 'string', 'description': 'The name of the discovery, e.g. Gravity'}, 'method_used': {'type': 'string', 'description': "The method used for the discovery, default value is 'default' which gives the most accepted method."}}, 'required': ['discovery']}, if you are asked to Who discovered Gravity and what was the method used?, you will call...
A. science_history.get_discovery_details(discovery=Gravity, method_used=)
B. similar_function(discovery=Gravity, method_used=)
C. science_history.get_discovery_details(wrong_param=value)
D. science_history.get_discovery_details()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: historical_contrib.get_contrib with description: Retrieve historical contribution made by a scientist on a specific date. and parameters: {'type': 'dict', 'properties': {'scientist': {'type': 'string', 'description': 'The scientist whose contributions need to be searched.'}, 'date': {'type': 'string', 'description': 'The date when the contribution was made in yyyy-mm-dd format.'}, 'category': {'type': 'string', 'description': "The field of the contribution, such as 'Physics' or 'Chemistry'. Default is 'all'."}}, 'required': ['scientist', 'date']}, if you are asked to What was Albert Einstein's contribution to science on March 17, 1915?, you will call...
A. similar_function(scientist=Albert Einstein, date=1915-03-17, category=)
B. historical_contrib.get_contrib(wrong_param=value)
C. historical_contrib.get_contrib()
D. historical_contrib.get_contrib(scientist=Albert Einstein, date=1915-03-17, category=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: science_history.get_invention with description: Retrieve the inventor and year of invention based on the invention's name. and parameters: {'type': 'dict', 'properties': {'invention_name': {'type': 'string', 'description': 'The name of the invention.'}, 'want_year': {'type': 'boolean', 'default': False, 'description': 'Return the year of invention if set to true.'}}, 'required': ['invention_name', 'want_year']}, if you are asked to Who invented the theory of relativity and in which year?, you will call...
A. similar_function(invention_name=theory of relativity, want_year=True)
B. science_history.get_invention(invention_name=theory of relativity, want_year=True)
C. science_history.get_invention(wrong_param=value)
D. science_history.get_invention()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: religion.history_info with description: Provides comprehensive historical details about a specified religion till a specified century. and parameters: {'type': 'dict', 'properties': {'religion': {'type': 'string', 'description': 'The name of the religion for which historical details are needed.'}, 'till_century': {'type': 'integer', 'description': 'The century till which historical details are needed.'}, 'include_people': {'type': 'boolean', 'description': 'To include influential people related to the religion during that time period, default is False'}}, 'required': ['religion', 'till_century']}, if you are asked to Tell me more about Christianity and its history till the 14th century, you will call...
A. similar_function(religion=Christianity, till_century=14, include_people=False)
B. religion.history_info(religion=Christianity, till_century=14, include_people=False)
C. religion.history_info(wrong_param=value)
D. religion.history_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_time_difference with description: Get the time difference between two places. and parameters: {'type': 'dict', 'properties': {'place1': {'type': 'string', 'description': 'The first place for time difference.'}, 'place2': {'type': 'string', 'description': 'The second place for time difference.'}}, 'required': ['place1', 'place2']}, if you are asked to What's the time difference between San Francisco and Sydney?, you will call...
A. similar_function(place1=San Francisco, place2=Sydney)
B. get_time_difference(wrong_param=value)
C. get_time_difference()
D. get_time_difference(place1=San Francisco, place2=Sydney)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_earliest_reference with description: Retrieve the earliest historical reference of a person. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The name of the person.'}, 'source': {'type': 'string', 'enum': ['scriptures', 'historical records'], 'description': "Source to fetch the reference. Default is 'scriptures'"}}, 'required': ['name']}, if you are asked to What is the earliest reference of Jesus Christ in history from historical record?, you will call...
A. similar_function(name=Jesus Christ, source=historical records)
B. get_earliest_reference(wrong_param=value)
C. get_earliest_reference()
D. get_earliest_reference(name=Jesus Christ, source=historical records)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_religion_history with description: Retrieves significant religious events, including the details of the event, its historical context, and its impacts. and parameters: {'type': 'dict', 'properties': {'religion': {'type': 'string', 'description': 'Name of the religion to be queried.'}, 'century': {'type': 'integer', 'description': 'The century in which the event(s) took place.'}, 'sort_by': {'type': 'string', 'enum': ['importance', 'chronological'], 'default': 'chronological', 'description': 'Order of sorting the events. Default is chronological.'}, 'count': {'type': 'integer', 'default': 5, 'description': 'Number of events to return. Default is 5.'}}, 'required': ['religion', 'century']}, if you are asked to Find ten major historical events related to Christianity in the 16th century sort by importance., you will call...
A. get_religion_history(religion=Christianity, century=16, sort_by=importance, count=10)
B. similar_function(religion=Christianity, century=16, sort_by=importance, count=10)
C. get_religion_history(wrong_param=value)
D. get_religion_history()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: retrieve_religion_info with description: Retrieve the history and main beliefs of a religion. and parameters: {'type': 'dict', 'properties': {'religion_name': {'type': 'string', 'description': 'The name of the religion.'}, 'detail_level': {'type': 'string', 'description': "Level of detail for the returned information, either 'summary' or 'full'.", 'default': 'summary'}}, 'required': ['religion_name', 'detail_level']}, if you are asked to Retrieve the full historyof Buddhism, you will call...
A. similar_function(religion_name=Buddhism, detail_level=full)
B. retrieve_religion_info(wrong_param=value)
C. retrieve_religion_info(religion_name=Buddhism, detail_level=full)
D. retrieve_religion_info()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_religion_history with description: Retrieves historic events and facts related to a specified religion for a given period. and parameters: {'type': 'dict', 'properties': {'religion': {'type': 'string', 'description': 'The name of the religion.'}, 'start_year': {'type': 'integer', 'description': 'The starting year of the period.'}, 'end_year': {'type': 'integer', 'description': 'The end year of the period.'}, 'event_type': {'type': 'string', 'enum': ['all', 'crusade', 'schism', 'reform'], 'description': "Optional parameter specifying the type of event. Default is 'all'."}}, 'required': ['religion', 'start_year', 'end_year']}, if you are asked to Retrieve the historic dates and facts related to Christianity between year 300 and 400., you will call...
A. similar_function(religion=Christianity, start_year=300, end_year=400, event_type=all)
B. get_religion_history(wrong_param=value)
C. get_religion_history(religion=Christianity, start_year=300, end_year=400, event_type=all)
D. get_religion_history()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: religious_history.get_papal_biography with description: Retrieve the biography and main religious and historical contributions of a Pope based on his papal name. and parameters: {'type': 'dict', 'properties': {'papal_name': {'type': 'string', 'description': 'The papal name of the Pope.'}, 'include_contributions': {'type': 'boolean', 'default': False, 'description': 'Include main contributions of the Pope in the response if true.'}}, 'required': ['papal_name', 'include_contributions']}, if you are asked to Get the biography and main contributions of Pope Innocent III., you will call...
A. religious_history.get_papal_biography(papal_name=Innocent III, include_contributions=True)
B. similar_function(papal_name=Innocent III, include_contributions=True)
C. religious_history.get_papal_biography(wrong_param=value)
D. religious_history.get_papal_biography()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: generate_circle_image with description: Generates a circle image based on the given radius and color and parameters: {'type': 'dict', 'properties': {'radius': {'type': 'integer', 'description': 'The radius of the circle in pixels.'}, 'color': {'type': 'string', 'description': 'The color of the circle.'}, 'background': {'type': 'string', 'description': 'Optional: The color of the background, default is white.'}}, 'required': ['radius', 'color']}, if you are asked to Generate an image of a circle with a radius of 50 pixels and color 'Red'., you will call...
A. similar_function(radius=50, color=Red, background=)
B. generate_circle_image(radius=50, color=Red, background=)
C. generate_circle_image(wrong_param=value)
D. generate_circle_image()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: identify_color_rgb with description: This function identifies the RGB values of a named color. and parameters: {'type': 'dict', 'properties': {'color_name': {'type': 'string', 'description': 'Name of the color.'}, 'standard': {'type': 'string', 'description': "The color standard (e.g. basic, pantone). Default is 'basic'"}}, 'required': ['color_name']}, if you are asked to Can you help me identify the basic RGB value of Sea Green color?, you will call...
A. similar_function(color_name=Sea Green, standard=basic)
B. identify_color_rgb(wrong_param=value)
C. identify_color_rgb()
D. identify_color_rgb(color_name=Sea Green, standard=basic)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: mix_paint_color with description: Combine two primary paint colors and adjust the resulting color's lightness level. and parameters: {'type': 'dict', 'properties': {'color1': {'type': 'string', 'description': 'The first primary color to be mixed.'}, 'color2': {'type': 'string', 'description': 'The second primary color to be mixed.'}, 'lightness': {'type': 'integer', 'description': 'The desired lightness level of the resulting color in percentage. The default level is set to 50.'}}, 'required': ['color1', 'color2']}, if you are asked to Mix yellow and blue colors and adjust the lightness level to 60 percent., you will call...
A. similar_function(color1=yellow, color2=blue, lightness=60)
B. mix_paint_color(wrong_param=value)
C. mix_paint_color(color1=yellow, color2=blue, lightness=60)
D. mix_paint_color()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_paint_needed with description: Calculate the amount of paint needed to cover a surface area based on the coverage rate of a specific paint brand. and parameters: {'type': 'dict', 'properties': {'coverage_rate': {'type': 'integer', 'description': 'The area in square feet that one gallon of paint can cover.'}, 'length': {'type': 'integer', 'description': 'Length of the wall to be painted in feet.'}, 'height': {'type': 'integer', 'description': 'Height of the wall to be painted in feet.'}}, 'required': ['coverage_rate', 'length', 'height']}, if you are asked to Calculate the total quantity of paint needed to cover a wall of 30 feet by 12 feet using a specific brand that covers 400 square feet per gallon., you will call...
A. calculate_paint_needed(coverage_rate=400, length=30, height=12)
B. similar_function(coverage_rate=400, length=30, height=12)
C. calculate_paint_needed(wrong_param=value)
D. calculate_paint_needed()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: paint_requirement.calculate with description: Calculate the amount of paint required to paint a given area. Account for coverage efficiency of the paint and exclusions (like windows). and parameters: {'type': 'dict', 'properties': {'area': {'type': 'dict', 'properties': {'width': {'type': 'integer', 'description': 'The width of the area to be painted in feet.'}, 'height': {'type': 'integer', 'description': 'The height of the area to be painted in feet.'}}, 'description': 'The area to be painted.'}, 'paint_coverage': {'type': 'integer', 'description': 'Coverage area per gallon of the paint in square feet.', 'default': 350}, 'exclusion': {'type': 'dict', 'properties': {'type': {'type': 'string', 'description': 'The type of the exclusion e.g window, door etc.'}, 'area': {'type': 'integer', 'description': 'The area of the exclusion in square feet.'}}, 'description': 'Area not to be painted. Default to not use any exclusion if not specified.'}}, 'required': ['area', 'paint_coverage']}, if you are asked to Calculate how many gallons of paint is required to paint a wall with width of 20ft and height of 12ft, assuming 1 gallon covers approximately 350 sq.ft. Don't include window area of 15 sq.ft., you will call...
A. similar_function(area={'width': [20], 'height': [12]}, paint_coverage=350, exclusion={'type': ['window'], 'area': [15]})
B. paint_requirement.calculate(wrong_param=value)
C. paint_requirement.calculate(area={'width': [20], 'height': [12]}, paint_coverage=350, exclusion={'type': ['window'], 'area': [15]})
D. paint_requirement.calculate()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: draw_rectangle with description: Draw a rectangle given its width and height. and parameters: {'type': 'dict', 'properties': {'width': {'type': 'integer', 'description': 'The width of the rectangle.'}, 'height': {'type': 'integer', 'description': 'The height of the rectangle.'}, 'color': {'type': 'string', 'description': "The color of the rectangle. Default is 'black'."}}, 'required': ['width', 'height']}, if you are asked to Draw a rectangle with a width of 20 units and height of 10 units in red., you will call...
A. draw_rectangle(width=20, height=10, color=red)
B. similar_function(width=20, height=10, color=red)
C. draw_rectangle(wrong_param=value)
D. draw_rectangle()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: modify_painting with description: Modify an existing painting's attributes such as size, medium, and color. and parameters: {'type': 'dict', 'properties': {'size': {'type': 'string', 'description': 'The size of the painting in inches, width by height.'}, 'medium': {'type': 'string', 'description': 'The medium of the painting, such as oil, acrylic, etc.'}, 'dominant_color': {'type': 'string', 'description': "The dominant color of the painting. Default to 'black'."}}, 'required': ['size', 'medium']}, if you are asked to Change my painting's medium to oil and change size to 12x18 with red dominant color., you will call...
A. modify_painting(size=12x18, medium=oil, dominant_color=red)
B. similar_function(size=12x18, medium=oil, dominant_color=red)
C. modify_painting(wrong_param=value)
D. modify_painting()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_sculpture_info with description: Retrieves the most recent artwork by a specified artist with its detailed description. and parameters: {'type': 'dict', 'properties': {'artist_name': {'type': 'string', 'description': 'The name of the artist.'}, 'year': {'type': 'integer', 'description': 'Year of the sculpture. This is optional. Default is the most recent year.'}, 'detail': {'type': 'boolean', 'description': 'If True, it provides detailed description of the sculpture. Defaults to False.'}}, 'required': ['artist_name']}, if you are asked to Find me the most recent art sculpture by James Plensa with detailed description., you will call...
A. get_sculpture_info(artist_name=James Plensa, year=, detail=True)
B. similar_function(artist_name=James Plensa, year=, detail=True)
C. get_sculpture_info(wrong_param=value)
D. get_sculpture_info()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: sculpture.get_details with description: Retrieve details of a sculpture based on the artist and the title of the sculpture. and parameters: {'type': 'dict', 'properties': {'artist': {'type': 'string', 'description': 'The artist who made the sculpture.'}, 'title': {'type': 'string', 'description': 'The title of the sculpture.'}, 'detail': {'type': 'string', 'description': "The specific detail wanted about the sculpture. Default is 'general information'."}}, 'required': ['artist', 'title']}, if you are asked to Find the size of the sculpture with title 'David' by Michelangelo., you will call...
A. sculpture.get_details(artist=Michelangelo, title=David, detail=size)
B. similar_function(artist=Michelangelo, title=David, detail=size)
C. sculpture.get_details(wrong_param=value)
D. sculpture.get_details()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: sculpture_search with description: Find sculptures based on location and a specific time frame. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city where the sculptures are located.'}, 'time_frame': {'type': 'string', 'description': 'The time frame during which the sculptures were made.'}, 'material': {'type': 'string', 'description': "Optional material of the sculptures. Default is 'all'"}}, 'required': ['location', 'time_frame']}, if you are asked to Find me sculptures near Chicago that were made in the 19th century., you will call...
A. similar_function(location=Chicago, time_frame=19th century, material=)
B. sculpture_search(wrong_param=value)
C. sculpture_search(location=Chicago, time_frame=19th century, material=)
D. sculpture_search()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_sculpture_value with description: Retrieve the current market value of a particular sculpture by a specific artist. and parameters: {'type': 'dict', 'properties': {'sculpture': {'type': 'string', 'description': 'The name of the sculpture.'}, 'artist': {'type': 'string', 'description': 'The name of the artist who created the sculpture.'}, 'year': {'type': 'integer', 'description': 'The year the sculpture was created. This is optional and is not required for all sculptures. Default is the most recent year.'}}, 'required': ['sculpture', 'artist']}, if you are asked to What is the value of the sculpture 'The Thinker' by Rodin?, you will call...
A. similar_function(sculpture=The Thinker, artist=Rodin, year=)
B. get_sculpture_value(wrong_param=value)
C. get_sculpture_value()
D. get_sculpture_value(sculpture=The Thinker, artist=Rodin, year=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: find_exhibition with description: Locate the most popular exhibitions based on criteria like location, time, art form, and user ratings. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city where the exhibition is held, e.g., New York City, NY.'}, 'art_form': {'type': 'string', 'description': 'The form of art the exhibition is displaying e.g., sculpture.'}, 'month': {'type': 'string', 'description': 'The month of exhibition. Default value will return upcoming events if not specified.'}, 'user_ratings': {'type': 'string', 'enum': ['low', 'average', 'high'], 'description': "Select exhibitions with user rating threshold. Default is 'low'"}}, 'required': ['location', 'art_form']}, if you are asked to Find the top rated modern sculpture exhibition happening in New York in the upcoming month., you will call...
A. similar_function(location=New York City, NY, art_form=sculpture, month=, user_ratings=high)
B. find_exhibition(location=New York City, NY, art_form=sculpture, month=, user_ratings=high)
C. find_exhibition(wrong_param=value)
D. find_exhibition()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: sculpture_locator.find_by_artist with description: Locate the sculptures of specific artist by material and location and parameters: {'type': 'dict', 'properties': {'artist': {'type': 'string', 'description': 'Name of the Artist of the sculpture'}, 'material': {'type': 'string', 'description': 'Material of the sculpture.'}, 'location': {'type': 'string', 'description': "The location where you want to find the sculpture. Default is 'all' if not specified."}}, 'required': ['artist', 'material']}, if you are asked to Find me the sculptures of Michelangelo with material Marble in Rome, Italy., you will call...
A. similar_function(artist=Michelangelo, material=Marble, location=Rome)
B. sculpture_locator.find_by_artist(artist=Michelangelo, material=Marble, location=Rome)
C. sculpture_locator.find_by_artist(wrong_param=value)
D. sculpture_locator.find_by_artist()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: calculate_compound_interest with description: Calculates the compound interest of an investment over a given time period. and parameters: {'type': 'dict', 'properties': {'principle': {'type': 'integer', 'description': 'The initial amount of the investment.'}, 'interest_rate': {'type': 'float', 'description': 'The yearly interest rate of the investment.'}, 'time': {'type': 'integer', 'description': 'The time, in years, the money is invested or borrowed for.'}, 'compounds_per_year': {'type': 'integer', 'description': 'The number of times the interest is compounded per year. Default is 1 (interest is compounded yearly).'}}, 'required': ['principle', 'interest_rate', 'time']}, if you are asked to Calculate the compound interest of an investment of $10,000 at an interest rate of 5% compounded yearly for 10 years., you will call...
A. calculate_compound_interest(principle=10000, interest_rate=0.05, time=10, compounds_per_year=1)
B. similar_function(principle=10000, interest_rate=0.05, time=10, compounds_per_year=1)
C. calculate_compound_interest(wrong_param=value)
D. calculate_compound_interest()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: building.get_dimensions with description: Retrieve the dimensions of a specific building based on its name. and parameters: {'type': 'dict', 'properties': {'building_name': {'type': 'string', 'description': 'The name of the building.'}, 'unit': {'type': 'string', 'description': 'The unit in which you want the dimensions. Default is meter.', 'enum': ['meter', 'feet']}}, 'required': ['building_name', 'unit']}, if you are asked to Can you give me the height and width of Empire State building in feet?, you will call...
A. similar_function(building_name=Empire State Building, unit=feet)
B. building.get_dimensions(wrong_param=value)
C. building.get_dimensions()
D. building.get_dimensions(building_name=Empire State Building, unit=feet)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: analyze_structure with description: Analyze a structure of a building based on its Id and floor numbers. and parameters: {'type': 'dict', 'properties': {'building_id': {'type': 'string', 'description': 'The unique identification number of the building.'}, 'floors': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Floor numbers to be analyzed.'}, 'mode': {'type': 'string', 'description': "Mode of analysis, e.g. 'static' or 'dynamic'. Default is 'static'."}}, 'required': ['building_id', 'floors']}, if you are asked to What is the structural dynamic analysis of the building with building Id B1004 for 2nd, 3rd and 4th floors?, you will call...
A. similar_function(building_id=B1004, floors=[2, 3, 4], mode=dynamic)
B. analyze_structure(wrong_param=value)
C. analyze_structure()
D. analyze_structure(building_id=B1004, floors=[2, 3, 4], mode=dynamic)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: calculate_circle_dimensions with description: Calculate the area and circumference of a circle based on the radius. and parameters: {'type': 'dict', 'properties': {'radius': {'type': 'integer', 'description': 'The radius of the circle.'}}, 'required': ['radius']}, if you are asked to Calculate the area and circumference of a circle with a radius of 5 units., you will call...
A. similar_function(radius=5)
B. calculate_circle_dimensions(wrong_param=value)
C. calculate_circle_dimensions(radius=5)
D. calculate_circle_dimensions()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: museum.get_hours with description: Retrieve the open hours for a museum based on its name and location. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The name of the museum.'}, 'location': {'type': 'string', 'description': 'The city where the museum is located.'}, 'day': {'type': 'string', 'description': "Optional: Day of the week for specific open hours. Default 'Monday'."}}, 'required': ['name', 'location']}, if you are asked to Find out the open hours for the Louvre Museum in Paris., you will call...
A. similar_function(name=Louvre Museum, location=Paris, day=)
B. museum.get_hours(wrong_param=value)
C. museum.get_hours(name=Louvre Museum, location=Paris, day=)
D. museum.get_hours()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: museum_info with description: Retrieve information about the opening hours of a museum based on its name. and parameters: {'type': 'dict', 'properties': {'museum_name': {'type': 'string', 'description': 'The name of the museum.'}, 'info_type': {'type': 'string', 'description': 'The type of information needed about the museum.', 'default': 'opening_hours'}}, 'required': ['museum_name']}, if you are asked to Find information about the opening hours of the Metropolitan Museum of Art., you will call...
A. similar_function(museum_name=Metropolitan Museum of Art, info_type=opening_hours)
B. museum_info(museum_name=Metropolitan Museum of Art, info_type=opening_hours)
C. museum_info(wrong_param=value)
D. museum_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: metropolitan_museum.get_top_artworks with description: Fetches the list of popular artworks at the Metropolitan Museum of Art. Results can be sorted based on popularity. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'The number of artworks to fetch'}, 'sort_by': {'type': 'string', 'description': "The criteria to sort the results on. Default is 'popularity'.", 'enum': ['popularity', 'chronological', 'alphabetical']}}, 'required': ['number']}, if you are asked to Get the list of top 5 popular artworks at the Metropolitan Museum of Art. Please sort by popularity., you will call...
A. similar_function(number=5, sort_by=popularity)
B. metropolitan_museum.get_top_artworks(wrong_param=value)
C. metropolitan_museum.get_top_artworks(number=5, sort_by=popularity)
D. metropolitan_museum.get_top_artworks()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: museum_working_hours.get with description: Get the working hours of a museum in a specific location. and parameters: {'type': 'dict', 'properties': {'museum': {'type': 'string', 'description': 'The name of the museum.'}, 'location': {'type': 'string', 'description': 'The location of the museum.'}, 'day': {'type': 'string', 'description': "Specific day of the week. Default is 'Monday'"}}, 'required': ['museum', 'location']}, if you are asked to Get the working hours of Louvre Museum in Paris., you will call...
A. museum_working_hours.get(museum=Louvre Museum, location=Paris, day=)
B. similar_function(museum=Louvre Museum, location=Paris, day=)
C. museum_working_hours.get(wrong_param=value)
D. museum_working_hours.get()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: museum_info with description: Get information about a museum including its opening hours and ticket prices for a specific date range. and parameters: {'type': 'dict', 'properties': {'museum': {'type': 'string', 'description': 'The name of the museum.'}, 'date': {'type': 'string', 'description': "The specific date or date range for which information is needed. It could be specific date such as '2022-12-01' or a date range like 'this weekend', 'next week'. It could also be a recurring time such as 'every Saturday'."}, 'information': {'type': 'array', 'items': {'type': 'string', 'enum': ['opening_hours', 'ticket_price', 'address']}, 'description': "The type of information needed from the museum. This is optional and defaults to 'all' if not specified.", 'default': 'all'}}, 'required': ['museum', 'date']}, if you are asked to Find the working hours and ticket price of The British Museum for this weekend., you will call...
A. similar_function(museum=The British Museum, date=this weekend, information=['opening_hours', 'ticket_price'])
B. museum_info(wrong_param=value)
C. museum_info(museum=The British Museum, date=this weekend, information=['opening_hours', 'ticket_price'])
D. museum_info()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_instrument_details with description: Retrieve the average price and ratings of an instrument from a particular manufacturer. and parameters: {'type': 'dict', 'properties': {'instrument': {'type': 'string', 'description': 'The name of the instrument.'}, 'manufacturer': {'type': 'string', 'description': 'The manufacturer of the instrument.'}, 'features': {'type': 'array', 'items': {'type': 'string', 'enum': ['price', 'rating']}, 'description': "The features to retrieve about the instrument. Default is 'price'"}}, 'required': ['instrument', 'manufacturer']}, if you are asked to Find me the average price and ratings of piano from Yamaha., you will call...
A. get_instrument_details(instrument=piano, manufacturer=Yamaha, features=['price', 'rating'])
B. similar_function(instrument=piano, manufacturer=Yamaha, features=['price', 'rating'])
C. get_instrument_details(wrong_param=value)
D. get_instrument_details()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: instrument_price.get with description: Retrieve the current retail price of a specific musical instrument. and parameters: {'type': 'dict', 'properties': {'brand': {'type': 'string', 'description': 'The brand of the instrument.'}, 'model': {'type': 'string', 'description': 'The specific model of the instrument.'}, 'finish': {'type': 'string', 'description': 'The color or type of finish on the instrument.'}}, 'required': ['brand', 'model', 'finish']}, if you are asked to What's the retail price of a Fender American Professional II Stratocaster in Rosewood Finish?, you will call...
A. similar_function(brand=Fender, model=American Professional II Stratocaster, finish=Rosewood)
B. instrument_price.get(wrong_param=value)
C. instrument_price.get()
D. instrument_price.get(brand=Fender, model=American Professional II Stratocaster, finish=Rosewood)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: find_instrument with description: Search for a musical instrument within specified budget and of specific type. and parameters: {'type': 'dict', 'properties': {'budget': {'type': 'integer', 'description': 'Your budget for the instrument.'}, 'type': {'type': 'string', 'description': 'Type of the instrument'}, 'make': {'type': 'string', 'description': 'Maker of the instrument. Default to not use if not specified.'}}, 'required': ['budget', 'type']}, if you are asked to Find an acoustic instrument within my budget of $1000., you will call...
A. similar_function(budget=1000, type=acoustic, make=)
B. find_instrument(wrong_param=value)
C. find_instrument()
D. find_instrument(budget=1000, type=acoustic, make=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_instrument_info with description: Retrieve the details about a specific musical instrument based on its name, maker, and manufacturing year. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The name of the instrument.'}, 'maker': {'type': 'string', 'description': 'The name of the maker who created the instrument.'}, 'year': {'type': 'integer', 'description': 'The year the instrument was made.'}}, 'required': ['name', 'maker', 'year']}, if you are asked to Find the details about the musical instrument 'Violin' from 'Stradivarius' maker, made in the year 1721., you will call...
A. similar_function(name=Violin, maker=Stradivarius, year=1721)
B. get_instrument_info(name=Violin, maker=Stradivarius, year=1721)
C. get_instrument_info(wrong_param=value)
D. get_instrument_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: find_flute with description: Locate a flute for sale based on specific requirements. and parameters: {'type': 'dict', 'properties': {'brand': {'type': 'string', 'description': "The brand of the flute. Example, 'Yamaha'"}, 'specs': {'type': 'array', 'items': {'type': 'string', 'enum': ['open hole', 'C foot', 'silver headjoint']}, 'description': 'The specifications of the flute desired.'}}, 'required': ['brand', 'specs']}, if you are asked to Find a Yamaha flute with the specifications of open hole, C foot, and silver headjoint available for sale., you will call...
A. similar_function(brand=Yamaha, specs=['open hole', 'C foot', 'silver headjoint'])
B. find_flute(wrong_param=value)
C. find_flute()
D. find_flute(brand=Yamaha, specs=['open hole', 'C foot', 'silver headjoint'])

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: guitar_price.find with description: Retrieve the price of a specific used guitar model based on its condition and location. and parameters: {'type': 'dict', 'properties': {'model': {'type': 'string', 'description': 'The model of the guitar.'}, 'condition': {'type': 'string', 'enum': ['Poor', 'Good', 'Excellent'], 'description': 'The condition of the guitar.'}, 'location': {'type': 'string', 'description': 'The location where the guitar is being sold.'}}, 'required': ['model', 'condition', 'location']}, if you are asked to Find the price of a used Gibson Les Paul guitar in excellent condition in the Chicago area., you will call...
A. similar_function(model=Gibson Les Paul, condition=Excellent, location=Chicago)
B. guitar_price.find(model=Gibson Les Paul, condition=Excellent, location=Chicago)
C. guitar_price.find(wrong_param=value)
D. guitar_price.find()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: concert_info.get with description: Retrieve information about concerts based on specific genre, location and date. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city where the concert will take place.'}, 'date': {'type': 'string', 'description': 'Time frame to get the concert for.'}, 'genre': {'type': 'string', 'description': 'Genre of the concert.', 'enum': ['Pop', 'Rock', 'Country', 'Classical', 'Electronic', 'Hip-Hop']}}, 'required': ['location', 'date', 'genre']}, if you are asked to Get information about the pop concerts in New York for next month., you will call...
A. similar_function(location=New York City, NY, date=next month, genre=Pop)
B. concert_info.get(location=New York City, NY, date=next month, genre=Pop)
C. concert_info.get(wrong_param=value)
D. concert_info.get()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: find_concert with description: Locate a concert in a specified location within a certain budget. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city where you are looking for a concert. In the format City, State.'}, 'price': {'type': 'integer', 'description': 'Maximum ticket price.'}, 'genre': {'type': 'string', 'description': "Music genre of the concert. Default to 'Jazz'. ", 'enum': ['Rock', 'Pop', 'Country', 'Jazz', 'Classical']}}, 'required': ['location', 'price']}, if you are asked to Find me a Rock concert in Chicago with ticket availability under $100., you will call...
A. similar_function(location=Chicago, Illinois, price=100, genre=Rock)
B. find_concert(location=Chicago, Illinois, price=100, genre=Rock)
C. find_concert(wrong_param=value)
D. find_concert()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: concert.get_details with description: Fetch the details for a particular concert based on the artist and location. and parameters: {'type': 'dict', 'properties': {'artist': {'type': 'string', 'description': "Name of the artist/band who's performing."}, 'location': {'type': 'string', 'description': 'City where the concert is taking place.'}, 'date': {'type': 'string', 'description': "Date of the concert in 'mm-yyyy' format. Default is the current month if not specified."}}, 'required': ['artist', 'location']}, if you are asked to Get concert details for the artist Beyonce performing in San Diego April 2022., you will call...
A. concert.get_details(artist=Beyonce, location=San Diego, date=04-2022)
B. similar_function(artist=Beyonce, location=San Diego, date=04-2022)
C. concert.get_details(wrong_param=value)
D. concert.get_details()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: concert.search with description: Locate a concert based on specific criteria like genre, location, and date. and parameters: {'type': 'dict', 'properties': {'genre': {'type': 'string', 'description': 'Genre of the concert.'}, 'location': {'type': 'string', 'description': 'City of the concert.'}, 'date': {'type': 'string', 'description': 'Date of the concert, e.g. this weekend, today, tomorrow, or date string.'}, 'price_range': {'type': 'string', 'enum': ['free', 'cheap', 'moderate', 'expensive'], 'description': "Expected price range of the concert tickets. Default is 'free'."}}, 'required': ['genre', 'location', 'date']}, if you are asked to Find me a classical concert this weekend in Los Angeles with cheap tickets., you will call...
A. similar_function(genre=classical, location=Los Angeles, date=this weekend, price_range=cheap)
B. concert.search(genre=classical, location=Los Angeles, date=this weekend, price_range=cheap)
C. concert.search(wrong_param=value)
D. concert.search()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: concert_booking.book_ticket with description: Book concert tickets for a specific artist in a specified city. and parameters: {'type': 'dict', 'properties': {'artist': {'type': 'string', 'description': 'The artist you want to book tickets for.'}, 'city': {'type': 'string', 'description': 'The city where the concert is.'}, 'num_tickets': {'type': 'integer', 'description': 'Number of tickets required. Default is 1.'}}, 'required': ['artist', 'city']}, if you are asked to Get me two tickets for next Eminem concert in New York City., you will call...
A. concert_booking.book_ticket(artist=Eminem, city=New York City, num_tickets=2)
B. similar_function(artist=Eminem, city=New York City, num_tickets=2)
C. concert_booking.book_ticket(wrong_param=value)
D. concert_booking.book_ticket()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: concert.find_nearby with description: Locate nearby concerts based on specific criteria like genre. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. Seattle, WA'}, 'genre': {'type': 'string', 'description': 'Genre of music to be played at the concert.'}}, 'required': ['location', 'genre']}, if you are asked to Find concerts near me in Seattle that plays jazz music., you will call...
A. similar_function(location=Seattle, genre=jazz)
B. concert.find_nearby(wrong_param=value)
C. concert.find_nearby()
D. concert.find_nearby(location=Seattle, genre=jazz)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: concert.find_details with description: Finds details of a concert event. and parameters: {'type': 'dict', 'properties': {'artist': {'type': 'string', 'description': 'Name of the artist performing.'}, 'month': {'type': 'string', 'description': 'Month in which the concert is happening.'}, 'year': {'type': 'integer', 'description': 'Year of the concert.', 'default': 2022}}, 'required': ['artist', 'month']}, if you are asked to What's the timing and location for The Weeknd's concert happening in December?, you will call...
A. similar_function(artist=The Weeknd, month=December, year=)
B. concert.find_details(wrong_param=value)
C. concert.find_details(artist=The Weeknd, month=December, year=)
D. concert.find_details()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: music_generator.generate_melody with description: Generate a melody based on certain musical parameters. and parameters: {'type': 'dict', 'properties': {'key': {'type': 'string', 'description': "The key of the melody. E.g., 'C' for C major."}, 'start_note': {'type': 'string', 'description': "The first note of the melody, specified in scientific pitch notation. E.g., 'C4'."}, 'length': {'type': 'integer', 'description': 'The number of measures in the melody.'}, 'tempo': {'type': 'integer', 'description': 'The tempo of the melody, in beats per minute. Optional parameter. If not specified, defaults to 120.'}}, 'required': ['key', 'start_note', 'length']}, if you are asked to Generate a melody in C major scale, starting with the note C4, 16 measures long, at 120 beats per minute., you will call...
A. similar_function(key=C, start_note=C4, length=16, tempo=120)
B. music_generator.generate_melody(wrong_param=value)
C. music_generator.generate_melody()
D. music_generator.generate_melody(key=C, start_note=C4, length=16, tempo=120)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: compose_melody with description: Compose a melody using the specified chord progression for a certain number of measures on specified instrument. and parameters: {'type': 'dict', 'properties': {'progression': {'type': 'array', 'items': {'type': 'string'}, 'description': 'The progression of chords.'}, 'measures': {'type': 'integer', 'description': 'The number of measures of the melody.'}, 'instrument': {'type': 'string', 'description': "The instrument for the composition. Default is 'Piano'."}}, 'required': ['progression', 'measures']}, if you are asked to Compose a simple piano melody with a progression of C, F and G for 4 measures., you will call...
A. compose_melody(progression=['C', 'F', 'G'], measures=4, instrument=Piano)
B. similar_function(progression=['C', 'F', 'G'], measures=4, instrument=Piano)
C. compose_melody(wrong_param=value)
D. compose_melody()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: music_composer.create_mix with description: Create a mix of a song based on a particular music scale and duration and parameters: {'type': 'dict', 'properties': {'scale': {'type': 'string', 'description': 'The musical scale to be used. E.g: C Major, A Minor, etc.'}, 'note_duration': {'type': 'string', 'description': "Duration of each note. Options: 'whole', 'half', 'quarter', 'eighth', 'sixteenth'.", 'enum': ['whole', 'half', 'quarter', 'eighth', 'sixteenth']}, 'track_length': {'type': 'integer', 'description': 'Length of the mix track in seconds.'}}, 'required': ['scale', 'note_duration', 'track_length']}, if you are asked to Create a mix track using notes of C major scale and duration of each note being quarter of a second with a duration of 3 minutes., you will call...
A. similar_function(scale=C Major, note_duration=quarter, track_length=180)
B. music_composer.create_mix(scale=C Major, note_duration=quarter, track_length=180)
C. music_composer.create_mix(wrong_param=value)
D. music_composer.create_mix()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: music_generation.create_chord_progression with description: Create a chord progression in a specific key and number of chords. and parameters: {'type': 'dict', 'properties': {'key': {'type': 'string', 'description': 'The key for the chord progression.'}, 'chords': {'type': 'integer', 'description': 'Number of chords in the progression.'}, 'progression_type': {'type': 'string', 'description': "The type of the chord progression. Optional parameter. Default is 'major'."}}, 'required': ['key', 'chords']}, if you are asked to Generate a major chord progression in C key with four chords., you will call...
A. similar_function(key=C, chords=4, progression_type=major)
B. music_generation.create_chord_progression(key=C, chords=4, progression_type=major)
C. music_generation.create_chord_progression(wrong_param=value)
D. music_generation.create_chord_progression()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_song_lyrics with description: Retrieve the lyrics of a song based on the artist's name and song title. and parameters: {'type': 'dict', 'properties': {'song_title': {'type': 'string', 'description': 'The title of the song.'}, 'artist_name': {'type': 'string', 'description': 'The name of the artist who performed the song.'}, 'lang': {'type': 'string', 'description': 'The language of the lyrics. Default is English.', 'enum': ['English', 'French', 'Spanish', 'German', 'Italian']}}, 'required': ['song_title', 'artist_name']}, if you are asked to Find the lyrics to the song 'Bohemian Rhapsody' by Queen., you will call...
A. similar_function(song_title=Bohemian Rhapsody, artist_name=Queen, lang=English)
B. get_song_lyrics(song_title=Bohemian Rhapsody, artist_name=Queen, lang=English)
C. get_song_lyrics(wrong_param=value)
D. get_song_lyrics()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: music_generator.generate_scale_progression with description: Generate a music scale progression in a specific key with a given tempo and duration. and parameters: {'type': 'dict', 'properties': {'key': {'type': 'string', 'description': 'The key in which to generate the scale progression.'}, 'tempo': {'type': 'integer', 'description': 'The tempo of the scale progression in BPM.'}, 'duration': {'type': 'integer', 'description': 'The duration of each note in beats.'}, 'scale_type': {'type': 'string', 'default': 'major', 'description': "The type of scale to generate. Defaults to 'major'."}}, 'required': ['key', 'tempo', 'duration']}, if you are asked to Generate a major C scale progression with tempo 80 BPM and duration 4 beats., you will call...
A. similar_function(key=C, tempo=80, duration=4, scale_type=major)
B. music_generator.generate_scale_progression(wrong_param=value)
C. music_generator.generate_scale_progression()
D. music_generator.generate_scale_progression(key=C, tempo=80, duration=4, scale_type=major)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: music.theory.chordProgression with description: Identifies a potential key signature for the given chord progression. and parameters: {'type': 'dict', 'properties': {'progression': {'type': 'array', 'items': {'type': 'string'}, 'description': "The chord progression in Roman numerals. Eg: ['I', 'V', 'vi', 'IV']."}, 'returnAllPossibleKeys': {'type': 'boolean', 'description': 'Flag indicating if the function should return all possible key signatures that fit the chord progression. If false, the function will return the first valid key it finds. Default is false.'}, 'assumeMajor': {'type': 'boolean', 'description': 'Assumption if the key signature is Major. If true, the function will assume the key signature to be major and otherwise minor. Default is true.'}}, 'required': ['progression']}, if you are asked to music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV']), you will call...
A. music.theory.chordProgression(progression=['I', 'V', 'vi', 'IV'], returnAllPossibleKeys=True, assumeMajor=True)
B. similar_function(progression=['I', 'V', 'vi', 'IV'], returnAllPossibleKeys=True, assumeMajor=True)
C. music.theory.chordProgression(wrong_param=value)
D. music.theory.chordProgression()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: music_theory.key_signature with description: Return the key signature of a major or minor scale. and parameters: {'type': 'dict', 'properties': {'key': {'type': 'string', 'description': "The root of the scale, e.g., 'C', 'F#', 'Ab'."}, 'scale_type': {'type': 'string', 'enum': ['major', 'minor'], 'description': "Type of the scale, either 'major' or 'minor'. Default is 'major'."}}, 'required': ['key']}, if you are asked to What key signature does C# major have?, you will call...
A. similar_function(key=C#, scale_type=major)
B. music_theory.key_signature(key=C#, scale_type=major)
C. music_theory.key_signature(wrong_param=value)
D. music_theory.key_signature()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: musical_scale with description: Get the musical scale of a specific key in music theory. and parameters: {'type': 'dict', 'properties': {'key': {'type': 'string', 'description': 'The musical key for which the scale will be found.'}, 'scale_type': {'type': 'string', 'default': 'major', 'description': 'The type of musical scale.'}}, 'required': ['key']}, if you are asked to What is the musical scale associated with C sharp major?, you will call...
A. musical_scale(key=C#, scale_type=major)
B. similar_function(key=C#, scale_type=major)
C. musical_scale(wrong_param=value)
D. musical_scale()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: music.calculate_note_duration with description: Calculate the duration between two notes based on their frequencies and harmonic rhythm. and parameters: {'type': 'dict', 'properties': {'first_note_frequency': {'type': 'integer', 'description': 'The frequency of the first note in Hz.'}, 'second_note_frequency': {'type': 'integer', 'description': 'The frequency of the second note in Hz.'}, 'tempo': {'type': 'integer', 'description': 'The tempo of the music in beats per minute. Defaults to 120 beats per minute.'}}, 'required': ['first_note_frequency', 'second_note_frequency']}, if you are asked to Calculate the duration between two notes of 440Hz and 880Hz frequency based on harmonic rhythm., you will call...
A. similar_function(first_note_frequency=440, second_note_frequency=880, tempo=)
B. music.calculate_note_duration(wrong_param=value)
C. music.calculate_note_duration(first_note_frequency=440, second_note_frequency=880, tempo=)
D. music.calculate_note_duration()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_third_chord with description: Calculate the third major chord in a given key. and parameters: {'type': 'dict', 'properties': {'key': {'type': 'string', 'description': 'The key of the scale.'}, 'type': {'type': 'string', 'description': "Type of the scale, either major or minor. Default is 'major'."}}, 'required': ['key']}, if you are asked to What is the third major chord in C major scale?, you will call...
A. similar_function(key=C, type=major)
B. get_third_chord(wrong_param=value)
C. get_third_chord(key=C, type=major)
D. get_third_chord()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_batting_average with description: Calculate the batting average for a baseball player based on their number of hits and at-bats. and parameters: {'type': 'dict', 'properties': {'hits': {'type': 'integer', 'description': 'The number of hits.'}, 'at_bats': {'type': 'integer', 'description': 'The number of at-bats.'}, 'decimal_places': {'type': 'integer', 'description': 'The number of decimal places to return in the batting average. Default is 3.'}}, 'required': ['hits', 'at_bats']}, if you are asked to Calculate the batting average for a baseball player who has 180 hits and 600 at-bats. Round to 3 decimals., you will call...
A. similar_function(hits=180, at_bats=600, decimal_places=3)
B. calculate_batting_average(wrong_param=value)
C. calculate_batting_average(hits=180, at_bats=600, decimal_places=3)
D. calculate_batting_average()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: soccer_stat.get_player_stats with description: Retrieve soccer player statistics for a given season. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'Name of the player.'}, 'season': {'type': 'string', 'description': 'Soccer season, usually specified by two years.'}, 'league': {'type': 'string', 'description': 'Optional - the soccer league, defaults to all leagues if not specified.'}}, 'required': ['player_name', 'season']}, if you are asked to Get the player stats of Cristiano Ronaldo in the 2019-2020 season, you will call...
A. similar_function(player_name=Cristiano Ronaldo, season=2019-2020, league=)
B. soccer_stat.get_player_stats(player_name=Cristiano Ronaldo, season=2019-2020, league=)
C. soccer_stat.get_player_stats(wrong_param=value)
D. soccer_stat.get_player_stats()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: player_stats.getLastGame with description: Get last game statistics for a specific player in basketball and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'The name of the basketball player.'}, 'team': {'type': 'string', 'description': 'The team that player currently plays for.'}, 'metrics': {'type': 'array', 'items': {'type': 'string', 'enum': ['Points', 'Rebounds', 'Assists', 'Blocks']}, 'description': 'Specific metrics to retrieve. If no value is specified, all available metrics will be returned by default.'}}, 'required': ['player_name', 'team']}, if you are asked to Get point and rebound stats for player 'LeBron James' from last basketball game, you will call...
A. similar_function(player_name=LeBron James, team=Los Angeles Lakers, metrics=['Points', 'Rebounds'])
B. player_stats.getLastGame(wrong_param=value)
C. player_stats.getLastGame(player_name=LeBron James, team=Los Angeles Lakers, metrics=['Points', 'Rebounds'])
D. player_stats.getLastGame()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: sports_stats.get_performance with description: Compute the performance score of a soccer player given his game stats for a specific tournament in a season. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'Name of the player.'}, 'tournament': {'type': 'string', 'description': 'Name of the soccer tournament.'}, 'season': {'type': 'string', 'description': "Specific season in format 'YYYY-YYYY'."}, 'performance_indicator': {'type': 'array', 'items': {'type': 'string', 'enum': ['Goals Scored', 'Assists Made', 'Saves Made', 'Cards Received']}, 'description': 'Array of performance indicators. Use as much as possible. Default to use all if not specified.'}}, 'required': ['player_name', 'tournament', 'season']}, if you are asked to Calculate the overall goal and assist of soccer player Messi in La Liga 2020-2021 season, you will call...
A. similar_function(player_name=Messi, tournament=La Liga, season=2020-2021, performance_indicator=['Goals Scored', 'Assists Made'])
B. sports_stats.get_performance(player_name=Messi, tournament=La Liga, season=2020-2021, performance_indicator=['Goals Scored', 'Assists Made'])
C. sports_stats.get_performance(wrong_param=value)
D. sports_stats.get_performance()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: average_batting_score with description: Get the average batting score of a cricketer for specified past matches. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'Name of the cricket player.'}, 'matches': {'type': 'integer', 'description': 'Number of past matches to consider for average calculation.'}, 'match_format': {'type': 'string', 'description': "Format of the cricket matches considered (e.g., 'T20', 'ODI', 'Test'). Default is 'T20'."}}, 'required': ['player_name', 'matches']}, if you are asked to Find average batting score of a cricketer, Virat Kohli for past 10 matches, you will call...
A. similar_function(player_name=Virat Kohli, matches=10, match_format=T20)
B. average_batting_score(wrong_param=value)
C. average_batting_score(player_name=Virat Kohli, matches=10, match_format=T20)
D. average_batting_score()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: game_result.get_winner with description: Get the winner of a specific basketball game. and parameters: {'type': 'dict', 'properties': {'teams': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of two teams who played the game.'}, 'date': {'type': 'string', 'description': 'The date of the game, formatted as YYYY-MM-DD.'}, 'venue': {'type': 'string', 'optional': True, 'description': "Optional: The venue of the game. Default is 'home'."}}, 'required': ['teams', 'date']}, if you are asked to Who won the basketball game between Lakers and Clippers on Jan 28, 2021?, you will call...
A. similar_function(teams=['Lakers', 'Clippers'], date=2021-01-28, venue=)
B. game_result.get_winner(wrong_param=value)
C. game_result.get_winner(teams=['Lakers', 'Clippers'], date=2021-01-28, venue=)
D. game_result.get_winner()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: sports.match_schedule with description: Retrieve the match schedule for a specific sports team. and parameters: {'type': 'dict', 'properties': {'team_name': {'type': 'string', 'description': 'The name of the sports team.'}, 'num_matches': {'type': 'integer', 'description': 'The number of upcoming matches you want to get.'}, 'league': {'type': 'string', 'description': "The sports league of the team. This is an optional parameter. Default is 'English Premier League'."}}, 'required': ['team_name', 'num_matches']}, if you are asked to What are the next five matches for Manchester United and who are they playing against in Premier League?, you will call...
A. similar_function(team_name=Manchester United, num_matches=5, league=English Premier League)
B. sports.match_schedule(wrong_param=value)
C. sports.match_schedule()
D. sports.match_schedule(team_name=Manchester United, num_matches=5, league=English Premier League)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: nfl_data.player_record with description: Retrieve the record of an NFL player in a specified season. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'The name of the NFL player.'}, 'season_year': {'type': 'integer', 'description': 'The year of the NFL season.'}, 'team': {'type': 'string', 'description': 'The NFL team that the player played for in that season. Default is all teams if not specified.'}}, 'required': ['player_name', 'season_year']}, if you are asked to Find me the record of Tom Brady in the 2020 NFL season., you will call...
A. nfl_data.player_record(player_name=Tom Brady, season_year=2020, team=)
B. similar_function(player_name=Tom Brady, season_year=2020, team=)
C. nfl_data.player_record(wrong_param=value)
D. nfl_data.player_record()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_career_stats with description: Retrieve the career statistics of a basketball player based on the player's name. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'The name of the basketball player.'}, 'team': {'type': 'string', 'description': 'The team that the player currently plays for or has played for (Optional). Default to use all teams if not specified.'}}, 'required': ['player_name']}, if you are asked to What are the career stats of basketball player LeBron James?, you will call...
A. similar_function(player_name=LeBron James, team=)
B. get_career_stats(player_name=LeBron James, team=)
C. get_career_stats(wrong_param=value)
D. get_career_stats()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: sports_db.find_athlete with description: Find the profile information of a sports athlete based on their full name. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The full name of the athlete.'}, 'team': {'type': 'string', 'description': 'The team the athlete belongs to. Default to all teams if not specified.'}, 'sport': {'type': 'string', 'description': 'The sport that athlete plays.', 'enum': ['Basketball', 'Baseball', 'Football', 'Soccer']}}, 'required': ['name', 'sport']}, if you are asked to Find me the detailed profile of basketball player Lebron James, you will call...
A. similar_function(name=Lebron James, sport=Basketball, team=)
B. sports_db.find_athlete(wrong_param=value)
C. sports_db.find_athlete(name=Lebron James, sport=Basketball, team=)
D. sports_db.find_athlete()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: player_statistic with description: Retrieves detailed player's statistics for a specific year. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': "The player's name."}, 'year': {'type': 'integer', 'description': 'Year for which the statistics will be displayed.'}, 'team_name': {'type': 'string', 'description': 'The name of the team(optional). Default to not use it if not specified.'}}, 'required': ['player_name', 'year']}, if you are asked to What are the statistics of Ronaldo's matches in 2021?, you will call...
A. similar_function(player_name=Ronaldo, year=2021, team_name=)
B. player_statistic(player_name=Ronaldo, year=2021, team_name=)
C. player_statistic(wrong_param=value)
D. player_statistic()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: celebrity_net_worth.get with description: Get the total net worth of a sports celebrity based on most recent data. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'The full name of the sports celebrity.'}, 'currency': {'type': 'string', 'description': "The currency in which the net worth will be returned. Default is 'USD'."}}, 'required': ['name', 'currency']}, if you are asked to What's the total worth in euro of Messi according to latest data?, you will call...
A. celebrity_net_worth.get(name=Lionel Messi, currency=EUR)
B. similar_function(name=Lionel Messi, currency=EUR)
C. celebrity_net_worth.get(wrong_param=value)
D. celebrity_net_worth.get()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: sports_celebrity.get_major_achievements with description: Returns a list of major achievements of a particular sports celebrity. and parameters: {'type': 'dict', 'properties': {'celebrity_name': {'type': 'string', 'description': 'Name of the sports celebrity.'}, 'sports': {'type': 'string', 'description': 'Type of sports the celebrity involved in. Default is Football.'}, 'team': {'type': 'string', 'description': "Optional. Team where celebrity currently plays. Default is 'all'"}}, 'required': ['celebrity_name']}, if you are asked to Find all the major achievements of the footballer Lionel Messi., you will call...
A. similar_function(celebrity_name=Lionel Messi, sports=Football, team=)
B. sports_celebrity.get_major_achievements(wrong_param=value)
C. sports_celebrity.get_major_achievements(celebrity_name=Lionel Messi, sports=Football, team=)
D. sports_celebrity.get_major_achievements()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_defense_ranking with description: Retrieve the defence ranking of NBA teams in a specified season. and parameters: {'type': 'dict', 'properties': {'season': {'type': 'integer', 'description': 'The NBA season to get defence ranking from.'}, 'top': {'type': 'integer', 'default': 1, 'description': 'Number of top teams in defence ranking to fetch.'}}, 'required': ['season']}, if you are asked to Get the NBA team's ranking with the best defence in the 2021 season., you will call...
A. get_defense_ranking(season=2021, top=1)
B. similar_function(season=2021, top=1)
C. get_defense_ranking(wrong_param=value)
D. get_defense_ranking()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_sport_ranking with description: Retrieve the current world ranking of a sportsperson based on the sport and player's name. and parameters: {'type': 'dict', 'properties': {'sport': {'type': 'string', 'description': 'Name of the sport.'}, 'player_name': {'type': 'string', 'description': 'Name of the player.'}, 'gender': {'type': 'string', 'description': 'Gender of the player. This is optional. The possible values are male or female.', 'default': 'all'}}, 'required': ['sport', 'player_name']}, if you are asked to Find the current world rank of a Tennis player, Serena Williams., you will call...
A. similar_function(sport=Tennis, player_name=Serena Williams, gender=)
B. get_sport_ranking(wrong_param=value)
C. get_sport_ranking(sport=Tennis, player_name=Serena Williams, gender=)
D. get_sport_ranking()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: get_team_rank with description: Get the team ranking in a sports league based on season and type. and parameters: {'type': 'dict', 'properties': {'team_name': {'type': 'string', 'description': 'The name of the sports team.'}, 'league': {'type': 'string', 'description': 'The name of the league in which the team competes.'}, 'season': {'type': 'string', 'description': "The season for which the team's ranking is sought."}, 'type': {'type': 'string', 'description': 'Type of the season: regular or playoff.', 'enum': ['regular', 'playoff']}}, 'required': ['team_name', 'league', 'season', 'type']}, if you are asked to Find the ranking of LA Lakers in the NBA 2021 regular season., you will call...
A. get_team_rank(team_name=LA Lakers, league=NBA, season=2021, type=regular)
B. similar_function(team_name=LA Lakers, league=NBA, season=2021, type=regular)
C. get_team_rank(wrong_param=value)
D. get_team_rank()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_team_ranking with description: Retrieve the FIFA ranking of a specific soccer team for a certain year. and parameters: {'type': 'dict', 'properties': {'team_name': {'type': 'string', 'description': 'The name of the soccer team.'}, 'year': {'type': 'integer', 'description': 'The year for which the ranking is to be retrieved.'}, 'gender': {'type': 'string', 'description': "The gender of the team. It can be either 'men' or 'women'. Default is 'men'."}}, 'required': ['team_name', 'year']}, if you are asked to What is the FIFA ranking of Germany's men soccer team for the year 2021?, you will call...
A. similar_function(team_name=Germany, year=2021, gender=men)
B. get_team_ranking(wrong_param=value)
C. get_team_ranking()
D. get_team_ranking(team_name=Germany, year=2021, gender=men)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: sports_ranking with description: Fetch the ranking of a specific sports team in a specific league and parameters: {'type': 'dict', 'properties': {'team': {'type': 'string', 'description': 'The name of the team.'}, 'league': {'type': 'string', 'description': 'The name of the league.'}, 'season': {'type': 'integer', 'description': 'Optional parameter to specify the season, default is the current season if not specified.'}}, 'required': ['team', 'league']}, if you are asked to What is the ranking of Manchester United in Premier League?, you will call...
A. similar_function(team=Manchester United, league=Premier League, season=)
B. sports_ranking(wrong_param=value)
C. sports_ranking()
D. sports_ranking(team=Manchester United, league=Premier League, season=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: sports_ranking.get_team_position with description: Retrieve a team's position and stats in the basketball league for a given season. and parameters: {'type': 'dict', 'properties': {'team': {'type': 'string', 'description': 'The name of the team.'}, 'season': {'type': 'string', 'description': 'The season for which data should be fetched.'}, 'detailed': {'type': 'boolean', 'description': 'Flag to retrieve detailed stats or just the position.', 'default': False}}, 'required': ['team', 'season']}, if you are asked to Fetch the basketball league standings, where Golden State Warriors stand in current 2022-2023 season with details, you will call...
A. similar_function(team=Golden State Warriors, season=2022-2023, detailed=True)
B. sports_ranking.get_team_position(team=Golden State Warriors, season=2022-2023, detailed=True)
C. sports_ranking.get_team_position(wrong_param=value)
D. sports_ranking.get_team_position()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: sports_ranking with description: Get the ranking of a team in a given sports league and season. and parameters: {'type': 'dict', 'properties': {'team': {'type': 'string', 'description': 'The name of the team.'}, 'league': {'type': 'string', 'description': 'The name of the sports league.'}, 'season': {'type': 'string', 'description': 'The season for which ranking needs to be obtained.'}}, 'required': ['team', 'league', 'season']}, if you are asked to What's the ranking of Barcelona in the 2021 La Liga season?, you will call...
A. similar_function(team=Barcelona, league=La Liga, season=2021)
B. sports_ranking(wrong_param=value)
C. sports_ranking(team=Barcelona, league=La Liga, season=2021)
D. sports_ranking()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: sports_ranking.get_current with description: Retrieve the current ranking of a specific team in a particular league. and parameters: {'type': 'dict', 'properties': {'team': {'type': 'string', 'description': 'The name of the team whose ranking is sought.'}, 'league': {'type': 'string', 'description': 'The league in which the team participates.'}, 'season': {'type': 'string', 'description': 'The season for which the ranking is sought. Defaults to the current season if not provided.'}}, 'required': ['team', 'league']}, if you are asked to Get the current ranking for Liverpool Football Club in the Premier League., you will call...
A. similar_function(team=Liverpool Football Club, league=Premier League, season=)
B. sports_ranking.get_current(wrong_param=value)
C. sports_ranking.get_current()
D. sports_ranking.get_current(team=Liverpool Football Club, league=Premier League, season=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: sports_ranking.get_top_player with description: Get the top player in a specific sport. and parameters: {'type': 'dict', 'properties': {'sport': {'type': 'string', 'description': 'The type of sport.'}, 'gender': {'type': 'string', 'description': 'The gender of the sport category. Optional.', 'default': 'men'}}, 'required': ['sport']}, if you are asked to Who is ranked as the top player in woman tennis?, you will call...
A. similar_function(sport=tennis, gender=women)
B. sports_ranking.get_top_player(wrong_param=value)
C. sports_ranking.get_top_player(sport=tennis, gender=women)
D. sports_ranking.get_top_player()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: team_score.get_latest with description: Retrieve the score of the most recent game for a specified sports team. and parameters: {'type': 'dict', 'properties': {'team': {'type': 'string', 'description': 'Name of the sports team.'}, 'include_opponent': {'type': 'boolean', 'description': 'Include the name of the opponent team in the return.', 'default': False}}, 'required': ['team']}, if you are asked to Find the score of last game for Los Angeles Lakers including its opponent name., you will call...
A. similar_function(team=Los Angeles Lakers, include_opponent=True)
B. team_score.get_latest(wrong_param=value)
C. team_score.get_latest(team=Los Angeles Lakers, include_opponent=True)
D. team_score.get_latest()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: sports.match_results with description: Returns the results of a given match between two teams. and parameters: {'type': 'dict', 'properties': {'team1': {'type': 'string', 'description': 'The name of the first team.'}, 'team2': {'type': 'string', 'description': 'The name of the second team.'}, 'season': {'type': 'string', 'description': 'The season when the match happened. Default is the current season.'}}, 'required': ['team1', 'team2']}, if you are asked to Who won the last match between Chicago Bulls and Los Angeles Lakers?, you will call...
A. similar_function(team1=Chicago Bulls, team2=Los Angeles Lakers, season=)
B. sports.match_results(wrong_param=value)
C. sports.match_results()
D. sports.match_results(team1=Chicago Bulls, team2=Los Angeles Lakers, season=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_team_score with description: Retrieves the latest game score, individual player stats, and team stats for a specified sports team. and parameters: {'type': 'dict', 'properties': {'team_name': {'type': 'string', 'description': 'The name of the sports team.'}, 'league': {'type': 'string', 'description': 'The league that the team is part of.'}, 'include_player_stats': {'type': 'boolean', 'default': False, 'description': 'Indicates if individual player statistics should be included in the result. Default is false.'}}, 'required': ['team_name', 'league']}, if you are asked to Get the latest game score and statistics for Los Angeles Lakers in NBA., you will call...
A. get_team_score(team_name=Los Angeles Lakers, league=NBA, include_player_stats=)
B. similar_function(team_name=Los Angeles Lakers, league=NBA, include_player_stats=)
C. get_team_score(wrong_param=value)
D. get_team_score()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: sports_team.get_schedule with description: Fetches the schedule of the specified sports team for the specified number of games in the given league. and parameters: {'type': 'dict', 'properties': {'team_name': {'type': 'string', 'description': 'The name of the sports team.'}, 'num_of_games': {'type': 'integer', 'description': 'Number of games for which to fetch the schedule.'}, 'league': {'type': 'string', 'description': 'The name of the sports league. If not provided, the function will fetch the schedule for all games, regardless of the league.'}, 'location': {'type': 'string', 'description': 'Optional. The city or venue where games are to be held. If not provided, default that all venues will be considered.'}}, 'required': ['team_name', 'num_of_games', 'league']}, if you are asked to Give me the schedule of Manchester United for the next 6 games in Premier League., you will call...
A. sports_team.get_schedule(team_name=Manchester United, num_of_games=6, league=Premier League, location=)
B. similar_function(team_name=Manchester United, num_of_games=6, league=Premier League, location=)
C. sports_team.get_schedule(wrong_param=value)
D. sports_team.get_schedule()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: boardgame.get_info with description: Retrieve detailed information of a board game. and parameters: {'type': 'dict', 'properties': {'name': {'type': 'string', 'description': 'Name of the board game.'}, 'parameters': {'type': 'array', 'items': {'type': 'string', 'enum': ['player count', 'playing time', 'age', 'mechanics', 'rating']}, 'description': 'Game characteristics interested.'}, 'language': {'type': 'string', 'description': 'The preferred language for the game information, default is English'}}, 'required': ['name', 'parameters']}, if you are asked to Find the rating and player count of the board game 'Ticket to Ride'., you will call...
A. similar_function(name=Ticket to Ride, parameters=['rating', 'player count'], language=)
B. boardgame.get_info(name=Ticket to Ride, parameters=['rating', 'player count'], language=)
C. boardgame.get_info(wrong_param=value)
D. boardgame.get_info()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: monopoly_odds_calculator with description: Calculates the probability of rolling a certain sum with two dice, commonly used in board game like Monopoly. and parameters: {'type': 'dict', 'properties': {'number': {'type': 'integer', 'description': 'The number for which the odds are calculated.'}, 'dice_number': {'type': 'integer', 'description': 'The number of dice involved in the roll.'}, 'dice_faces': {'type': 'integer', 'description': 'The number of faces on a single die. Default is 6 for standard six-faced die.'}}, 'required': ['number', 'dice_number']}, if you are asked to Calculate the odds of rolling a 7 with two dice in the board game Monopoly., you will call...
A. monopoly_odds_calculator(number=7, dice_number=2, dice_faces=6)
B. similar_function(number=7, dice_number=2, dice_faces=6)
C. monopoly_odds_calculator(wrong_param=value)
D. monopoly_odds_calculator()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: board_game_info with description: Get the information about a board game from a database.  and parameters: {'type': 'dict', 'properties': {'game_name': {'type': 'string', 'description': 'Name of the board game.'}, 'info_required': {'type': 'array', 'items': {'type': 'string', 'enum': ['average_review_rating', 'age_range', 'number_of_players', 'playing_time', 'genre']}, 'description': 'Array of information requested for the game.'}}, 'required': ['game_name', 'info_required']}, if you are asked to What's the average review rating and the age range for the board game 'Catan'?, you will call...
A. similar_function(game_name=Catan, info_required=['average_review_rating', 'age_range'])
B. board_game_info(wrong_param=value)
C. board_game_info(game_name=Catan, info_required=['average_review_rating', 'age_range'])
D. board_game_info()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: board_game.chess.get_top_players with description: Find top chess players in a location based on rating. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city you want to find the players from.'}, 'minimum_rating': {'type': 'integer', 'description': 'Minimum rating to filter the players.'}, 'number_of_players': {'type': 'integer', 'default': 10, 'description': 'Number of players you want to retrieve, default value is 10'}}, 'required': ['location', 'minimum_rating']}, if you are asked to Find the top chess players in New York with a rating above 2300., you will call...
A. board_game.chess.get_top_players(location=New York, minimum_rating=2300, number_of_players=)
B. similar_function(location=New York, minimum_rating=2300, number_of_players=)
C. board_game.chess.get_top_players(wrong_param=value)
D. board_game.chess.get_top_players()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: chess.rating with description: Fetches the current chess rating of a given player and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'The full name of the chess player.'}, 'variant': {'type': 'string', 'description': "The variant of chess for which rating is requested (e.g., 'classical', 'blitz', 'bullet'). Default is 'classical'."}}, 'required': ['player_name']}, if you are asked to What's the chess classical rating of Magnus Carlsen?, you will call...
A. similar_function(player_name=Magnus Carlsen, variant=classical)
B. chess.rating(player_name=Magnus Carlsen, variant=classical)
C. chess.rating(wrong_param=value)
D. chess.rating()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: detailed_weather_forecast with description: Retrieve a detailed weather forecast for a specific location and time frame, including high/low temperatures, humidity, and precipitation. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city that you want to get the weather for.'}, 'days': {'type': 'integer', 'description': 'Number of days for the forecast.'}, 'details': {'type': 'array', 'items': {'type': 'string', 'enum': ['high_low_temperature', 'humidity', 'precipitation']}, 'description': 'Specific weather details required in the forecast.'}}, 'required': ['location', 'days', 'details']}, if you are asked to Find the high and low temperatures, humidity, and precipitation for London, United Kingdom for the next 3 days., you will call...
A. similar_function(location=London, United Kingdom, days=3, details=['high_low_temperature', 'humidity', 'precipitation'])
B. detailed_weather_forecast(location=London, United Kingdom, days=3, details=['high_low_temperature', 'humidity', 'precipitation'])
C. detailed_weather_forecast(wrong_param=value)
D. detailed_weather_forecast()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: blackjack.check_winner with description: Checks and determines the winner in a game of blackjack. and parameters: {'type': 'dict', 'properties': {'player_cards': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Cards held by the player.'}, 'dealer_cards': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Cards held by the dealer.'}, 'ace_value': {'type': 'integer', 'description': 'The value considered for the ace card, can be either 1 or 11.', 'default': 11}}, 'required': ['player_cards', 'dealer_cards']}, if you are asked to Check who is the winner in a game of blackjack given player having A and 10, dealer having 10 and 9. The Ace is considered 1., you will call...
A. similar_function(player_cards=['A', '10'], dealer_cards=['10', '9'], ace_value=1)
B. blackjack.check_winner(player_cards=['A', '10'], dealer_cards=['10', '9'], ace_value=1)
C. blackjack.check_winner(wrong_param=value)
D. blackjack.check_winner()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: find_card_in_deck with description: Locate a particular card in a deck based on rank and suit. and parameters: {'type': 'dict', 'properties': {'rank': {'type': 'string', 'description': 'Rank of the card (e.g. Ace, Two, King).'}, 'suit': {'type': 'string', 'description': 'Suit of the card (e.g. Hearts, Spades, Diamonds, Clubs).'}, 'deck': {'type': 'array', 'items': {'type': 'dict', 'properties': {'rank': {'type': 'string'}, 'suit': {'type': 'string'}}}, 'description': 'Deck of cards. If not provided, the deck will be a standard 52 card deck'}}, 'required': ['rank', 'suit']}, if you are asked to Find a Card of rank 'Queen' and suit 'Hearts' in the deck., you will call...
A. find_card_in_deck(rank=Queen, suit=Hearts, deck=)
B. similar_function(rank=Queen, suit=Hearts, deck=)
C. find_card_in_deck(wrong_param=value)
D. find_card_in_deck()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: cards.shuffle_and_draw with description: Shuffle a standard deck of 52 cards and draw a specified number of cards from the top. and parameters: {'type': 'dict', 'properties': {'num_cards': {'type': 'integer', 'description': 'Number of cards to be drawn. The default is 1 if no value is provided.'}}, 'required': ['num_cards']}, if you are asked to Shuffle a deck of cards, and draw 3 cards from the top., you will call...
A. similar_function(num_cards=3)
B. cards.shuffle_and_draw(num_cards=3)
C. cards.shuffle_and_draw(wrong_param=value)
D. cards.shuffle_and_draw()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: poker_game_winner with description: Identify the winner in a poker game based on the cards. and parameters: {'type': 'dict', 'properties': {'players': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Names of the players in a list.'}, 'cards': {'type': 'dict', 'description': 'An object containing the player name as key and the cards as values in a list.'}, 'type': {'type': 'string', 'description': "Type of poker game. Defaults to 'Texas Holdem'"}}, 'required': ['players', 'cards']}, if you are asked to In a texas holdem game, Who won in the poker game with players Alex, Sam, Robert and Steve given the cards Alex':['A of spades', 'K of spades'], 'Sam': ['2 of diamonds', '3 of clubs'], 'Robert': ['Q of hearts', '10 of hearts'], 'Steve': ['4 of spades', '5 of spades']?, you will call...
A. similar_function(players=['Alex', 'Sam', 'Robert', 'Steve'], cards={'Alex': [['A of spades', 'K of spades']], 'Sam': [['2 of diamonds', '3 of clubs']], 'Robert': [['Q of hearts', '10 of hearts']], 'Steve': [['4 of spades', '5 of spades']]}, type=Texas Holdem)
B. poker_game_winner(players=['Alex', 'Sam', 'Robert', 'Steve'], cards={'Alex': [['A of spades', 'K of spades']], 'Sam': [['2 of diamonds', '3 of clubs']], 'Robert': [['Q of hearts', '10 of hearts']], 'Steve': [['4 of spades', '5 of spades']]}, type=Texas Holdem)
C. poker_game_winner(wrong_param=value)
D. poker_game_winner()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: card_game_probability.calculate with description: Calculate the probability of drawing a certain card or suit from a deck of cards. and parameters: {'type': 'dict', 'properties': {'total_cards': {'type': 'integer', 'description': 'Total number of cards in the deck.'}, 'desired_cards': {'type': 'integer', 'description': 'Number of cards in the deck that satisfy the conditions.'}, 'cards_drawn': {'type': 'integer', 'default': 1, 'description': 'Number of cards drawn from the deck.'}}, 'required': ['total_cards', 'desired_cards']}, if you are asked to What is the probability of drawing a heart card from a deck of 52 cards?, you will call...
A. card_game_probability.calculate(total_cards=52, desired_cards=13, cards_drawn=)
B. similar_function(total_cards=52, desired_cards=13, cards_drawn=)
C. card_game_probability.calculate(wrong_param=value)
D. card_game_probability.calculate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: poker_probability.full_house with description: Calculate the probability of getting a full house in a poker game. and parameters: {'type': 'dict', 'properties': {'deck_size': {'type': 'integer', 'description': 'The size of the deck. Default is 52.'}, 'hand_size': {'type': 'integer', 'description': 'The size of the hand. Default is 5.'}}, 'required': ['deck_size', 'hand_size']}, if you are asked to What is the probability of getting a full house in poker?, you will call...
A. similar_function(deck_size=52, hand_size=5)
B. poker_probability.full_house(wrong_param=value)
C. poker_probability.full_house()
D. poker_probability.full_house(deck_size=52, hand_size=5)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: card_games.poker_determine_winner with description: Determines the winner in a game of Poker based on the cards in each players' hands. and parameters: {'type': 'dict', 'properties': {'player1': {'type': 'string', 'description': "The first player's name."}, 'hand1': {'type': 'array', 'items': {'type': 'string'}, 'description': "The list of cards (as strings) in first player's hand. E.g ['10â ', 'Jâ ']"}, 'player2': {'type': 'string', 'description': "The second player's name."}, 'hand2': {'type': 'array', 'items': {'type': 'string'}, 'description': "The list of cards (as strings) in second player's hand. E.g ['9â¥', '10â¥']"}}, 'required': ['player1', 'hand1', 'player2', 'hand2']}, if you are asked to Determine the winner in a Poker game with John having a Hand of 8â¥, 10â¥, Jâ¥, Qâ¥, Kâ¥ and Mike having 9â , Jâ , 10â , Qâ , Kâ ., you will call...
A. card_games.poker_determine_winner(player1=John, hand1=['8â¥', '10â¥', 'Jâ¥', 'Qâ¥', 'Kâ¥'], player2=Mike, hand2=['9â ', 'Jâ ', '10â ', 'Qâ ', 'Kâ '])
B. similar_function(player1=John, hand1=['8â¥', '10â¥', 'Jâ¥', 'Qâ¥', 'Kâ¥'], player2=Mike, hand2=['9â ', 'Jâ ', '10â ', 'Qâ ', 'Kâ '])
C. card_games.poker_determine_winner(wrong_param=value)
D. card_games.poker_determine_winner()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: deck_of_cards.odds with description: Compute the probability of drawing a specific suit from a given deck of cards. and parameters: {'type': 'dict', 'properties': {'suit': {'type': 'string', 'description': "The card suit. Valid values include: 'spades', 'clubs', 'hearts', 'diamonds'."}, 'deck_type': {'type': 'string', 'description': 'Type of deck, normal deck includes joker, and without_joker deck excludes joker.', 'default': 'normal'}}, 'required': ['suit', 'deck_type']}, if you are asked to What are the odds of drawing a heart card from a deck without joker?, you will call...
A. similar_function(suit=hearts, deck_type=without_joker)
B. deck_of_cards.odds(wrong_param=value)
C. deck_of_cards.odds()
D. deck_of_cards.odds(suit=hearts, deck_type=without_joker)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: game_list.get_games with description: Get a list of video games based on release year, multiplayer functionality and ESRB rating and parameters: {'type': 'dict', 'properties': {'release_year': {'type': 'integer', 'description': 'The year the game was released.'}, 'multiplayer': {'type': 'boolean', 'description': 'Whether the game has multiplayer functionality.'}, 'ESRB_rating': {'type': 'string', 'description': 'The ESRB rating of the game.'}}, 'required': ['release_year', 'multiplayer', 'ESRB_rating']}, if you are asked to Find all multi-player games released in 2019 with an ESRB rating of 'Everyone', you will call...
A. game_list.get_games(release_year=2019, multiplayer=True, ESRB_rating=Everyone)
B. similar_function(release_year=2019, multiplayer=True, ESRB_rating=Everyone)
C. game_list.get_games(wrong_param=value)
D. game_list.get_games()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: game_stats.fetch_player_statistics with description: Fetch player statistics for a specific video game for a given user. and parameters: {'type': 'dict', 'properties': {'game': {'type': 'string', 'description': 'The name of the video game.'}, 'username': {'type': 'string', 'description': 'The username of the player.'}, 'platform': {'type': 'string', 'description': 'The platform user is playing on.', 'default': 'PC'}}, 'required': ['game', 'username']}, if you are asked to Fetch player statistics of 'Zelda' on Switch for user 'Sam'., you will call...
A. similar_function(game=Zelda, username=Sam, platform=Switch)
B. game_stats.fetch_player_statistics(wrong_param=value)
C. game_stats.fetch_player_statistics()
D. game_stats.fetch_player_statistics(game=Zelda, username=Sam, platform=Switch)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: get_game_item_stats with description: Retrieve the statistics of a specific item in a specific video game. and parameters: {'type': 'dict', 'properties': {'game': {'type': 'string', 'description': 'The game to retrieve information from.'}, 'item': {'type': 'string', 'description': 'The name of the item in the game.'}, 'stat': {'type': 'string', 'description': 'Specific statistic required.'}}, 'required': ['game', 'item', 'stat']}, if you are asked to What's the power rating for the Weapon 'Guardian Sword+' in the game 'Legend of Zelda: Breath of the Wild'?, you will call...
A. similar_function(game=Legend of Zelda: Breath of the Wild, item=Guardian Sword+, stat=Power)
B. get_game_item_stats(wrong_param=value)
C. get_game_item_stats(game=Legend of Zelda: Breath of the Wild, item=Guardian Sword+, stat=Power)
D. get_game_item_stats()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: game_valuation with description: Get the current market value of a vintage video game. and parameters: {'type': 'dict', 'properties': {'game_name': {'type': 'string', 'description': 'The name of the game.'}, 'release_year': {'type': 'integer', 'description': 'The year the game was released.'}, 'condition': {'type': 'string', 'enum': ['New', 'Like New', 'Used', 'Fair', 'Poor'], 'description': "The condition of the game. Default is 'Used'."}}, 'required': ['game_name', 'release_year']}, if you are asked to Find the value of a vintage Super Mario Bros. game from 1985 like new., you will call...
A. game_valuation(game_name=Super Mario Bros., release_year=1985, condition=Like New)
B. similar_function(game_name=Super Mario Bros., release_year=1985, condition=Like New)
C. game_valuation(wrong_param=value)
D. game_valuation()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_collectables_in_season with description: Retrieve a list of collectable items in a specific game during a specified season. and parameters: {'type': 'dict', 'properties': {'game_name': {'type': 'string', 'description': 'Name of the game.'}, 'season': {'type': 'string', 'description': 'The season for which to retrieve the collectable items.'}, 'item_type': {'type': 'string', 'description': "The type of item to search for. Default is 'all'. Possible values: 'all', 'bug', 'fish', 'sea creatures', etc."}}, 'required': ['game_name', 'season']}, if you are asked to Get all collectable items from the game 'Animal Crossing: New Horizons' during the Spring season., you will call...
A. get_collectables_in_season(game_name=Animal Crossing: New Horizons, season=Spring, item_type=)
B. similar_function(game_name=Animal Crossing: New Horizons, season=Spring, item_type=)
C. get_collectables_in_season(wrong_param=value)
D. get_collectables_in_season()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: soccer.get_last_match with description: Retrieve the details of the last match played by a specified soccer club. and parameters: {'type': 'dict', 'properties': {'team_name': {'type': 'string', 'description': 'The name of the soccer club.'}, 'include_stats': {'type': 'boolean', 'description': 'If true, include match statistics like possession, shots on target etc. Default is false.'}}, 'required': ['team_name']}, if you are asked to Get me the details of the last game played by Liverpool F.C. Include its statistics., you will call...
A. soccer.get_last_match(team_name=Liverpool F.C., include_stats=True)
B. similar_function(team_name=Liverpool F.C., include_stats=True)
C. soccer.get_last_match(wrong_param=value)
D. soccer.get_last_match()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: create_player_profile with description: Create a new player profile with character name, class and starting level. and parameters: {'type': 'dict', 'properties': {'player_name': {'type': 'string', 'description': 'The desired name of the player.'}, '_class': {'type': 'string', 'description': 'The character class for the player'}, 'starting_level': {'type': 'integer', 'description': 'The starting level for the player', 'default': 1}}, 'required': ['player_name', '_class']}, if you are asked to Create a new player profile for the game with name 'StarPlayer' and character class 'Mage', set the starting level to 5., you will call...
A. similar_function(player_name=StarPlayer, _class=Mage, starting_level=5)
B. create_player_profile(wrong_param=value)
C. create_player_profile()
D. create_player_profile(player_name=StarPlayer, _class=Mage, starting_level=5)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: game_score.highest with description: Retrieve the highest score achieved by any player in a specific game. and parameters: {'type': 'dict', 'properties': {'game': {'type': 'string', 'description': 'The name of the online game.'}, 'platform': {'type': 'string', 'description': 'The platform where the game is played, e.g. PC, Xbox, Playstation'}, 'region': {'type': 'string', 'description': "The geographic region of the player. Defaults to 'Global'"}}, 'required': ['game', 'platform']}, if you are asked to Find the highest score achieved by any player in the online game 'Overwatch' on PC globally., you will call...
A. similar_function(game=Overwatch, platform=PC, region=Global)
B. game_score.highest(game=Overwatch, platform=PC, region=Global)
C. game_score.highest(wrong_param=value)
D. game_score.highest()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_highest_scoring_player with description: Retrieve the highest scoring player in a specific game and season. and parameters: {'type': 'dict', 'properties': {'game': {'type': 'string', 'description': 'The game in which you want to find the highest scoring player.'}, 'season': {'type': 'string', 'description': 'The season during which the high score was achieved.'}}, 'required': ['game', 'season']}, if you are asked to Get the highest scoring player of game 'Valorant' in 2022 season., you will call...
A. get_highest_scoring_player(game=Valorant, season=2022)
B. similar_function(game=Valorant, season=2022)
C. get_highest_scoring_player(wrong_param=value)
D. get_highest_scoring_player()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: multiplayer_game_finder with description: Locate multiplayer games that match specific criteria such as rating, platform compatibility, genre, etc. and parameters: {'type': 'dict', 'properties': {'platform': {'type': 'string', 'description': 'The platform you want the game to be compatible with, e.g. Windows 10, PS5.'}, 'rating': {'type': 'float', 'description': 'Desired minimum game rating on a 5.0 scale.'}, 'genre': {'type': 'string', 'description': "Desired game genre, e.g. Action, Adventure, Racing. Default is 'Action'.", 'enum': ['Action', 'Adventure', 'Racing', 'Strategy', 'Simulation']}}, 'required': ['platform', 'rating']}, if you are asked to Find me a multiplayer game with rating above 4.5 and compatible with Windows 10., you will call...
A. similar_function(platform=Windows 10, rating=4.5, genre=)
B. multiplayer_game_finder(platform=Windows 10, rating=4.5, genre=)
C. multiplayer_game_finder(wrong_param=value)
D. multiplayer_game_finder()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: gamespot.getAverageUserScore with description: Retrieve the average user score of a game from GameSpot. and parameters: {'type': 'dict', 'properties': {'game_name': {'type': 'string', 'description': 'The name of the game.'}, 'platform': {'type': 'string', 'description': 'The platform the game was released on (e.g., Nintendo Switch, PS5, etc.)', 'default': 'all platforms'}}, 'required': ['game_name', 'platform']}, if you are asked to Get the average user score for the game 'The Legend of Zelda: Breath of the Wild' from GameSpot., you will call...
A. similar_function(game_name=The Legend of Zelda: Breath of the Wild, platform=Nintendo Switch)
B. gamespot.getAverageUserScore(game_name=The Legend of Zelda: Breath of the Wild, platform=Nintendo Switch)
C. gamespot.getAverageUserScore(wrong_param=value)
D. gamespot.getAverageUserScore()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: find_recipes with description: Find recipes based on dietary restrictions, meal type, and preferred ingredients. and parameters: {'type': 'dict', 'properties': {'diet': {'type': 'string', 'description': "The dietary restrictions, e.g., 'vegan', 'gluten-free'."}, 'meal_type': {'type': 'string', 'description': "The type of meal, e.g., 'dinner', 'breakfast'."}, 'ingredients': {'type': 'array', 'items': {'type': 'string'}, 'description': 'The preferred ingredients. If left blank, it will default to return general recipes.'}}, 'required': ['diet', 'meal_type']}, if you are asked to What are some gluten-free recipes for dinner?, you will call...
A. find_recipes(diet=gluten-free, meal_type=dinner, ingredients=)
B. similar_function(diet=gluten-free, meal_type=dinner, ingredients=)
C. find_recipes(wrong_param=value)
D. find_recipes()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_vegan_recipe with description: Retrieve a vegan soup recipe based on the provided cooking time. and parameters: {'type': 'dict', 'properties': {'dish_type': {'type': 'string', 'description': 'The type of dish, e.g. soup, dessert, etc.', 'enum': ['soup', 'main dish', 'dessert', 'salad']}, 'cooking_time': {'type': 'integer', 'description': 'The maximum cooking time for the recipe in minutes.'}, 'ingredient_preference': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Preferred ingredients to be included in the recipe, if any. Default to not use it if not provided.'}}, 'required': ['dish_type', 'cooking_time']}, if you are asked to Find a vegan soup recipe that takes under 30 minutes to make., you will call...
A. similar_function(dish_type=soup, cooking_time=30, ingredient_preference=)
B. get_vegan_recipe(dish_type=soup, cooking_time=30, ingredient_preference=)
C. get_vegan_recipe(wrong_param=value)
D. get_vegan_recipe()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: recipe_info.get_calories with description: Retrieve the amount of calories from a specific recipe in a food website. and parameters: {'type': 'dict', 'properties': {'website': {'type': 'string', 'description': 'The food website that has the recipe.'}, 'recipe': {'type': 'string', 'description': 'Name of the recipe.'}, 'optional_meal_time': {'type': 'string', 'description': "Specific meal time of the day for the recipe (optional, could be 'Breakfast', 'Lunch', 'Dinner'). Default is all if not specified."}}, 'required': ['website', 'recipe']}, if you are asked to How many calories in the Beef Lasagna Recipe from Foodnetwork.com?, you will call...
A. similar_function(website=Foodnetwork.com, recipe=Beef Lasagna, optional_meal_time=)
B. recipe_info.get_calories(website=Foodnetwork.com, recipe=Beef Lasagna, optional_meal_time=)
C. recipe_info.get_calories(wrong_param=value)
D. recipe_info.get_calories()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: recipe_finder.find with description: Find a recipe based on dietary preferences, number of servings, and preparation time. and parameters: {'type': 'dict', 'properties': {'servings': {'type': 'integer', 'description': 'The number of people that the recipe should serve.'}, 'diet': {'type': 'string', 'description': "Any dietary restrictions like 'vegan', 'vegetarian', 'gluten-free' etc."}, 'prep_time': {'type': 'integer', 'description': 'The maximum amount of time (in minutes) the preparation should take. Default is 60 minutes.'}}, 'required': ['servings', 'diet']}, if you are asked to Find me a recipe that serves 2 people, is vegan, and takes under 30 minutes to prepare., you will call...
A. recipe_finder.find(servings=2, diet=vegan, prep_time=30)
B. similar_function(servings=2, diet=vegan, prep_time=30)
C. recipe_finder.find(wrong_param=value)
D. recipe_finder.find()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_recipe with description: Fetch the recipe for a specific dish along with preparation steps. and parameters: {'type': 'dict', 'properties': {'dish_name': {'type': 'string', 'description': 'Name of the dish whose recipe needs to be fetched.'}, 'diet_preference': {'type': 'string', 'description': 'Preferred dietary consideration like vegan, vegetarian, gluten-free etc. Default is none.', 'default': 'none'}}, 'required': ['dish_name']}, if you are asked to Get the recipe for vegan chocolate cake including the steps for preparation., you will call...
A. similar_function(dish_name=chocolate cake, diet_preference=vegan)
B. get_recipe(wrong_param=value)
C. get_recipe(dish_name=chocolate cake, diet_preference=vegan)
D. get_recipe()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: recipe_search with description: Search for a cooking recipe based on specific dietary needs and time constraint. and parameters: {'type': 'dict', 'properties': {'diet': {'type': 'array', 'items': {'type': 'string', 'enum': ['Gluten Free', 'Dairy Free', 'Vegan', 'Vegetarian']}, 'description': 'Specific dietary need.'}, 'time_limit': {'type': 'integer', 'description': 'The maximum time to prepare the recipe in minutes. Default is 60 minutes.'}, 'dish': {'type': 'string', 'description': 'The name of the dish to search for. Default is not use if not specified.'}}, 'required': ['dish', 'diet']}, if you are asked to Find a gluten-free cookie recipe that takes less than 30 minutes to prepare., you will call...
A. recipe_search(diet=['Gluten Free'], time_limit=30, dish=cookie)
B. similar_function(diet=['Gluten Free'], time_limit=30, dish=cookie)
C. recipe_search(wrong_param=value)
D. recipe_search()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: recipe_search with description: Search for a recipe given dietary restriction, ingredients, and number of servings. and parameters: {'type': 'dict', 'properties': {'dietary_restriction': {'type': 'string', 'description': "The dietary restriction, e.g., 'Vegetarian'."}, 'ingredients': {'type': 'array', 'items': {'type': 'string'}, 'description': 'The list of ingredients.'}, 'servings': {'type': 'integer', 'description': 'The number of servings the recipe should make'}}, 'required': ['dietary_restriction', 'ingredients', 'servings']}, if you are asked to Give me a recipe for a vegetarian pasta with cheese for 2 servings., you will call...
A. similar_function(dietary_restriction=Vegetarian, ingredients=['pasta', 'cheese'], servings=2)
B. recipe_search(wrong_param=value)
C. recipe_search(dietary_restriction=Vegetarian, ingredients=['pasta', 'cheese'], servings=2)
D. recipe_search()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: find_recipe with description: Locate a recipe based on name and its calorie content and parameters: {'type': 'dict', 'properties': {'recipeName': {'type': 'string', 'description': "The recipe's name."}, 'maxCalories': {'type': 'integer', 'description': 'The maximum calorie content of the recipe.', 'default': 1000}}, 'required': ['recipeName']}, if you are asked to Find a recipe for pasta carbonara which contains only less than 500 calories., you will call...
A. similar_function(recipeName=pasta carbonara, maxCalories=500)
B. find_recipe(wrong_param=value)
C. find_recipe()
D. find_recipe(recipeName=pasta carbonara, maxCalories=500)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: restaurant_finder with description: Locate restaurants based on certain criteria such as cuisine, city, and dietary preferences. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'City where you are looking for the restaurant.'}, 'cuisine': {'type': 'string', 'description': 'Type of cuisine you are interested in.'}, 'diet': {'type': 'string', 'description': "Dietary preferences. e.g. 'Vegetarian', 'Gluten-free', etc. Default 'Vegetarian'."}}, 'required': ['city', 'cuisine']}, if you are asked to Find Italian restaurants near New York city that serves gluten-free options., you will call...
A. similar_function(city=New York City, cuisine=Italian, diet=Gluten-free)
B. restaurant_finder(city=New York City, cuisine=Italian, diet=Gluten-free)
C. restaurant_finder(wrong_param=value)
D. restaurant_finder()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_best_sushi_places with description: Returns the best sushi places given the city, review_rate and top number. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The city in which to look for the sushi places.'}, 'top': {'type': 'integer', 'description': 'The number of top sushi places to be returned.'}, 'review_rate': {'type': 'float', 'description': 'The review rating to filter the sushi places. Places with review ratings above this value will be returned. Default 0.00.'}}, 'required': ['city', 'top']}, if you are asked to What are the top five sushi restaurants with high reviews i.e. above 4/5 in Tokyo?, you will call...
A. similar_function(city=Tokyo, top=5, review_rate=4.0)
B. get_best_sushi_places(city=Tokyo, top=5, review_rate=4.0)
C. get_best_sushi_places(wrong_param=value)
D. get_best_sushi_places()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: restaurant_search.find_closest with description: Locate the closest sushi restaurant based on certain criteria, such as the presence of a patio. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city, for instance Boston, MA'}, 'cuisine': {'type': 'string', 'description': 'Type of food like Sushi.'}, 'amenities': {'type': 'array', 'items': {'type': 'string', 'enum': ['Patio', 'Wi-Fi', 'Happy Hour', 'Wheelchair Accessible']}, 'description': "Preferred amenities in the restaurant. Default 'Wi-Fi'."}}, 'required': ['location', 'cuisine']}, if you are asked to Find the closest sushi restaurant with a patio in Boston., you will call...
A. similar_function(location=Boston, cuisine=Sushi, amenities=['Patio'])
B. find_closest(location=Boston, cuisine=Sushi, amenities=['Patio'])
C. find_closest(wrong_param=value)
D. find_closest()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: find_restaurant with description: Locate nearby restaurants based on user defined criteria and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The location where user wants to search for a restaurant.'}, 'type': {'type': 'string', 'description': 'The type of the cuisine/restaurant.'}, 'diet_option': {'type': 'string', 'description': 'Special dietary preferences.'}}, 'required': ['location', 'type', 'diet_option']}, if you are asked to Can I find an Italian restaurant with Gluten-free options near Brooklyn?, you will call...
A. similar_function(location=Brooklyn, type=Italian, diet_option=Gluten-free)
B. find_restaurant(wrong_param=value)
C. find_restaurant()
D. find_restaurant(location=Brooklyn, type=Italian, diet_option=Gluten-free)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: cooking_conversion.convert with description: Convert cooking measurements from one unit to another. and parameters: {'type': 'dict', 'properties': {'quantity': {'type': 'integer', 'description': 'The quantity to be converted.'}, 'from_unit': {'type': 'string', 'description': 'The unit to convert from.'}, 'to_unit': {'type': 'string', 'description': 'The unit to convert to.'}, 'item': {'type': 'string', 'description': 'The item to be converted.'}}, 'required': ['quantity', 'from_unit', 'to_unit', 'item']}, if you are asked to How many ounces in 2 pounds of butter?, you will call...
A. similar_function(quantity=2, from_unit=pound, to_unit=ounce, item=butter)
B. cooking_conversion.convert(wrong_param=value)
C. cooking_conversion.convert(quantity=2, from_unit=pound, to_unit=ounce, item=butter)
D. cooking_conversion.convert()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: recipe.unit_conversion with description: Convert a value from one kitchen unit to another for cooking purposes. and parameters: {'type': 'dict', 'properties': {'value': {'type': 'integer', 'description': 'The value to be converted.'}, 'from_unit': {'type': 'string', 'description': "The unit to convert from. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, 'to_unit': {'type': 'string', 'description': "The unit to convert to. Supports 'teaspoon', 'tablespoon', 'cup', etc."}, 'precision': {'type': 'integer', 'description': 'The precision to round the output to, in case of a non-integer result. Optional, default is 1.'}}, 'required': ['value', 'from_unit', 'to_unit']}, if you are asked to How many teaspoons are in 2 tablespoons for measurement in my recipe?, you will call...
A. similar_function(value=2, from_unit=tablespoon, to_unit=teaspoon, precision=1)
B. recipe.unit_conversion(wrong_param=value)
C. recipe.unit_conversion()
D. recipe.unit_conversion(value=2, from_unit=tablespoon, to_unit=teaspoon, precision=1)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: find_recipe with description: Find a recipe based on the dietary restrictions, recipe type, and time constraints. and parameters: {'type': 'dict', 'properties': {'dietary_restrictions': {'type': 'string', 'description': 'Dietary restrictions e.g. vegan, vegetarian, gluten free, dairy free.'}, 'recipe_type': {'type': 'string', 'description': 'Type of the recipe. E.g. dessert, main course, breakfast.'}, 'time': {'type': 'integer', 'description': 'Time limit in minutes to prep the meal.'}}, 'required': ['dietary_restrictions', 'recipe_type', 'time']}, if you are asked to Find me a vegan recipe for brownies which prep time is under 30 minutes., you will call...
A. similar_function(dietary_restrictions=vegan, recipe_type=dessert, time=30)
B. find_recipe(wrong_param=value)
C. find_recipe(dietary_restrictions=vegan, recipe_type=dessert, time=30)
D. find_recipe()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: calculate_cooking_time with description: Calculate the cooking time for a roast chicken. and parameters: {'type': 'dict', 'properties': {'weight_kg': {'type': 'float', 'description': 'The weight of the chicken in kilograms.'}, 'cooking_method': {'type': 'string', 'description': "The method of cooking, defaults to 'roast'."}, 'temp_celsius': {'type': 'integer', 'description': 'The cooking temperature in degrees celsius, defaults to 180.'}}, 'required': ['weight_kg']}, if you are asked to How much time will it take to cook a roast chicken of 1.5 kg?, you will call...
A. similar_function(weight_kg=1.5, cooking_method=, temp_celsius=)
B. calculate_cooking_time(wrong_param=value)
C. calculate_cooking_time()
D. calculate_cooking_time(weight_kg=1.5, cooking_method=, temp_celsius=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: grocery_store.find_nearby with description: Locate nearby grocery stores based on specific criteria like organic fruits and vegetables. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. Houston, TX'}, 'categories': {'type': 'array', 'items': {'type': 'string', 'enum': ['Organic', 'Vegetables', 'Fruits', 'Dairy', 'Seafood', 'Bakery']}, 'description': 'Categories of items to be found in the grocery store. Default is all if not specified.'}}, 'required': ['location']}, if you are asked to Find a grocery store near me with organic fruits and vegetables in Houston., you will call...
A. similar_function(location=Houston, categories=['Organic', 'Vegetables', 'Fruits'])
B. grocery_store.find_nearby(wrong_param=value)
C. grocery_store.find_nearby()
D. grocery_store.find_nearby(location=Houston, categories=['Organic', 'Vegetables', 'Fruits'])

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: safeway.order with description: Order specified items from a Safeway location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The location of the Safeway store, e.g. Palo Alto, CA.'}, 'items': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of items to order.'}, 'quantity': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Quantity of each item in the order list.'}}, 'required': ['location', 'items', 'quantity']}, if you are asked to Order three bottles of olive oil and a five pound bag of rice from Safeway in Palo Alto., you will call...
A. similar_function(location=Palo Alto, items=['olive oil', 'rice'], quantity=[3, 1])
B. safeway.order(location=Palo Alto, items=['olive oil', 'rice'], quantity=[3, 1])
C. safeway.order(wrong_param=value)
D. safeway.order()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: whole_foods.check_price with description: Check the price of items at a specific Whole Foods location. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'Location of the Whole Foods store.'}, 'items': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of items for which the price needs to be checked.'}}, 'required': ['location', 'items']}, if you are asked to Check the price of tomatoes and lettuce at the Whole Foods in Los Angeles., you will call...
A. similar_function(location=Los Angeles, items=['tomatoes', 'lettuce'])
B. whole_foods.check_price(location=Los Angeles, items=['tomatoes', 'lettuce'])
C. whole_foods.check_price(wrong_param=value)
D. whole_foods.check_price()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: whole_foods.find_top_brands with description: Get top brands based on a specific product from Whole Foods and parameters: {'type': 'dict', 'properties': {'product': {'type': 'string', 'description': 'The product for which the top brands should be fetched.'}, 'number': {'type': 'integer', 'description': 'Number of top brands to be fetched. Default is 5'}, 'organic': {'type': 'boolean', 'description': 'If the product should be organic. Default is false'}}, 'required': ['product']}, if you are asked to Find the top five organic bananas brands on the basis of rating from Whole Foods store., you will call...
A. similar_function(product=bananas, number=5, organic=True)
B. whole_foods.find_top_brands(wrong_param=value)
C. whole_foods.find_top_brands()
D. whole_foods.find_top_brands(product=bananas, number=5, organic=True)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: walmart.purchase with description: Retrieve information of items from Walmart including stock availability. and parameters: {'type': 'dict', 'properties': {'loc': {'type': 'string', 'description': 'Location of the nearest Walmart.'}, 'product_list': {'type': 'array', 'items': {'type': 'string'}, 'description': 'Items to be purchased listed in an array.'}, 'pack_size': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Size of the product pack if applicable. The size of the array should be equal to product_list. Default is not use it if not specified.'}}, 'required': ['loc', 'product_list']}, if you are asked to I want to buy apples, rice, and 12 pack of bottled water from a Walmart near San Jose. Show me the product information and stock availability., you will call...
A. similar_function(loc=San Jose, product_list=['apples', 'rice', 'bottled water'], pack_size=[1, 1, 12])
B. walmart.purchase(loc=San Jose, product_list=['apples', 'rice', 'bottled water'], pack_size=[1, 1, 12])
C. walmart.purchase(wrong_param=value)
D. walmart.purchase()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: grocery_info.nutritional_info with description: Retrieve nutritional information for a given food item from a particular store and parameters: {'type': 'dict', 'properties': {'store': {'type': 'string', 'description': 'The store where the item is available'}, 'food': {'type': 'string', 'description': 'Food item for which information is needed.'}, 'information': {'type': 'array', 'items': {'type': 'string', 'enum': ['Protein', 'Calories', 'Carbohydrates', 'Fat', 'Fiber']}, 'description': 'Nutritional details required.'}}, 'required': ['store', 'food', 'information']}, if you are asked to Check the amount of protein, calories and carbs in an avocado from Walmart., you will call...
A. grocery_info.nutritional_info(store=Walmart, food=avocado, information=['Protein', 'Calories', 'Carbohydrates'])
B. similar_function(store=Walmart, food=avocado, information=['Protein', 'Calories', 'Carbohydrates'])
C. grocery_info.nutritional_info(wrong_param=value)
D. grocery_info.nutritional_info()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: walmart.check_price with description: Calculate total price for given items and their quantities at Walmart. and parameters: {'type': 'dict', 'properties': {'items': {'type': 'array', 'items': {'type': 'string'}, 'description': 'List of items to be priced.'}, 'quantities': {'type': 'array', 'items': {'type': 'integer'}, 'description': 'Quantity of each item corresponding to the items list.'}, 'store_location': {'type': 'string', 'description': 'The store location for specific pricing (optional). Default to all if not specified.'}}, 'required': ['items', 'quantities']}, if you are asked to Check the total price for three pumpkins and two dozen eggs at Walmart., you will call...
A. similar_function(items=['pumpkins', 'eggs'], quantities=[3, 24], store_location=Los Angeles)
B. walmart.check_price(wrong_param=value)
C. walmart.check_price(items=['pumpkins', 'eggs'], quantities=[3, 24], store_location=Los Angeles)
D. walmart.check_price()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: time_zone_converter with description: Retrieve the current time of a specific city. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The city you want to know the current time for.'}, 'country': {'type': 'string', 'description': 'The country where the city is located.'}, 'display_format': {'type': 'string', 'description': "The time display format: '12h' or '24h'. Default is '24h'."}}, 'required': ['city', 'country']}, if you are asked to What time is it currently in London, UK in 24 hour format?, you will call...
A. similar_function(city=London, country=UK, display_format=24h)
B. time_zone_converter(city=London, country=UK, display_format=24h)
C. time_zone_converter(wrong_param=value)
D. time_zone_converter()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_current_time with description: Retrieve the current time for a specified city and country. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The city for which the current time is to be retrieved.'}, 'country': {'type': 'string', 'description': 'The country where the city is located.'}, 'format': {'type': 'string', 'description': "The format in which the time is to be displayed, optional (defaults to 'HH:MM:SS')."}}, 'required': ['city', 'country']}, if you are asked to What is the current time in Sydney, Australia?, you will call...
A. similar_function(city=Sydney, country=Australia, format=)
B. get_current_time(city=Sydney, country=Australia, format=)
C. get_current_time(wrong_param=value)
D. get_current_time()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: timezone.convert with description: Convert time from one time zone to another. and parameters: {'type': 'dict', 'properties': {'time': {'type': 'string', 'description': 'The local time you want to convert, e.g. 3pm'}, 'from_timezone': {'type': 'string', 'description': 'The time zone you want to convert from.'}, 'to_timezone': {'type': 'string', 'description': 'The time zone you want to convert to.'}}, 'required': ['time', 'from_timezone', 'to_timezone']}, if you are asked to Convert time 3pm from New York time zone to London time zone., you will call...
A. timezone.convert(time=3pm, from_timezone=America/New_York, to_timezone=Europe/London)
B. similar_function(time=3pm, from_timezone=America/New_York, to_timezone=Europe/London)
C. timezone.convert(wrong_param=value)
D. timezone.convert()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_current_time with description: Retrieve the current time in a specific time zone. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The name of the city.'}, 'country': {'type': 'string', 'description': 'The name of the country.'}, 'timezone': {'type': 'string', 'description': 'The optional timezone to get current time. Default '}}, 'required': ['location', 'country']}, if you are asked to What's the current time in Sydney, Australia?, you will call...
A. similar_function(location=Sydney, country=Australia, timezone=)
B. get_current_time(location=Sydney, country=Australia, timezone=)
C. get_current_time(wrong_param=value)
D. get_current_time()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: hotel_booking with description: Books a hotel room given the location, room type, stay duration and any additional preferences. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city where you want to book the hotel.'}, 'room_type': {'type': 'string', 'description': "Type of the room required. Options: 'single', 'double', 'deluxe', etc."}, 'duration': {'type': 'integer', 'description': 'The number of nights you want to book the hotel for.'}, 'start_date': {'type': 'string', 'description': 'The date when your stay begins.'}, 'preferences': {'type': 'array', 'items': {'type': 'string', 'enum': ['pet_friendly', 'gym', 'swimming_pool', 'free_breakfast', 'parking']}, 'description': 'Optional preferences of stay at the hotel. Default to use all if not specified.'}}, 'required': ['location', 'room_type', 'duration', 'start_date']}, if you are asked to Book a single room at a pet friendly hotel near Manhattan, New York for 3 nights starting from March 10th, 2023., you will call...
A. hotel_booking(location=Manhattan, New York, room_type=single, duration=3, start_date=2023-03-10, preferences=['pet_friendly'])
B. similar_function(location=Manhattan, New York, room_type=single, duration=3, start_date=2023-03-10, preferences=['pet_friendly'])
C. hotel_booking(wrong_param=value)
D. hotel_booking()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: hilton_hotel.check_availability with description: Check hotel availability for a specific location and time frame. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city where you want to check hotel availability.'}, 'check_in_date': {'type': 'string', 'description': 'The check-in date in the format YYYY-MM-DD.'}, 'check_out_date': {'type': 'string', 'description': 'The check-out date in the format YYYY-MM-DD.'}, 'no_of_adults': {'type': 'integer', 'description': 'The number of adults for the hotel booking.'}, 'hotel_chain': {'type': 'string', 'description': 'The hotel chain where you want to book the hotel.', 'default': 'Hilton'}}, 'required': ['location', 'check_in_date', 'check_out_date', 'no_of_adults']}, if you are asked to Check if any Hilton Hotel is available for two adults in Paris from 2023 April 4th to April 8th?, you will call...
A. similar_function(location=Paris, check_in_date=2023-04-04, check_out_date=2023-04-08, no_of_adults=2, hotel_chain=Hilton)
B. hilton_hotel.check_availability(location=Paris, check_in_date=2023-04-04, check_out_date=2023-04-08, no_of_adults=2, hotel_chain=Hilton)
C. hilton_hotel.check_availability(wrong_param=value)
D. hilton_hotel.check_availability()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: book_hotel with description: Book a room of specified type for a particular number of nights at a specific hotel, starting from a specified date. and parameters: {'type': 'dict', 'properties': {'hotel_name': {'type': 'string', 'description': 'The name of the hotel.'}, 'location': {'type': 'string', 'description': 'The city in which the hotel is located.'}, 'room_type': {'type': 'string', 'description': 'The type of room to be booked.'}, 'start_date': {'type': 'string', 'description': 'The start date for the booking.'}, 'nights': {'type': 'integer', 'description': 'The number of nights for which the booking is to be made.'}}, 'required': ['hotel_name', 'location', 'room_type', 'start_date', 'nights']}, if you are asked to Book a single room for two nights at the Hilton Hotel in Chicago, starting from 10th December 2022., you will call...
A. similar_function(hotel_name=Hilton Hotel, location=Chicago, room_type=single, start_date=2022-12-10, nights=2)
B. book_hotel(wrong_param=value)
C. book_hotel(hotel_name=Hilton Hotel, location=Chicago, room_type=single, start_date=2022-12-10, nights=2)
D. book_hotel()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: book_room with description: Book a room in a specified hotel. and parameters: {'type': 'dict', 'properties': {'hotel_name': {'type': 'string', 'description': 'The name of the hotel.'}, 'room_type': {'type': 'string', 'description': 'The type of room to be booked.'}, 'num_nights': {'type': 'integer', 'description': 'The number of nights to book the room for.'}}, 'required': ['hotel_name', 'room_type', 'num_nights']}, if you are asked to I would like to book a single room for two nights at The Plaza hotel., you will call...
A. similar_function(hotel_name=The Plaza, room_type=Single, num_nights=2)
B. book_room(wrong_param=value)
C. book_room()
D. book_room(hotel_name=The Plaza, room_type=Single, num_nights=2)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: hotel_booking.book with description: Book a hotel room given the city, date, and the number of adults and children. and parameters: {'type': 'dict', 'properties': {'city': {'type': 'string', 'description': 'The city where the hotel is located.'}, 'from_date': {'type': 'string', 'description': 'The start date of the booking. The format is MM-DD-YYYY.'}, 'to_date': {'type': 'string', 'description': 'The end date of the booking. The format is MM-DD-YYYY.'}, 'adults': {'type': 'integer', 'description': 'The number of adults for the booking.'}, 'children': {'type': 'integer', 'description': 'The number of children for the booking.'}, 'room_type': {'type': 'string', 'description': "The type of the room, default is 'Standard'. Options are 'Standard', 'Deluxe', 'Suite'.", 'default': 'Standard'}}, 'required': ['city', 'from_date', 'to_date', 'adults', 'children']}, if you are asked to Book a hotel room for two adults and one child in Paris, France from July 10, 2022 to July 20, 2022., you will call...
A. similar_function(city=Paris, from_date=07-10-2022, to_date=07-20-2022, adults=2, children=1, room_type=Standard)
B. hotel_booking.book(city=Paris, from_date=07-10-2022, to_date=07-20-2022, adults=2, children=1, room_type=Standard)
C. hotel_booking.book(wrong_param=value)
D. hotel_booking.book()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: hotel_bookings.book_room with description: Book a hotel room based on specific criteria like location, room type, and check-in and check-out dates. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state where you want to book the hotel, e.g. Los Angeles, CA'}, 'room_type': {'type': 'string', 'description': 'Preferred type of room in the hotel, e.g. king size, queen size, deluxe, suite etc.'}, 'check_in_date': {'type': 'string', 'description': 'Check-in date for the hotel. Format - DD-MM-YYYY.'}, 'no_of_nights': {'type': 'integer', 'description': 'Number of nights for the stay.'}, 'no_of_rooms': {'type': 'integer', 'description': 'Number of rooms to book. Default is 1.', 'default': 1}}, 'required': ['location', 'room_type', 'check_in_date', 'no_of_nights']}, if you are asked to Book a hotel room with king size bed in Los Angeles for 2 nights starting from 15th October,2023., you will call...
A. similar_function(location=Los Angeles, room_type=King Size, check_in_date=15-10-2023, no_of_nights=2, no_of_rooms=)
B. hotel_bookings.book_room(wrong_param=value)
C. hotel_bookings.book_room()
D. hotel_bookings.book_room(location=Los Angeles, room_type=King Size, check_in_date=15-10-2023, no_of_nights=2, no_of_rooms=)

Correct Answer: D

--------------------------------------------------------------------------------

Given the following function: book_hotel with description: Book a room in a specific hotel with particular preferences and parameters: {'type': 'dict', 'properties': {'hotel_name': {'type': 'string', 'description': 'The name of the hotel.'}, 'location': {'type': 'string', 'description': 'The location of the hotel.'}, 'room_type': {'type': 'string', 'description': 'The type of room preferred.'}, 'start_date': {'type': 'string', 'description': 'The starting date of the stay in format MM-DD-YYYY.'}, 'stay_duration': {'type': 'integer', 'description': 'The duration of the stay in days.'}, 'view': {'type': 'string', 'description': 'The preferred view from the room, can be ignored if no preference. If none provided, assumes no preference.', 'default': 'No preference'}}, 'required': ['hotel_name', 'location', 'room_type', 'start_date', 'stay_duration']}, if you are asked to Book a luxury room in Hotel Paradise, Las Vegas, with a city view for 3 days starting from May 12, 2022., you will call...
A. similar_function(hotel_name=Hotel Paradise, location=Las Vegas, room_type=luxury, start_date=05-12-2022, stay_duration=3, view=city view)
B. book_hotel(hotel_name=Hotel Paradise, location=Las Vegas, room_type=luxury, start_date=05-12-2022, stay_duration=3, view=city view)
C. book_hotel(wrong_param=value)
D. book_hotel()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: hotel_booking with description: Books a hotel room for a specific date range. and parameters: {'type': 'dict', 'properties': {'hotel_name': {'type': 'string', 'description': 'The name of the hotel.'}, 'location': {'type': 'string', 'description': 'The city and state, e.g. New York, NY.'}, 'start_date': {'type': 'string', 'description': "The start date of the reservation. Use format 'YYYY-MM-DD'."}, 'end_date': {'type': 'string', 'description': "The end date of the reservation. Use format 'YYYY-MM-DD'."}, 'rooms': {'type': 'integer', 'default': 1, 'description': 'The number of rooms to reserve.'}}, 'required': ['hotel_name', 'location', 'start_date', 'end_date']}, if you are asked to Book a hotel room at the Plaza Hotel in New York for 3 nights starting from 1st June 2022, you will call...
A. similar_function(hotel_name=Plaza Hotel, location=New York City, NY, start_date=2022-06-01, end_date=2022-06-04, rooms=1)
B. hotel_booking(hotel_name=Plaza Hotel, location=New York City, NY, start_date=2022-06-01, end_date=2022-06-04, rooms=1)
C. hotel_booking(wrong_param=value)
D. hotel_booking()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: currency_exchange.convert with description: Convert an amount from a base currency to a target currency based on the current exchange rate. and parameters: {'type': 'dict', 'properties': {'base_currency': {'type': 'string', 'description': 'The currency to convert from.'}, 'target_currency': {'type': 'string', 'description': 'The currency to convert to.'}, 'amount': {'type': 'integer', 'description': 'The amount in base currency to convert'}}, 'required': ['base_currency', 'target_currency', 'amount']}, if you are asked to How many Canadian dollars can I get for 500 US dollars?, you will call...
A. currency_exchange.convert(base_currency=USD, target_currency=CAD, amount=500)
B. similar_function(base_currency=USD, target_currency=CAD, amount=500)
C. currency_exchange.convert(wrong_param=value)
D. currency_exchange.convert()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: currency_converter with description: Calculates the cost in target currency given the amount in base currency and exchange rate and parameters: {'type': 'dict', 'properties': {'base_currency': {'type': 'string', 'description': 'The currency to convert from.'}, 'target_currency': {'type': 'string', 'description': 'The currency to convert to.'}, 'amount': {'type': 'float', 'description': 'The amount in base currency'}}, 'required': ['base_currency', 'target_currency', 'amount']}, if you are asked to Calculate the current cost in British Pounds if I need to convert 200 US dollars., you will call...
A. similar_function(base_currency=USD, target_currency=GBP, amount=200.0)
B. currency_converter(wrong_param=value)
C. currency_converter(base_currency=USD, target_currency=GBP, amount=200.0)
D. currency_converter()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: currency_conversion.convert with description: Convert a value from one currency to another. and parameters: {'type': 'dict', 'properties': {'amount': {'type': 'integer', 'description': 'The amount to be converted.'}, 'from_currency': {'type': 'string', 'description': 'The currency to convert from.'}, 'to_currency': {'type': 'string', 'description': 'The currency to convert to.'}}, 'required': ['amount', 'from_currency', 'to_currency']}, if you are asked to Convert 150 Euros to Canadian dollars., you will call...
A. similar_function(amount=150, from_currency=EUR, to_currency=CAD)
B. currency_conversion.convert(amount=150, from_currency=EUR, to_currency=CAD)
C. currency_conversion.convert(wrong_param=value)
D. currency_conversion.convert()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: get_exchange_rate_with_fee with description: Retrieve the exchange rate between two currencies including transaction fee. and parameters: {'type': 'dict', 'properties': {'base_currency': {'type': 'string', 'description': 'The base currency.'}, 'target_currency': {'type': 'string', 'description': 'The target currency.'}, 'fee': {'type': 'float', 'description': 'The transaction fee in percentage. Default is 0%.'}}, 'required': ['base_currency', 'target_currency', 'fee']}, if you are asked to Get the exchange rate from British pounds to Japanese yen with the fee 0.02 included., you will call...
A. similar_function(base_currency=GBP, target_currency=JPY, fee=0.02)
B. get_exchange_rate_with_fee(base_currency=GBP, target_currency=JPY, fee=0.02)
C. get_exchange_rate_with_fee(wrong_param=value)
D. get_exchange_rate_with_fee()

Correct Answer: B

--------------------------------------------------------------------------------

Given the following function: latest_exchange_rate with description: Retrieve the latest exchange rate between two specified currencies. and parameters: {'type': 'dict', 'properties': {'source_currency': {'type': 'string', 'description': 'The currency you are converting from.'}, 'target_currency': {'type': 'string', 'description': 'The currency you are converting to.'}, 'amount': {'type': 'float', 'description': 'The amount to be converted. If omitted, default to exchange rate of 1 unit source currency'}}, 'required': ['source_currency', 'target_currency']}, if you are asked to Get me the latest exchange rate from British Pounds to Japanese Yen., you will call...
A. latest_exchange_rate(source_currency=GBP, target_currency=JPY, amount=)
B. similar_function(source_currency=GBP, target_currency=JPY, amount=)
C. latest_exchange_rate(wrong_param=value)
D. latest_exchange_rate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: convert_currency with description: Converts an amount from a particular currency to another currency. and parameters: {'type': 'dict', 'properties': {'base_currency': {'type': 'string', 'description': 'The base currency in which the original amount is present.'}, 'target_currency': {'type': 'string', 'description': 'The currency to which you want to convert.'}, 'amount': {'type': 'integer', 'description': 'The amount you want to convert.'}}, 'required': ['base_currency', 'target_currency', 'amount']}, if you are asked to How much will 20000 Japanese Yen be in United States Dollar?, you will call...
A. similar_function(base_currency=JPY, target_currency=USD, amount=20000)
B. convert_currency(wrong_param=value)
C. convert_currency(base_currency=JPY, target_currency=USD, amount=20000)
D. convert_currency()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: maps.get_distance_duration with description: Retrieve the travel distance and estimated travel time from one location to another via car and parameters: {'type': 'dict', 'properties': {'start_location': {'type': 'string', 'description': 'Starting point of the journey'}, 'end_location': {'type': 'string', 'description': 'Ending point of the journey'}, 'traffic': {'type': 'boolean', 'description': 'If true, considers current traffic. Default is false.'}}, 'required': ['start_location', 'end_location']}, if you are asked to Get me the travel distance and duration from the Eiffel Tower to the Louvre Museum, you will call...
A. maps.get_distance_duration(start_location=Eiffel Tower, end_location=Louvre Museum, traffic=)
B. similar_function(start_location=Eiffel Tower, end_location=Louvre Museum, traffic=)
C. maps.get_distance_duration(wrong_param=value)
D. maps.get_distance_duration()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: parking_lot.find_nearest with description: Locate the nearest parking lot based on a specific location and radius. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The reference location e.g. Central Park, NY'}, 'radius': {'type': 'integer', 'description': 'The maximum distance from the location in miles. Default is 5 miles'}, 'type': {'type': 'string', 'description': "The type of parking lot. Default is 'public'."}}, 'required': ['location', 'radius']}, if you are asked to Find the nearest parking lot within 2 miles of Central Park in New York., you will call...
A. similar_function(location=Central Park, NY, radius=2, type=public)
B. parking_lot.find_nearest(wrong_param=value)
C. parking_lot.find_nearest(location=Central Park, NY, radius=2, type=public)
D. parking_lot.find_nearest()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: hospital.locate with description: Locate nearby hospitals based on location and radius. Options to include specific departments are available. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. Denver, CO'}, 'radius': {'type': 'integer', 'description': 'The radius within which you want to find the hospital in kms.'}, 'department': {'type': 'string', 'description': "Specific department within the hospital. Default is 'General Medicine'.", 'enum': ['General Medicine', 'Emergency', 'Pediatrics', 'Cardiology', 'Orthopedics']}}, 'required': ['location', 'radius']}, if you are asked to Find a hospital within 5 km radius around Denver, Colorado with pediatrics department., you will call...
A. similar_function(location=Denver, Colorado, radius=5, department=Pediatrics)
B. hospital.locate(wrong_param=value)
C. hospital.locate(location=Denver, Colorado, radius=5, department=Pediatrics)
D. hospital.locate()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: distance_calculator.calculate with description: Calculate the distance between two locations, considering terrain. and parameters: {'type': 'dict', 'properties': {'origin': {'type': 'string', 'description': 'Starting location of the distance measurement.'}, 'destination': {'type': 'string', 'description': 'Destination location of the distance measurement.'}, 'consider_terrain': {'type': 'boolean', 'description': 'Whether to account for terrain in distance calculation, defaults to false.'}}, 'required': ['origin', 'destination']}, if you are asked to Find the distance between New York and Boston, accounting for terrain., you will call...
A. distance_calculator.calculate(origin=New York, destination=Boston, consider_terrain=True)
B. similar_function(origin=New York, destination=Boston, consider_terrain=True)
C. distance_calculator.calculate(wrong_param=value)
D. distance_calculator.calculate()

Correct Answer: A

--------------------------------------------------------------------------------

Given the following function: get_museum_hours with description: Retrieve opening hours of a specified museum for the specified day. and parameters: {'type': 'dict', 'properties': {'museum_name': {'type': 'string', 'description': 'The name of the museum.'}, 'day': {'type': 'string', 'description': "Day of the week. If not specified, returns the current day's hours."}}, 'required': ['museum_name', 'day']}, if you are asked to What are the opening hours of the Metropolitan Museum of Art on Saturday?, you will call...
A. similar_function(museum_name=Metropolitan Museum of Art, day=Saturday)
B. get_museum_hours(wrong_param=value)
C. get_museum_hours(museum_name=Metropolitan Museum of Art, day=Saturday)
D. get_museum_hours()

Correct Answer: C

--------------------------------------------------------------------------------

Given the following function: restaurant_search with description: Locates top rated restaurants based on specific criteria such as type of cuisine, ratings, and facilities. and parameters: {'type': 'dict', 'properties': {'location': {'type': 'string', 'description': 'The city and state, e.g. New York City, NY'}, 'cuisine': {'type': 'string', 'description': 'Preferred type of cuisine e.g., Italian, Indian, American, etc.'}, 'rating': {'type': 'integer', 'description': 'Minimum average customer rating out of 5'}, 'accepts_credit_cards': {'type': 'boolean', 'description': 'If the restaurant should accept credit cards.'}}, 'required': ['location', 'cuisine', 'rating', 'accepts_credit_cards']}, if you are asked to Find me the best Italian restaurants in New York City with average customer ratings of more than 4 and accepts credit cards., you will call...
A. similar_function(location=New York City, cuisine=Italian, rating=4, accepts_credit_cards=True)
B. restaurant_search(location=New York City, cuisine=Italian, rating=4, accepts_credit_cards=True)
C. restaurant_search(wrong_param=value)
D. restaurant_search()

Correct Answer: B

--------------------------------------------------------------------------------

